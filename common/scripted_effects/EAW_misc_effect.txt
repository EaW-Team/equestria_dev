reapply_secondary_cosmetic_tags = {
	if = {
		limit = {
			has_country_flag = JER_formed
		}
		set_cosmetic_tag = JER_formed
	}
	else_if = {
		limit = {
			has_country_flag = JER_AVI_formed
		}
		set_cosmetic_tag = JER_AVI_formed
	}
	else_if = {
		limit = {
			has_country_flag = JER_FLO_formed
		}
		set_cosmetic_tag = JER_FLO_formed
	}
	else_if = {
		limit = {
			has_country_flag = EVI_commonwealth
		}
		set_cosmetic_tag = EVI_commonwealth
	}
	else_if = {
		limit = { original_tag = FEA }
		if = {
			limit = { has_country_flag = FEA_STW_union }
			set_cosmetic_tag = FEA_STW_union
		}
		else_if = {
			limit = { has_country_flag = FEA_socdem_takeover_tag }
			set_cosmetic_tag = FEA_socdem_takeover_tag
		}
		else_if = {
			limit = { has_country_flag = FEA_c_takeover_tag }
			set_cosmetic_tag = FEA_c_takeover_tag
		}
		else_if = {
			limit = { has_country_flag = FEA_nazbol_takeover_tag }
			set_cosmetic_tag = FEA_nazbol_takeover_tag
		}
		else_if = {
			limit = {
				OR = {
					has_focus_tree = feathisia_focus_PvdA_led_coalition
					has_focus_tree = feathisia_focus_PvdA_led_coalition_imperial
				}
				OR = {
					has_idea = FEA_beloved_monarch
					has_idea = FEA_beloved_monarch_2
					has_idea = FEA_beloved_monarch_3
				}
				OR = {
					is_subject = no
					overlord = { NOT = { has_government = communism } }
				}
			}
			if = {
				limit = { is_subject_of = GRD }
				set_cosmetic_tag = FEA_PvdA_old_flag_GRI_Puppet
			}
			else = { set_cosmetic_tag = FEA_PvdA_old_flag }
			
		}
		
	}
	# JER
	else_if = {
		limit = {
			original_tag = JER
			OR = {
				has_government = communism
				has_country_flag = have_regular_puppets
			}
		}
		#if = {
		#	limit = { has_country_flag = JER_federation }
		#	set_cosmetic_tag = JER_federation
		#}
		#if = {
		#	limit = { has_country_flag = JER_state }
		#	set_cosmetic_tag = JER_state
		#	
		#}
		if = {
			limit = { has_country_leader = { ruling_only = yes character = JER_victor_allard } }
			set_cosmetic_tag = JER_soviet
			
		}
		else = {
			set_cosmetic_tag = JER_REPUBLIC
		}
	}
	# VAN
	#else_if = {
	#	limit = { original_tag = VAN has_country_flag = VANEESR }
	#	set_cosmetic_tag = VANEESR
	#	
	#}
	# LUS
	else_if = {
		limit = { original_tag = LUS }
		if = {
			limit = { has_country_flag = LUS_kingdom_flag }
			set_cosmetic_tag = LUS_kingdom_flag
		}
		else_if = {
			limit = { has_country_flag = LUS_lushi_republic }
			set_cosmetic_tag = LUS_lushi_republic
		}
		else_if = {
			limit = { has_country_flag = LUS_supremacy }
			set_cosmetic_tag = LUS_supremacy
		}
		else_if = {
			limit = { has_country_flag = LUS_bandit_state }
			set_cosmetic_tag = LUS_bandit_state
			
		}
		else_if = {
			limit = { has_country_flag = HLQ_dual_monarchy_flag }
			set_cosmetic_tag = HLQ_dual_monarchy
			
		}
		
	}
	# RCT
	else_if = {
		limit = { original_tag = RCT }
		if = {
			limit = { has_country_flag = RCT_caramels_coup }
			set_cosmetic_tag = RCT_USSR
		}
		else_if = {
			limit = { has_country_flag = RCT_nova_remains }
			set_cosmetic_tag = RCT_democratic_socialist_republic
			
		}
		
	}
	# EQS
	else_if = {
		limit = { original_tag = EQS }
		if = {
			limit = { has_country_flag = parliament_prime_minister }
			if = {
				limit = { NOT = { has_idea = alicorn_sisters } }
				if = {
					limit = { has_country_flag = EQS_dem_luna }
					set_cosmetic_tag = EQS_DEM2L
				}
				else = {
					set_cosmetic_tag = EQS_DEM2
				}
			}
			else = {
				set_cosmetic_tag = EQS_DEM2CL
			}
			if = {
				limit = { has_completed_focus = eqs_overrule_princess }
				set_cosmetic_tag = EQS_DEM3
			}
		}
		else_if = {
			limit = { has_country_flag = congress_president }
			set_cosmetic_tag = EQS_DEM1
		}
	}
	# STG
	else_if = {
		limit = { original_tag = STG is_subject = no }
		if = {
			limit = {
				has_government = democratic
			}
			set_cosmetic_tag = STG_DEM
		}
		else_if = {
			limit = {
				has_government = fascism
			}
			set_cosmetic_tag = STG_PAGAN
		}
		else_if = {
			limit = {
				has_government = neutrality
			}
			set_cosmetic_tag = STG_MONARCHY
		}
	}
	else_if = {
		limit = { original_tag = BAN }
		if = {
			limit = {
				has_completed_focus = BAN_bandit_kingdom_of_the_south
			}
			set_cosmetic_tag = BAN_QUEEN
		}
		else_if = {
			limit = {
				has_completed_focus = BAN_integrate_griffonstone
			}
			set_cosmetic_tag = BAN_BOI
		}
	}
	else_if = {
		limit = { original_tag = BAL }
		if = {
			limit = {
				has_country_flag = BAL_EQS_anarchy_tag
			}
			set_cosmetic_tag = BAL_EQS_anarchy_tag
		}
		else_if = {
			limit = {
				has_country_flag = BAL_EQS_worst_timeline_tag
			}
			set_cosmetic_tag = BAL_EQS_worst_timeline_tag
		}
		else_if = {
			limit = {
				has_country_flag = BAL_EQS_tag
			}
			set_cosmetic_tag = BAL_EQS_tag
		}
		else_if = {
			limit = {
				has_country_flag = BAL_COMPLETE_ANARCHY
			}
			set_cosmetic_tag = BAL_COMPLETE_ANARCHY
		}
		else_if = {
			limit = {
				has_country_flag = BAL_GLORY_TO_ARSTOTZKA
			}
			set_cosmetic_tag = BAL_GLORY_TO_ARSTOTZKA
		}
		else_if = {
			limit = {
				has_country_flag = BAL_sesr
			}
			set_cosmetic_tag = BAL_sesr
		}
	}
	else_if = {
		limit = { original_tag = CCN }
		if = {
			limit = {
				has_country_flag = OLC
			}
			set_cosmetic_tag = OLC
		}
	}
	else_if = {
		limit = { original_tag = LNS }
		if = {
			limit = {
				has_country_flag = LNS_bandit_takeover
			}
			set_cosmetic_tag = LNS_bandits
		}
	}
	else_if = {
		limit = { original_tag = LSC }
		if = {
			limit = {
				has_completed_focus = LSC_vartai_republic
			}
			set_cosmetic_tag = LSC_vartai
		}
	}
	else_if = {
		limit = { original_tag = GRW }
		if = {
			limit = {
				has_country_flag = GRW_prywhen_formed
			}
			set_cosmetic_tag = GRW_prywhen
		}
	}
	else_if = {
		limit = { original_tag = SRS }
		if = {
			limit = {
				has_country_flag = SRS_has_switched_name_to_srfg
			}
			set_cosmetic_tag = SRS_SRFG
		}
	}
	else_if = {
		limit = { original_tag = MNC }
		if = {
			limit = {
				has_country_flag = MNC_b_kingdom
			}
			set_cosmetic_tag = MNC_b_kingdom
		}
	}
	else_if = {
		limit = { original_tag = TRD }
		if = {
			limit = {
				has_country_flag = TRD_skyfall_union
			}
			set_cosmetic_tag = TRD_skyfall_union
		}
		else_if = {
			limit = {
				has_country_flag = TRD_borean_archonate
			}
			set_cosmetic_tag = TRD_borean_archonate
		}
		else_if = {
			limit = {
				has_country_flag = TRD_skyfall_republic
			}
			set_cosmetic_tag = TRD_skyfall_republic
		}
		else_if = {
			limit = {
				has_country_flag = TRD_peoples_republic
			}
			set_cosmetic_tag = TRD_peoples_republic
		}
	}
	else_if = {
		limit = { original_tag = ROU }
		if = {
			limit = {
				has_country_flag = ROU_empire
			}
			set_cosmetic_tag = ROU_empire
		}
	}
	else_if = {
		limit = { original_tag = SCS }
		if = {
			limit = {
				has_country_flag = SCS_equestria
			}
			set_cosmetic_tag = SCS_equestria
		}
		else_if = {
			limit = {
				has_country_flag = SCS_royalist
			}
			set_cosmetic_tag = SCS_royalist
		}
		else_if = {
			limit = {
				has_country_flag = SCS_old_flag
			}
			set_cosmetic_tag = SCS_old_flag
		}
	}
	else_if = {
		limit = { original_tag = HLQ }
		if = {
			limit = { has_country_flag = HLQ_empire_formed }
			set_cosmetic_tag = HLQ_empire
		}
		else_if = {
			limit = { has_country_flag = HLQ_empire_2 }
			set_cosmetic_tag = HLQ_empire_2
		}
		else_if = {
			limit = { has_country_flag = have_regular_puppets has_country_flag = HLQ_republic }
			set_cosmetic_tag = HLQ_republic
		}
		else_if = {
			limit = { has_country_flag = have_regular_puppets has_country_flag = HLQ_federal_republic }
			set_cosmetic_tag = HLQ_federal_republic
		}
		else_if = {
			limit = { has_country_flag = HLQ_kingdom_formed }
			set_cosmetic_tag = HLQ_kingdom
		}
		else_if = {
			limit = { has_country_flag = HLQ_dual_monarchy_flag }
			set_cosmetic_tag = HLQ_dual_monarchy
			
		}
		else_if = {
			limit = { has_country_flag = HLQ_triple_monarchy_formed }
			set_cosmetic_tag = HLQ_triple_monarchy
		}
	}
	else_if = {
		limit = { original_tag = AET }
		if = {
			limit = { has_completed_focus = AET_free_territory_established }
			set_cosmetic_tag = AET_makhno
		}
		else_if = {
			limit = { has_completed_focus = AET_imperium_of_maar }
			set_cosmetic_tag = AET_imperium
		}
	}
	else_if = {
		limit = { original_tag = MIT }
		if = {
			limit = {
				has_completed_focus = MIT_megali_asterion
			}
			set_cosmetic_tag = MIT_MEGALI
		}
	}
	else_if = {
		limit = {
			OR = {
				original_tag = FAT
				original_tag = FAW
			}
		}
		if = {
			limit = { has_completed_focus = FST_new_dawn_for_the_republic }
			set_cosmetic_tag = FAT
		}
		else_if = {
			limit = { has_completed_focus = FST_kingly_ambitions }
			set_cosmetic_tag = FAT_Kingdom
		}
		else_if = {
			limit = { has_completed_focus = FAT_new_dawn_over_cloudbury }
			set_cosmetic_tag = FAT_Cloudbury
		}
	}
	else_if = {
		limit = { original_tag = FLO }
		if = {
			limit = { has_completed_focus = FBK_crown_gering }
			set_cosmetic_tag = FBK_kingdom
		}
	}
	else_if = {
		limit = { original_tag = GRY }
		if = {
			limit = {
				OR = {
					has_completed_focus = GRY_the_hetman_alone
					has_completed_focus = GRY_monarchy_compromise
					has_completed_focus = GRY_a_crowned_hetman
				}
			}
			set_cosmetic_tag = GRY_kingdom
		}
		else_if = {
			limit = { has_completed_focus = GRY_preserve_hetmanate }
			set_cosmetic_tag = GRY_dictatorship
		}
	}
	else_if = {
		limit = { original_tag = HAU }
		if = {
			limit = {
				has_country_flag = HAU_republic_tag
			}
			set_cosmetic_tag = HAU_republic_tag
		}
		else_if = {
			limit = {
				has_country_leader = {
					character = FAT_walter_emerich
					ruling_only = yes
				}
			}
			set_cosmetic_tag = HAU_emerich_tag
		}
		else_if = {
			limit = {
				has_country_flag = HAU_kingdom_tag
			}
			set_cosmetic_tag = HAU_kingdom_tag
		}
	}
	else_if = {
		limit = { original_tag = HLR }
		if = {
			limit = { has_completed_focus = HLR_A_New_Kingdom }
			set_cosmetic_tag = HLR_kingdom
		}
	}
	else_if = {
		limit = { original_tag = JAK }
		if = {
			limit = { has_completed_focus = JAK_true_king }
			set_cosmetic_tag = JAK_kingdom
		}
	}
	else_if = {
		limit = { original_tag = FLO }
		if = {
			limit = { has_country_flag = FLO_republic }
			set_cosmetic_tag = FLO_republic_tag
		}
	}
	else_if = {
		limit = { original_tag = PYT }
		if = {
			limit = { has_country_flag = GRIF_REPUBLIC }
			set_cosmetic_tag = GRIF_REPUBLIC
		}
		else_if = {
			limit = { has_country_flag = PYT_SSR }
			set_cosmetic_tag = PYT_SSR
		}
		else_if = {
			limit = { has_country_flag = PYT_duchy }
			set_cosmetic_tag = PYT_duchy
		}
		else_if = {
			limit = { has_country_flag = PYT_republic }
			set_cosmetic_tag = PYT_republic
		}
		else_if = {
			limit = { has_country_flag = PYT_principality }
			set_cosmetic_tag = PYT_principality
		}
	}
	else_if = {
		limit = { original_tag = GRU }
		if = {
			limit = { has_country_flag = GRU_kingdom }
			set_cosmetic_tag = GRU_kingdom
		}
		else_if = {
			limit = { has_country_flag = GRU_company }
			set_cosmetic_tag = GRU_company
		}
		else_if = {
			limit = { has_country_flag = GRU_order }
			set_cosmetic_tag = GRU_order
		}
	}
	else_if = {
		limit = { original_tag = BRZ }
		if = {
			limit = {
				has_country_leader = {
					character = BRZ_kimball_barking_sun
					ruling_only = yes
				}
			}
			set_cosmetic_tag = BRZ_kim
			
		}
	}
	else_if = {
		limit = { original_tag = BAN }
		if = {
			limit = { has_completed_focus = BAN_integrate_griffonstone }
			set_cosmetic_tag = BAN_BOI
		}
		else_if = {
			limit = { has_completed_focus = BAN_bandit_kingdom_of_the_south }
			set_cosmetic_tag = BAN_QUEEN
		}
	}
	else_if = {
		limit = { original_tag = FAL }
		if = {
			limit = { has_completed_focus = FAL_expand_nation }
			set_cosmetic_tag = FAL_empire
		}
	}
	else_if = {
		limit = { original_tag = ANG }
		if = {
			limit = { has_country_flag = ANG_republic }
			set_cosmetic_tag = ANG_republic
		}
	}
	else_if = {
		limit = { original_tag = ARA }
		if = {
			limit = { has_country_flag = ARA_sparleos }
			set_cosmetic_tag = ARA_sparleos
		}
	}
	else_if = {
		limit = { original_tag = CYA }
		if = {
			limit = { has_country_flag = CYA_equality }
			set_cosmetic_tag = CYA_equality
		}
		else_if = {
			limit = { has_idea = CYA_league_of_southern_cities }
			set_cosmetic_tag = CYA_southcities
		}
		else_if = {
			limit = { has_country_flag = CYA_citystate }
			set_cosmetic_tag = CYA_citystate
		}
	}
	else_if = {
		limit = { original_tag = YAL }
		if = {
			limit = { has_country_flag = YAL_Grover_Lord_of_Yale }
			set_cosmetic_tag = YAL_Grover_Lord_of_Yale
		}
		else_if = {
			limit = { has_country_flag = YAL_herzland_kingdom_name }
			set_cosmetic_tag = YAL_herzland_kingdom_name
		}
		else_if = {
			limit = { has_completed_focus = YAL_victory_of_the_proletariat }
			set_cosmetic_tag = YAL_herzland
		}
		else_if = {
			limit = { has_completed_focus = YAL_its_good_to_be_home }
			set_cosmetic_tag = YAL_grover_empire
		}
		else_if = {
			limit = { has_completed_focus = YAL_father_of_revolution }
			set_cosmetic_tag = GRIF_REPUBLIC
		}
	}
	else_if = {
		limit = { original_tag = LCT }
		if = {
			limit = {
				has_completed_focus = LCT_long_live_the_prince
			}
			set_cosmetic_tag = LCT_prince
		}
		else_if = {
			limit = {
				has_country_flag = LCT_prince_army
			}
			set_cosmetic_tag = LCT_prince_army
		}
		else_if = {
			limit = {
				has_completed_focus = LCT_greater_lake_city
			}
			set_cosmetic_tag = LCT_great_lake_city
		}
	}
	else_if = {
		limit = { original_tag = WIT }
		if = {
			limit = {
				has_country_flag = have_regular_puppets
			}
			set_cosmetic_tag = WIT_republic_tag
		}
		else_if = {
			limit = {
				has_country_flag = WIT_high_kingdom_tag
			}
			set_cosmetic_tag = WIT_high_kingdom_tag
		}
	}
	else_if = {
		limit = { original_tag = BAK }
		if = {
			limit = {
				has_completed_focus = BAK_proclaim_union_fascist
			}
			set_cosmetic_tag = BAK_riverlands_republic
		}
	}
	else_if = {
		limit = { original_tag = ZES }
		if = {
			limit = {
				has_country_flag = ZES_pasarinha_state
			}
			set_cosmetic_tag = ZES_pasarinha_state
		}
		else_if = {
			limit = {
				has_country_flag = ZES_confederation
			}
			set_cosmetic_tag = ZES_confederation
		}
	}
}

5x_chance_to_remove_arms_factory = {
	chance_to_remove_arms_factory = yes
	chance_to_remove_arms_factory = yes
	chance_to_remove_arms_factory = yes
	chance_to_remove_arms_factory = yes
	chance_to_remove_arms_factory = yes
}

5x_chance_to_remove_civilian_factory = {
	chance_to_remove_civilian_factory = yes
	chance_to_remove_civilian_factory = yes
	chance_to_remove_civilian_factory = yes
	chance_to_remove_civilian_factory = yes
	chance_to_remove_civilian_factory = yes
}

5x_chance_to_remove_dockyard = {
	chance_to_remove_dockyard = yes
	chance_to_remove_dockyard = yes
	chance_to_remove_dockyard = yes
	chance_to_remove_dockyard = yes
	chance_to_remove_dockyard = yes
}

chance_to_remove_arms_factory = {
	random_list = {
		3 = {
			remove_building = { type = arms_factory level = 1 }
		}
		7 = { }
	}
}

chance_to_remove_civilian_factory = {
	random_list = {
		3 = {
			remove_building = { type = industrial_complex level = 1 }
		}
		7 = { }
	}
}

chance_to_remove_dockyard = {
	random_list = {
		2 = {
			remove_building = { type = dockyard level = 1 }
		}
		8 = { }
	}
}

decrease_illiteracy = {
	if = {
		limit = { has_idea = lack_of_scientists }
		swap_ideas = { add_idea = lack_of_scientists1 remove_idea = lack_of_scientists }
	}
	else_if = {
		limit = { has_idea = lack_of_scientists1 }
		swap_ideas = { add_idea = lack_of_scientists2 remove_idea = lack_of_scientists1 }
	}
	else_if = {
		limit = { has_idea = lack_of_scientists2 }
		swap_ideas = { add_idea = lack_of_scientists3 remove_idea = lack_of_scientists2 }
	}
	else_if = {
		limit = { has_idea = lack_of_scientists3 }
		swap_ideas = { add_idea = no_lack_of_scientists remove_idea = lack_of_scientists3 }
	}
}

decrease_illiteracy_by_two_levels = {
	if = {
		limit = { has_idea = lack_of_scientists }
		swap_ideas = { add_idea = lack_of_scientists2 remove_idea = lack_of_scientists }
	}
	else_if = {
		limit = { has_idea = lack_of_scientists1 }
		swap_ideas = { add_idea = lack_of_scientists3 remove_idea = lack_of_scientists1 }
	}
	else_if = {
		limit = { has_idea = lack_of_scientists2 }
		swap_ideas = { add_idea = no_lack_of_scientists remove_idea = lack_of_scientists2 }
	}
	else_if = {
		limit = { has_idea = lack_of_scientists3 }
		swap_ideas = { add_idea = no_lack_of_scientists remove_idea = lack_of_scientists3 }
	}
}

remove_illiteracy = {
	remove_ideas = lack_of_scientists
	remove_ideas = lack_of_scientists1
	remove_ideas = lack_of_scientists2
	remove_ideas = lack_of_scientists3
	add_ideas = no_lack_of_scientists
}

decrease_poverty = {
	if = {
		limit = { has_idea = poverty }
		swap_ideas = { add_idea = poverty1 remove_idea = poverty }
	}
	else_if = {
		limit = { has_idea = poverty1 }
		swap_ideas = { add_idea = poverty2 remove_idea = poverty1 }
	}
	else_if = {
		limit = { has_idea = poverty2 }
		swap_ideas = { add_idea = poverty3 remove_idea = poverty2 }
	}
	else_if = {
		limit = { has_idea = poverty3 }
		swap_ideas = { add_idea = poverty4 remove_idea = poverty3 }
	}
	else_if = {
		limit = { has_idea = poverty4 }
		swap_ideas = { add_idea = poverty5 remove_idea = poverty4 }
	}
	else_if = {
		limit = { has_idea = poverty5 }
		swap_ideas = { add_idea = no_poverty remove_idea = poverty5 }
	}
}
increase_poverty = {
	if = {
		limit = { has_idea = poverty1 }
		swap_ideas = { add_idea = poverty remove_idea = poverty1 }
	}
	else_if = {
		limit = { has_idea = poverty2 }
		swap_ideas = { add_idea = poverty1 remove_idea = poverty2 }
	}
	else_if = {
		limit = { has_idea = poverty3 }
		swap_ideas = { add_idea = poverty2 remove_idea = poverty3 }
	}
	else_if = {
		limit = { has_idea = poverty4 }
		swap_ideas = { add_idea = poverty3 remove_idea = poverty4 }
	}
	else_if = {
		limit = { has_idea = poverty5 }
		swap_ideas = { add_idea = poverty4 remove_idea = poverty5 }
	}
	else_if = {
		limit = { has_idea = no_poverty }
		swap_ideas = { add_idea = poverty5 remove_idea = no_poverty }
	}
}

remove_poverty = {
	remove_ideas = poverty
	remove_ideas = poverty1
	remove_ideas = poverty2
	remove_ideas = poverty3
	remove_ideas = poverty4
	remove_ideas = poverty5
	add_ideas = no_poverty
}

increase_society_development_gradual = {
	if = {
		limit = { has_idea = communal_society }
		swap_ideas = { add_idea = agrarian_society remove_idea = communal_society }
	}
	else_if = {
		limit = { has_idea = tribal_society }
		swap_ideas = { add_idea = tribal_society2 remove_idea = tribal_society }
	}
	else_if = {
		limit = { has_idea = tribal_society2 }
		swap_ideas = { add_idea = tribal_society3 remove_idea = tribal_society2 }
	}
	else_if = {
		limit = { has_idea = tribal_society3 }
		swap_ideas = { add_idea = tribal_society4 remove_idea = tribal_society3 }
	}
	else_if = {
		limit = { has_idea = tribal_society4 }
		swap_ideas = { add_idea = agrarian_society remove_idea = tribal_society4 }
	}
	else_if = {
		limit = { has_idea = agrarian_society }
		swap_ideas = { add_idea = agrarian_society2 remove_idea = agrarian_society }
	}
	else_if = {
		limit = { has_idea = agrarian_society2 }
		swap_ideas = { add_idea = agrarian_society3 remove_idea = agrarian_society2 }
	}
	else_if = {
		limit = { has_idea = agrarian_society3 }
		swap_ideas = { add_idea = agrarian_society4 remove_idea = agrarian_society3 }
	}
	else_if = {
		limit = { has_idea = agrarian_society4 }
		swap_ideas = { add_idea = agrarian_society5 remove_idea = agrarian_society4 }
	}
	else_if = {
		limit = { has_idea = agrarian_society5 }
		swap_ideas = { add_idea = agrarian_society6 remove_idea = agrarian_society5 }
	}
	else_if = {
		limit = { has_idea = agrarian_society6 }
		swap_ideas = { add_idea = pre_industrial_society remove_idea = agrarian_society6 }
	}
	else_if = {
		limit = { has_idea = pre_industrial_society }
		swap_ideas = { add_idea = pre_industrial_society1 remove_idea = pre_industrial_society }

	}
	else_if = {
		limit = { has_idea = pre_industrial_society1 }
		swap_ideas = { add_idea = pre_industrial_society2 remove_idea = pre_industrial_society1 }

	}
	else_if = {
		limit = { has_idea = pre_industrial_society2 }
		swap_ideas = { add_idea = pre_industrial_society3 remove_idea = pre_industrial_society2 }

	}
	else_if = {
		limit = { has_idea = pre_industrial_society3 }
		swap_ideas = { add_idea = outdated_industry remove_idea = pre_industrial_society3 }

	}
	else_if = {
		limit = { has_idea = outdated_industry }
		swap_ideas = { add_idea = outdated_industry2 remove_idea = outdated_industry }
	}
	else_if = {
		limit = { has_idea = outdated_industry2 }
		swap_ideas = { add_idea = modern_society remove_idea = outdated_industry2 }
	}

}

increase_society_development = {
	if = {
		limit = { has_idea = communal_society }
		swap_ideas = { add_idea = agrarian_society remove_idea = communal_society }
	}
	else_if = {
		limit = { has_idea = tribal_society }
		swap_ideas = { add_idea = agrarian_society remove_idea = tribal_society }
	}
	else_if = {
		limit = { has_idea = tribal_society2 }
		swap_ideas = { add_idea = agrarian_society remove_idea = tribal_society2 }
	}
	else_if = {
		limit = { has_idea = tribal_society3 }
		swap_ideas = { add_idea = agrarian_society remove_idea = tribal_society3 }
	}
	else_if = {
		limit = { has_idea = tribal_society4 }
		swap_ideas = { add_idea = agrarian_society remove_idea = tribal_society4 }
	}
	else_if = {
		limit = { has_idea = agrarian_society }
		swap_ideas = { add_idea = pre_industrial_society remove_idea = agrarian_society }
	}
	else_if = {
		limit = { has_idea = agrarian_society2 }
		swap_ideas = { add_idea = pre_industrial_society remove_idea = agrarian_society2 }
	}
	else_if = {
		limit = { has_idea = agrarian_society3 }
		swap_ideas = { add_idea = pre_industrial_society remove_idea = agrarian_society3 }
	}
	else_if = {
		limit = { has_idea = agrarian_society4 }
		swap_ideas = { add_idea = pre_industrial_society remove_idea = agrarian_society4 }
	}
	else_if = {
		limit = { has_idea = agrarian_society5 }
		swap_ideas = { add_idea = pre_industrial_society remove_idea = agrarian_society5 }
	}
	else_if = {
		limit = { has_idea = agrarian_society6 }
		swap_ideas = { add_idea = pre_industrial_society remove_idea = agrarian_society6 }
	}
	else_if = {
		limit = { has_idea = pre_industrial_society }
		swap_ideas = { add_idea = outdated_industry remove_idea = pre_industrial_society }

	}
	else_if = {
		limit = { has_idea = pre_industrial_society1 }
		swap_ideas = { add_idea = outdated_industry remove_idea = pre_industrial_society1 }

	}
	else_if = {
		limit = { has_idea = pre_industrial_society2 }
		swap_ideas = { add_idea = outdated_industry remove_idea = pre_industrial_society2 }

	}
	else_if = {
		limit = { has_idea = pre_industrial_society3 }
		swap_ideas = { add_idea = outdated_industry remove_idea = pre_industrial_society3 }

	}
	else_if = {
		limit = { has_idea = outdated_industry }
		swap_ideas = { add_idea = modern_society remove_idea = outdated_industry }
	}
	else_if = {
		limit = { has_idea = outdated_industry2 }
		swap_ideas = { add_idea = modern_society remove_idea = outdated_industry2 }
	}

}
end_puppet_this = {
	if = {
		limit = { is_subject = yes }
		overlord = { end_puppet = PREV }
	}
}
improve_state_category = {
	if = {
		limit = {
			has_state_category = metropolis
		}
		set_state_category = megalopolis
	}
	else_if = {
		limit = {
			has_state_category = large_city
		}
		set_state_category = metropolis
	}
	else_if = {
		limit = {
			has_state_category = city
		}
		set_state_category = large_city
	}
	else_if = {
		limit = {
			has_state_category = large_town
		}
		set_state_category = city
	}
	else_if = {
		limit = {
			has_state_category = town
		}
		set_state_category = large_town
	}
	else_if = {
		limit = {
			has_state_category = rural
		}
		set_state_category = town
	}
	else_if = {
		limit = {
			has_state_category = pastoral
		}
		set_state_category = rural
	}
	else_if = {
		limit = {
			has_state_category = small_island
		}
		set_state_category = rural
	}
	else_if = {
		limit = {
			has_state_category = tiny_island
		}
		set_state_category = small_island
	}
	else_if = {
		limit = {
			has_state_category = enclave
		}
		set_state_category = pastoral
	}
	else_if = {
		limit = {
			has_state_category = wasteland
		}
		set_state_category = pastoral
	}
}
reduce_state_category = {
	
	if = {
		limit = {
			has_state_category = megalopolis
		}
		set_state_category = metropolis
	}
	else_if = {
		limit = {
			has_state_category = metropolis
		}
		set_state_category = large_city
	}
	else_if = {
		limit = {
			has_state_category = large_city
		}
		set_state_category = city
	}
	else_if = {
		limit = {
			has_state_category = city
		}
		set_state_category = large_town
	}
	else_if = {
		limit = {
			has_state_category = large_town
		}
		set_state_category = town
	}
	else_if = {
		limit = {
			has_state_category = town
		}
		set_state_category = rural
	}
	else_if = {
		limit = {
			has_state_category = rural
		}
		set_state_category = pastoral
	}
	else_if = {
		limit = {
			has_state_category = small_island
		}
		set_state_category = tiny_island
	}
	else_if = {
		limit = {
			has_state_category = pastoral
		}
		set_state_category = wasteland
	}
}

#PREV to THIS
transfer_race_ideas = {
	if = {
		limit = { PREV = { has_idea = pony_race } }
		add_ideas = pony_race
	}
	else_if = {
		limit = { PREV = { has_idea = changeling_race } }
		add_ideas = changeling_race
	}
	else_if = {
		limit = { PREV = { has_idea = deer_race } }
		add_ideas = deer_race
	}
	else_if = {
		limit = { PREV = { has_idea = griffon_race } }
		add_ideas = griffon_race
	}
	else_if = {
		limit = { PREV = { has_idea = diamond_dog_race } }
		add_ideas = diamond_dog_race
	}
	else_if = {
		limit = { PREV = { has_idea = zebra_race } }
		add_ideas = zebra_race
	}
	else = {
		add_ideas = generic_race_idea
	}
}

#PREV to THIS
transfer_society_ideas = {
	if = {
		limit = { PREV = { has_idea = outdated_industry } }
		add_ideas = outdated_industry
	}
	else_if = {
		limit = { PREV = { has_idea = pre_industrial_society } }
		add_ideas = pre_industrial_society
	}
	else_if = {
		limit = { PREV = { has_idea = agrarian_society } }
		add_ideas = agrarian_society

	}
	else_if = {
		limit = { PREV = { has_idea = tribal_society } }
		add_ideas = tribal_society

	}
	else_if = {
		limit = { PREV = { has_idea = detached_country } }
		add_ideas = detached_country

	}
	else_if = {
		limit = { PREV = { has_idea = agrarian_society2 } }
		add_ideas = agrarian_society2
	}
	else_if = {
		limit = { PREV = { has_idea = agrarian_society3 } }
		add_ideas = agrarian_society3
	}
	else_if = {
		limit = { PREV = { has_idea = agrarian_society4 } }
		add_ideas = agrarian_society4
	}
	else_if = {
		limit = { PREV = { has_idea = agrarian_society5 } }
		add_ideas = agrarian_society5
	}
	else_if = {
		limit = { PREV = { has_idea = agrarian_society6 } }
		add_ideas = agrarian_society6
	}
	else_if = {
		limit = { PREV = { has_idea = pre_industrial_society2 } }
		add_ideas = pre_industrial_society2

	}
	else_if = {
		limit = { PREV = { has_idea = pre_industrial_society3 } }
		add_ideas = pre_industrial_society3
	}
	else_if = {
		limit = { PREV = { has_idea = outdated_industry2 } }
		add_ideas = outdated_industry2
	}
}

#From PREV to THIS
transfer_science_ideas = {
	if = {
		limit = { PREV = { has_idea = poor_science_base } }
		add_ideas = poor_science_base
	}
	else_if = {
		limit = { PREV = { has_idea = better_science_base } }
		add_ideas = better_science_base
	}
	else_if = {
		limit = { PREV = { has_idea = big_science_base } }
		add_ideas = big_science_base
	}
}

transfer_poverty_ideas = {
	if = {
		limit = { PREV = { has_idea = no_poverty } }
		add_ideas = no_poverty
	}
	else_if = {
		limit = { PREV = { has_idea = FLO_poverty_virtue } }
		# intended
		add_ideas = no_poverty
	}
	else_if = {
		limit = { PREV = { has_idea = poverty5 } }
		add_ideas = poverty5
	}
	else_if = {
		limit = { PREV = { has_idea = poverty4 } }
		add_ideas = poverty4
	}
	else_if = {
		limit = { PREV = { has_idea = EQC_MARE_poverty } }
		# intended
		add_ideas = no_poverty
	}
	else_if = {
		limit = { PREV = { has_idea = poverty3 } }
		add_ideas = poverty3
	}
	else_if = {
		limit = { PREV = { has_idea = poverty2 } }
		add_ideas = poverty2
	}
	else_if = {
		limit = { PREV = { has_idea = poverty1 } }
		add_ideas = poverty1
	}
	else_if = {
		limit = { PREV = { has_idea = poverty } }
		add_ideas = poverty
	}
}

transfer_illiteracy_ideas = {
	if = {
		limit = { PREV = { has_idea = no_lack_of_scientists } }
		add_ideas = no_lack_of_scientists
	}
	else_if = {
		limit = { PREV = { has_idea = FLO_illiteracy_virtue } }
		# intended
		add_ideas = no_lack_of_scientists
	}
	else_if = {
		limit = { PREV = { has_idea = lack_of_scientists3 } }
		add_ideas = lack_of_scientists3
	}
	else_if = {
		limit = { PREV = { has_idea = JER_education_socialist } }
		# intended
		add_ideas = no_lack_of_scientists
	}
	else_if = {
		limit = { PREV = { has_idea = lack_of_scientists2 } }
		add_ideas = lack_of_scientists2
	}
	else_if = {
		limit = { PREV = { has_idea = lack_of_scientists1 } }
		add_ideas = lack_of_scientists1
	}
	else_if = {
		limit = { PREV = { has_idea = lack_of_scientists } }
		add_ideas = lack_of_scientists
	}
}

increase_science_base = {
	if = {
		limit = { has_idea = poor_science_base }
		swap_ideas = {
			add_idea = better_science_base
			remove_idea = poor_science_base
		}
	}
	else_if = {
		limit = { has_idea = better_science_base }
		swap_ideas = {
			add_idea = big_science_base
			remove_idea = better_science_base
		}
	}
	else_if = {
		limit = { has_idea = big_science_base }
		swap_ideas = {
			add_idea = proper_science_base
			remove_idea = big_science_base
		}
	}
}

# the following effects are excellent for preserving a puppet's government so it doesn't change to the overlord
# use the first command in the scope of the about-to-be-puppeted country right before the puppet command is executed
# and then the second, also in the scope of the puppet, right after
get_current_government_type = {
	clr_country_flag = was_neutral
	clr_country_flag = was_communist
	clr_country_flag = was_democratic
	clr_country_flag = was_fascist
	set_variable = { var = last_neutrality_pop value = party_popularity@neutrality }
	set_variable = { var = last_communism_pop value = party_popularity@communism }
	set_variable = { var = last_democratic_pop value = party_popularity@democratic }
	set_variable = { var = last_fascism_pop value = party_popularity@fascism }
	if = {
		limit = { has_government = neutrality }
		set_country_flag = was_neutral
	}
	else_if = {
		limit = { has_government = communism }
		set_country_flag = was_communist
	}
	else_if = {
		limit = { has_government = democratic }
		set_country_flag = was_democratic
	}
	else_if = {
		limit = { has_government = fascism }
		set_country_flag = was_fascist
	}
}

restore_previous_government_type = {
	hidden_effect = {
		subtract_from_variable = {
			var = last_neutrality_pop
			value = party_popularity@neutrality
		}
		add_popularity = {
			ideology = neutrality
			popularity = last_neutrality_pop
		}
		clear_variable = last_neutrality_pop
		subtract_from_variable = {
			var = last_communism_pop
			value = party_popularity@communism
		}
		add_popularity = {
			ideology = communism
			popularity = last_communism_pop
		}
		clear_variable = last_communism_pop
		subtract_from_variable = {
			var = last_democratic_pop
			value = party_popularity@democratic
		}
		add_popularity = {
			ideology = democratic
			popularity = last_democratic_pop
		}
		clear_variable = last_democratic_pop
		subtract_from_variable = {
			var = last_fascism_pop
			value = party_popularity@fascism
		}
		add_popularity = {
			ideology = fascism
			popularity = last_fascism_pop
		}
		clear_variable = last_fascism_pop
		if = {
			limit = { has_country_flag = was_neutral }
			set_politics = { ruling_party = neutrality }
		}
		else_if = {
			limit = { has_country_flag = was_communist }
			set_politics = { ruling_party = communism }
		}
		else_if = {
			limit = { has_country_flag = was_democratic }
			set_politics = { ruling_party = democratic }
		}
		else_if = {
			limit = { has_country_flag = was_fascist }
			set_politics = { ruling_party = fascism }
		}
	}
}

get_current_autonomy_level = {
	hidden_effect = {
		#Regular puppets
		clr_country_flag = former_integrated_puppet
		clr_country_flag = former_puppet
		clr_country_flag = former_colony
		clr_country_flag = former_dominion
		#Fascist puppets
		clr_country_flag = former_reichskommissariat
		clr_country_flag = former_reichsprotectorate
		clr_country_flag = former_satellite
		#Feudal puppets
		clr_country_flag = former_subjugated_vassal
		clr_country_flag = former_vassal
		clr_country_flag = former_autonomous_vassal
		clr_country_flag = former_nominal_vassal
		if = {
			limit = { has_autonomy_state = autonomy_integrated_puppet }
			set_country_flag = former_integrated_puppet
		}
		else_if = {
			limit = { has_autonomy_state = autonomy_puppet }
			set_country_flag = former_puppet
		}
		else_if = {
			limit = { has_autonomy_state = autonomy_colony }
			set_country_flag = former_colony
		}
		else_if = {
			limit = { has_autonomy_state = autonomy_dominion }
			set_country_flag = former_dominion
		}
		else_if = {
			limit = { has_autonomy_state = autonomy_reichskommissariat }
			set_country_flag = former_reichskommissariat
		}
		else_if = {
			limit = { has_autonomy_state = autonomy_reichsprotectorate }
			set_country_flag = former_reichsprotectorate
		}
		else_if = {
			limit = { has_autonomy_state = autonomy_satellite }
			set_country_flag = former_satellite
		}
		else_if = {
			limit = { has_autonomy_state = autonomy_subjugated_vassal }
			set_country_flag = former_subjugated_vassal
		}
		else_if = {
			limit = { has_autonomy_state = autonomy_vassal }
			set_country_flag = former_vassal
		}
		else_if = {
			limit = { has_autonomy_state = autonomy_autonomous_vassal }
			set_country_flag = former_autonomous_vassal
		}
		else_if = {
			limit = { has_autonomy_state = autonomy_nominal_vassal }
			set_country_flag = former_nominal_vassal
		}
		else_if = {
			limit = { has_autonomy_state = autonomy_supervised_state }
			set_country_flag = former_supervised_state
		}
	}
}

set_previous_autonomy_level = {
	hidden_effect = {
		if = {
			limit = { is_subject = yes OR = { has_dlc = "Together for Victory" has_dlc = "Death or Dishonor" } }
			if = {
				limit = {
					OR = {
						has_country_flag = former_integrated_puppet
						has_country_flag = former_reichskommissariat
						has_country_flag = former_subjugated_vassal
					}
				}
				overlord = {
					if = {
						limit = { autonomy_states_feudal = yes }
						set_autonomy = { target = PREV autonomy_state = autonomy_subjugated_vassal }
					}
					else_if = {
						limit = { autonomy_states_fascist = yes }
						set_autonomy = { target = PREV autonomy_state = autonomy_reichskommissariat }
					}
					else = {
						set_autonomy = { target = PREV autonomy_state = autonomy_integrated_puppet }
					}
				}
			}
			else_if = {
				limit = {
					OR = {
						has_country_flag = former_puppet
						has_country_flag = former_reichsprotectorate
						has_country_flag = former_vassal
					}
				}
				overlord = {
					if = {
						limit = {
							autonomy_states_feudal = yes
						}
						set_autonomy = { target = PREV autonomy_state = autonomy_vassal }
					}
					else_if = {
						limit = { autonomy_states_fascist = yes }
						set_autonomy = { target = PREV autonomy_state = autonomy_reichsprotectorate }
					}
					else = {
						set_autonomy = { target = PREV autonomy_state = autonomy_puppet }
					}
				}
			}
			else_if = {
				limit = {
					OR = {
						has_country_flag = former_colony
						has_country_flag = former_autonomous_vassal
					}
				}
				overlord = {
					if = {
						limit = {
							autonomy_states_feudal = yes
						}
						set_autonomy = { target = PREV autonomy_state = autonomy_autonomous_vassal }
					}
					else_if = {
						limit = { autonomy_states_fascist = yes }
						set_autonomy = { target = PREV autonomy_state = autonomy_reichsprotectorate }
					}
					else = {
						set_autonomy = { target = PREV autonomy_state = autonomy_colony }
					}
				}
			}
			else_if = {
				limit = {
					OR = {
						has_country_flag = former_dominion
						has_country_flag = former_satellite
						has_country_flag = former_nominal_vassal
					}
				}
				overlord = {
					if = {
						limit = {
							autonomy_states_feudal = yes
						}
						set_autonomy = { target = PREV autonomy_state = autonomy_nominal_vassal }
					}
					else_if = {
						limit = { autonomy_states_fascist = yes }
						set_autonomy = { target = PREV autonomy_state = autonomy_satellite }
					}
					else = {
						set_autonomy = { target = PREV autonomy_state = autonomy_dominion }
					}
				}
			}
			else_if = {
				limit = {
					has_country_flag = former_supervised_state
				}
				overlord = {
					set_autonomy = { target = PREV autonomy_state = autonomy_supervised_state }
				}
			}
		}
	}
}

get_current_autonomy_level_of_PREV = {
	hidden_effect = {
		#Regular puppets
		clr_country_flag = former_integrated_puppet
		clr_country_flag = former_puppet
		clr_country_flag = former_colony
		clr_country_flag = former_dominion
		#Fascist puppets
		clr_country_flag = former_reichskommissariat
		clr_country_flag = former_reichsprotectorate
		clr_country_flag = former_satellite
		#Feudal puppets
		clr_country_flag = former_subjugated_vassal
		clr_country_flag = former_vassal
		clr_country_flag = former_autonomous_vassal
		clr_country_flag = former_nominal_vassal
		#Other
		clr_country_flag = former_supervised_state
		if = {
			limit = { PREV = { has_autonomy_state = autonomy_integrated_puppet } }
			set_country_flag = former_integrated_puppet
		}
		else_if = {
			limit = { PREV = { has_autonomy_state = autonomy_puppet } }
			set_country_flag = former_puppet
		}
		else_if = {
			limit = { PREV = { has_autonomy_state = autonomy_colony } }
			set_country_flag = former_colony
		}
		else_if = {
			limit = { PREV = { has_autonomy_state = autonomy_dominion } }
			set_country_flag = former_dominion
		}
		else_if = {
			limit = { PREV = { has_autonomy_state = autonomy_reichskommissariat } }
			set_country_flag = former_reichskommissariat
		}
		else_if = {
			limit = { PREV = { has_autonomy_state = autonomy_reichsprotectorate } }
			set_country_flag = former_reichsprotectorate
		}
		else_if = {
			limit = { PREV = { has_autonomy_state = autonomy_satellite } }
			set_country_flag = former_satellite
		}
		else_if = {
			limit = { PREV = { has_autonomy_state = autonomy_subjugated_vassal } }
			set_country_flag = former_subjugated_vassal
		}
		else_if = {
			limit = { PREV = { has_autonomy_state = autonomy_vassal } }
			set_country_flag = former_vassal
		}
		else_if = {
			limit = { PREV = { has_autonomy_state = autonomy_autonomous_vassal } }
			set_country_flag = former_autonomous_vassal
		}
		else_if = {
			limit = { PREV = { has_autonomy_state = autonomy_nominal_vassal } }
			set_country_flag = former_nominal_vassal
		}
		else_if = {
			limit = { PREV = { has_autonomy_state = autonomy_supervised_state } }
			set_country_flag = former_supervised_state
		}
	}
}

Evil_unicorn_magic = {
	if = {
		limit = {
			PREV = {
				has_tech = tech_unicorn_th
			}
		}
		if = {
			limit = {
				has_government = fascism
			}
			set_technology = {
				popup = no
				tech_unicorn_ms = 1
				tech_unicorn_th = 0
			}
		}
		else = {
			set_technology = {
				popup = no
				tech_unicorn_th = 1
			}
		}
	}

	if = {
		limit = {
			PREV = {
				has_tech = tech_unicorn_th2
			}
		}
		if = {
			limit = {
				has_government = fascism
			}
			set_technology = {
				popup = no
				tech_unicorn_ms2 = 1
				tech_unicorn_th2 = 0
			}
		}
		else = {
			set_technology = {
				popup = no
				tech_unicorn_th2 = 1
			}
		}
	}

	if = {
		limit = {
			PREV = {
				has_tech = tech_unicorn_th3
			}
		}
		if = {
			limit = {
				has_government = fascism
			}
			set_technology = {
				popup = no
				tech_unicorn_ms3 = 1
				tech_unicorn_th3 = 0
			}
		}
		else = {
			set_technology = {
				popup = no
				tech_unicorn_th3 = 1
			}
		}
	}

	if = {
		limit = {
			PREV = {
				has_tech = tech_unicorn_th4
			}
		}
		if = {
			limit = {
				has_government = fascism
			}
			set_technology = {
				popup = no
				tech_unicorn_ms4 = 1
				tech_unicorn_th4 = 0
			}
		}
		else = {
			set_technology = {
				popup = no
				tech_unicorn_th4 = 1
			}
		}
	}

	if = {
		limit = {
			PREV = {
				has_tech = tech_unicorn_th5
			}
		}
		if = {
			limit = {
				has_government = fascism
			}
			set_technology = {
				popup = no
				tech_unicorn_ms5 = 1
				tech_unicorn_th5 = 0
			}
		}
		else = {
			set_technology = {
				popup = no
				tech_unicorn_th5 = 1
			}
		}
	}
}
increase_equestrian_trade = {
	if = {
		limit = { has_idea = BUF_equestrian_traders }
		swap_ideas = { add_idea = BUF_equestrian_traders2 remove_idea = BUF_equestrian_traders }
	}
	else_if = {
		limit = { has_idea = BUF_equestrian_traders2 }
		swap_ideas = { add_idea = BUF_equestrian_traders3 remove_idea = BUF_equestrian_traders2 }
	}
	else_if = {
		limit = { has_idea = BUF_equestrian_traders3 }
		swap_ideas = { add_idea = BUF_equestrian_traders4 remove_idea = BUF_equestrian_traders3 }
	}
	else_if = {
		limit = { has_idea = BUF_equestrian_traders4 }
		swap_ideas = { add_idea = BUF_equestrian_traders5 remove_idea = BUF_equestrian_traders4 }
	}
	else_if = {
		limit = { has_idea = BUF_equestrian_traders5 }
		swap_ideas = { add_idea = BUF_equestrian_traders6 remove_idea = BUF_equestrian_traders5 }
	}
	else_if = {
		limit = { has_idea = BUF_equestrian_traders6 }
		swap_ideas = { add_idea = BUF_equestrian_traders7 remove_idea = BUF_equestrian_traders6 }
	}
	else_if = {
		limit = { has_idea = BUF_equestrian_traders7 }
		swap_ideas = { add_idea = BUF_equestrian_traders8 remove_idea = BUF_equestrian_traders7 }
	}
	else_if = {
		limit = { has_idea = BUF_equestrian_traders8 }
		swap_ideas = { add_idea = BUF_equestrian_traders9 remove_idea = BUF_equestrian_traders8 }
	}
	else_if = {
		limit = { has_idea = BUF_equestrian_traders9 }
		swap_ideas = { add_idea = BUF_equestrian_traders10 remove_idea = BUF_equestrian_traders9 }
	}
	else_if = {
		limit = { has_idea = BUF_equestrian_traders10 }
		swap_ideas = { add_idea = BUF_equestrian_traders11 remove_idea = BUF_equestrian_traders10 }
	}
	else_if = {
		limit = { has_idea = BUF_equestrian_traders11 }
		swap_ideas = { add_idea = BUF_equestrian_traders12 remove_idea = BUF_equestrian_traders11 }
	}
	else_if = {
		limit = { has_idea = BUF_equestrian_traders12 }
		swap_ideas = { add_idea = BUF_equestrian_traders13 remove_idea = BUF_equestrian_traders12 }
	}
	else_if = {
		limit = { has_idea = BUF_equestrian_traders13 }
		swap_ideas = { add_idea = BUF_equestrian_traders14 remove_idea = BUF_equestrian_traders13 }
	}

}


modify_var_stg_construction_2 = {
	if = {
		limit = {
			OR = { has_food_shortages_STG = yes has_war = yes }
		}
		add_to_variable = { var = palace_construction value = 3 }
	}
	else_if = {
		limit = {
			has_war = no
			NOT = { has_food_shortages_STG = yes }
		}
		add_to_variable = { var = palace_construction value = 4 }
	}
	else_if = {
		limit = {
			has_war = no
			NOT = { has_food_shortages_STG = yes }
			NOT = { has_idea = incomplete_industrialization }
		}
		add_to_variable = { var = palace_construction value = 5 }
	}
}

GRF_recalc_mercs = {
	set_variable = { divs_as_mercs = 0 }
	if = {
		limit = { tag = GRF }
		every_other_country = {
			limit = {
				has_volunteers_amount_from = {
					tag = GRF
					count > 0
				}
			}
			if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 14
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 15 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 13
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 14 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 12
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 13 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 11
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 12 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 10
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 11 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 9
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 10 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 8
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 9 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 7
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 8 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 6
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 7 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 5
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 6 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 4
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 5 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 3
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 4 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 2
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 3 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = GRF
						count > 1
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 2 }
			}
			else = {
				add_to_variable = { ROOT.divs_as_mercs = 1 }
			}
		}
	}
	else = {
		every_other_country = {
			limit = {
				has_volunteers_amount_from = {
					tag = TRD
					count > 0
				}
			}
			if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 14
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 15 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 13
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 14 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 12
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 13 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 11
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 12 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 10
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 11 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 9
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 10 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 8
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 9 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 7
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 8 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 6
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 7 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 5
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 6 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 4
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 5 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 3
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 4 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 2
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 3 }
			}
			else_if = {
				limit = {
					has_volunteers_amount_from = {
						tag = TRD
						count > 1
					}
				}
				add_to_variable = { ROOT.divs_as_mercs = 2 }
			}
			else = {
				add_to_variable = { ROOT.divs_as_mercs = 1 }
			}
		}
	}
	set_variable = { volunteers_factor = num_divisions }
	divide_variable = { volunteers_factor = divs_as_mercs }
	#clear_variable = divs_as_mercs
}
lushi_remove_unemployment = {
	if = {
		limit = { has_idea = LUS_unemployment }
		swap_ideas = { add_idea = LUS_unemployment_2 remove_idea = LUS_unemployment }
	}
	else_if = {
		limit = { has_idea = LUS_unemployment_2 }
		swap_ideas = { add_idea = LUS_unemployment_3 remove_idea = LUS_unemployment_2 }
	}
	else_if = {
		limit = { has_idea = LUS_unemployment_3 }
		swap_ideas = { add_idea = LUS_unemployment_4 remove_idea = LUS_unemployment_3 }
	}
	else_if = {
		limit = { has_idea = LUS_unemployment_4 }
		remove_ideas = LUS_unemployment_4
	}
}
increase_society_development_with_tt = {
	custom_effect_tooltip = increase_society_development_tt
	hidden_effect = {
		increase_society_development = yes
	}
}
increase_society_development_gradually_with_tt = {
	custom_effect_tooltip = increase_society_development_gradual_tt
	hidden_effect = {
		increase_society_development_gradual = yes
	}
}

NCH_get_trading_idea = {
	hidden_effect = {
		remove_ideas = {
			NCH_trade_1
			NCH_trade_2
			NCH_trade_3
			NCH_trade_4
		}
	}
	if = {
		limit = {
			check_variable = { NCH_trade_partners_iter = 1 }
		}
		add_ideas = NCH_trade_1
	}
	else_if = {
		limit = {
			check_variable = { NCH_trade_partners_iter = 2 }
		}
		add_ideas = NCH_trade_2
	}
	else_if = {
		limit = {
			check_variable = { NCH_trade_partners_iter = 3 }
		}
		add_ideas = NCH_trade_3
	}
	else_if = {
		limit = {
			check_variable = { NCH_trade_partners_iter > 3 }
		}
		add_ideas = NCH_trade_4
	}
}

NCH_set_trade_in_partner = {
	remove_ideas = {
		NCH_trading_with_NCH_fascist
		NCH_trading_with_NCH_harmonic
	}
	remove_opinion_modifier = {
		modifier = NCH_negative_trading target = NCH
	}
	remove_opinion_modifier = {
		modifier = trading target = NCH
	}
	if = {
		limit = {
			NCH = {
				has_government = fascism
			}
		}
		add_ideas = NCH_trading_with_NCH_fascist
		add_opinion_modifier = { modifier = NCH_negative_trading target = NCH }

	}
	else = {
		add_ideas = NCH_trading_with_NCH_harmonic
		add_opinion_modifier = { modifier = trading target = NCH }
	}
	NCH = {
		add_to_variable = {
			var = NCH_trade_partners_iter
			value = 1
		}
		NCH_get_trading_idea = yes
	}
}

#call save_current_manpower = yes before removing manpower from states, call restore_previous_manpower = yes immediately after

#THIS is country, controller of the state
save_current_manpower = {
	hidden_effect = {
		set_variable = { previous_country_manpower_se = manpower_k }
	}
}

#THIS is country, controller of the state
restore_previous_manpower = {
	hidden_effect = {
		#yes we gotta call it 3 times, don't ask why
		country_event = utility.9
		country_event = utility.9
		country_event = utility.9
	}
}

restore_previous_manpower_function = {
	hidden_effect = {
		if = {
			limit = { has_variable = previous_country_manpower_se }
			set_variable = { current_country_manpower_se = manpower_k }
			#log = "previous_country_manpower_se: [?previous_country_manpower_se] current_country_manpower_se: [?current_country_manpower_se]"
			subtract_from_variable = { current_country_manpower_se = previous_country_manpower_se }
			#log = "difference: [?current_country_manpower_se]"
			while_loop_effect = {
				limit = { check_variable = { current_country_manpower_se > 99 } }
				subtract_from_variable = { current_country_manpower_se = 100 }
				add_manpower = -100000
				#log = "add -100000 manpower"
			}
			multiply_variable = { current_country_manpower_se = 1000 }
			round_variable = current_country_manpower_se
			multiply_variable = { current_country_manpower_se = -1 }
			#log = "add [?current_country_manpower_se] manpower"
			add_manpower = current_country_manpower_se
			#log = "current manpower [?manpower_k]"
			clear_variable = current_country_manpower_se
			#clear_variable = previous_country_manpower_se
		}
	}
}


fix_weapon_techs = {
	hidden_effect = {
		actually_fix_weapon_techs = yes
		country_event = eaw_debug.1
		set_country_flag = { flag = recently_fixed_weapons days = 1 value = 1 }
	}
}

daily_fix_weapon_techs = {
	if = {
		limit = { 
			NOT = { has_country_flag = daily_fix_weapon_techs_done } 
			check_variable = { num_owned_states > 0 }
		}
		actually_fix_weapon_techs = yes
		set_country_flag = daily_fix_weapon_techs_done
	}
}

actually_fix_weapon_techs = {
	hidden_effect = {
		set_country_flag = weapons_fixed_at_start
		log = "[GetDateText]: THIS: [This.GetName] fix_weapon_techs"
		set_technology = {
			popup = no
			infantry_weapons_infiltrator_company = 0
			magical_weapons_infiltrator_company = 0
			infantry_weapons_unicorn_company = 0
			magical_weapons_unicorn_company = 0
			infantry_weapons_military_police = 0
			magical_weapons_military_police = 0
			magical_weapons_marine = 0
			infantry_weapons_marine = 0
			magical_weapons_mountaineers = 0
			infantry_weapons_mountaineers = 0
			magical_weapons_paratrooper = 0
			infantry_weapons_paratrooper = 0
			magical_weapons_jager = 0
			infantry_weapons_jager = 0
			magical_weapons_pegasi = 0
			infantry_weapons_pegasi = 0
			magical_weapons_ironpaws = 0
			infantry_weapons_ironpaws = 0
			magical_weapons_amphibious_mechanized = 0
			infantry_weapons_amphibious_mechanized = 0
			infantry_weapons_spirit_warriors = 0
			magical_weapons_spirit_warriors = 0
		}
		if = {
			limit = {
				NOT = { has_tech = magical_weapons }
			}
			log = "[GetDateText]: THIS: [This.GetName] [?this.GetTag] fix_weapon_techs: doesn't have magical weapons"
			clr_country_flag = special_forces_magical_weapons
			if = {
				limit = { 
					OR = {
						has_tech = tech_infiltrators
						has_template_containing_unit = infiltrator_company
					}
				}
				set_technology = { popup = no infantry_weapons_infiltrator_company = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = tech_unicorn
						has_tech = tech_horse_unicorn
						has_template_containing_unit = unicorn_company
					}
				}
				set_technology = { popup = no infantry_weapons_unicorn_company = 1 }
			}

			if = {
				limit = {
					OR = {
						has_tech = tech_military_police
						has_template_containing_unit = military_police
					}
				}
				set_technology = { popup = no infantry_weapons_military_police = 1 }
			}
		}
		else = {
			log = "[GetDateText]: THIS: [This.GetName] [?this.GetTag] fix_weapon_techs: has magical weapons"
			if = {
				limit = {
					OR = {
						has_tech = tech_infiltrators
						has_template_containing_unit = infiltrator_company
					}
				}
				set_technology = { popup = no magical_weapons_infiltrator_company = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = tech_unicorn
						has_tech = tech_horse_unicorn
						has_template_containing_unit = unicorn_company
					}
				}
				set_technology = { popup = no magical_weapons_unicorn_company = 1 }
			}
			
			if = {
				limit = {
					OR = {
						has_tech = tech_military_police
						has_template_containing_unit = military_police
					}
				}
				set_technology = { popup = no magical_weapons_military_police = 1 }
			}
		}
		if = {
			limit = { has_country_flag = special_forces_magical_weapons }
			log = "[GetDateText]: THIS: [This.GetName] [?this.GetTag] fix_weapon_techs: set magical weapons for special forces"
			if = {
				limit = {
					OR = {
						has_tech = marines
						has_template_containing_unit = marine
					}
				}
				set_technology = { popup = no magical_weapons_marine = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = tech_mountaineers
						has_template_containing_unit = mountaineers
					}
				}
				set_technology = { popup = no magical_weapons_mountaineers = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = paratroopers
						has_template_containing_unit = paratrooper
					}
				}
				set_technology = { popup = no magical_weapons_paratrooper = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = tech_jager
						has_template_containing_unit = jager
					}
				}
				set_technology = { popup = no magical_weapons_jager = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = tech_pegasi
						has_template_containing_unit = pegasi
					}
				}
				set_technology = { popup = no magical_weapons_pegasi = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = tech_ironpaws
						has_template_containing_unit = ironpaws
					}
				}
				set_technology = { popup = no magical_weapons_ironpaws = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = amphibious_mechanized_infantry
						has_template_containing_unit = amphibious_mechanized
					}
				}
				set_technology = { popup = no magical_weapons_amphibious_mechanized = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = tech_spirit_warriors
						has_template_containing_unit = spirit_warriors
					}
				}
				set_technology = { popup = no magical_weapons_spirit_warriors = 1 }
			}
		}
		else = {
			log = "[GetDateText]: THIS: [This.GetName] [?this.GetTag] fix_weapon_techs: set infantry weapons for special forces"
			if = {
				limit = {
					OR = {
						has_tech = marines
						has_template_containing_unit = marine
					}
				}
				set_technology = { popup = no infantry_weapons_marine = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = tech_mountaineers
						has_template_containing_unit = mountaineers
					}
				}
				set_technology = { popup = no infantry_weapons_mountaineers = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = paratroopers
						has_template_containing_unit = paratrooper
					}
				}
				set_technology = { popup = no infantry_weapons_paratrooper = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = tech_jager
						has_template_containing_unit = jager
					}
				}
				set_technology = { popup = no infantry_weapons_jager = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = tech_pegasi
						has_template_containing_unit = pegasi
					}
				}
				set_technology = { popup = no infantry_weapons_pegasi = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = tech_ironpaws
						has_template_containing_unit = ironpaws
					}
				}
				set_technology = { popup = no infantry_weapons_ironpaws = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = amphibious_mechanized_infantry
						has_template_containing_unit = amphibious_mechanized
					}
				}
				set_technology = { popup = no infantry_weapons_amphibious_mechanized = 1 }
			}
			if = {
				limit = {
					OR = {
						has_tech = tech_spirit_warriors
						has_template_containing_unit = spirit_warriors
					}
				}
				set_technology = { popup = no infantry_weapons_spirit_warriors = 1 }
			}
		}

		if = {
			limit = {
				OR = {
					has_tech = tech_knights
					has_template_containing_unit = knights
				}
			}
			set_technology = {
				popup = no
				magical_weapons_knights = 0
				infantry_weapons_knights = 0
			}
			if = {
				limit = { 
					OR = {
						has_tech = tech_knights_magical
						AND = {
							has_griffon_race_tech = no
							has_country_flag = special_forces_magical_weapons
						}
					}
				}
				set_technology = { popup = no magical_weapons_knights = 1 }
			}
			else = {
				set_technology = { popup = no infantry_weapons_knights = 1 }
			}
		}
   }
}
  
FRN_anger_fascists = {
	custom_effect_tooltip = FRN_anger_fascists_tt
	if = {
		limit = { has_idea = FRN_fascists_0 }
		swap_ideas = { add_idea = FRN_fascists_1 remove_idea = FRN_fascists_0 }
	}
	else_if = {
		limit = { has_idea = FRN_fascists_1 }
		swap_ideas = { add_idea = FRN_fascists_2 remove_idea = FRN_fascists_1 }
	}
	else_if = {
		limit = { has_idea = FRN_fascists_2 }
		swap_ideas = { add_idea = FRN_fascists_3 remove_idea = FRN_fascists_2 }
	}
	else_if = {
		limit = { has_idea = FRN_fascists_3 }
		swap_ideas = { add_idea = FRN_fascists_4 remove_idea = FRN_fascists_3 }
	}
	else_if = {
		limit = { has_idea = FRN_fascists_4 }
		add_stability = -0.1
		add_war_support = -0.1
		add_political_power = -50
	}
}
FRN_please_fascists = {
	custom_effect_tooltip = FRN_please_fascists_tt
	if = {
		limit = { has_idea = FRN_fascists_4 }
		swap_ideas = { add_idea = FRN_fascists_3 remove_idea = FRN_fascists_4 }
	}
	else_if = {
		limit = { has_idea = FRN_fascists_3 }
		swap_ideas = { add_idea = FRN_fascists_2 remove_idea = FRN_fascists_3 }
	}
	else_if = {
		limit = { has_idea = FRN_fascists_2 }
		swap_ideas = { add_idea = FRN_fascists_1 remove_idea = FRN_fascists_2 }
	}
	else_if = {
		limit = { has_idea = FRN_fascists_1 }
		swap_ideas = { add_idea = FRN_fascists_0 remove_idea = FRN_fascists_1 }
	}
	else_if = {
		limit = { has_idea = FRN_fascists_0 }
		add_stability = 0.05
		add_war_support = 0.05
		add_political_power = 25
	}
}
FRN_anger_baguettes = {
	custom_effect_tooltip = FRN_anger_baguettes_tt
	if = {
		limit = {
			owns_state = 487
		}
		487 = {
			add_compliance = -5
		}
	}
	if = {
		limit = {
			owns_state = 652
		}
		652 = {
			add_compliance = -5
		}
	}
	if = {
		limit = {
			owns_state = 521
		}
		521 = {
			add_compliance = -5
		}
	}
	if = {
		limit = { has_idea = FRN_baguettes_0 }
		swap_ideas = { add_idea = FRN_baguettes_1 remove_idea = FRN_baguettes_0 }
		set_variable = { FRN_tarrin_resistance_variable = 0.15 }
	}
	else_if = {
		limit = { has_idea = FRN_baguettes_1 }
		swap_ideas = { add_idea = FRN_baguettes_2 remove_idea = FRN_baguettes_1 }
		set_variable = { FRN_tarrin_resistance_variable = 0.25 }
	}
	else_if = {
		limit = { has_idea = FRN_baguettes_2 }
		swap_ideas = { add_idea = FRN_baguettes_3 remove_idea = FRN_baguettes_2 }
		set_variable = { FRN_tarrin_resistance_variable = 0.40 }
	}
	else_if = {
		limit = { has_idea = FRN_baguettes_3 }
		swap_ideas = { add_idea = FRN_baguettes_4 remove_idea = FRN_baguettes_3 }
		set_variable = { FRN_tarrin_resistance_variable = 0.60 }
	}
	else_if = {
		limit = { has_idea = FRN_baguettes_4 }
		add_stability = -0.1
		add_war_support = -0.1
		add_political_power = -50
	}
}
FRN_please_baguettes = {
	custom_effect_tooltip = FRN_please_baguettes_tt
	if = {
		limit = { has_idea = FRN_baguettes_4 }
		swap_ideas = { add_idea = FRN_baguettes_3 remove_idea = FRN_baguettes_4 }
		set_variable = { FRN_tarrin_resistance_variable = 0.40 }
	}
	else_if = {
		limit = { has_idea = FRN_baguettes_3 }
		swap_ideas = { add_idea = FRN_baguettes_2 remove_idea = FRN_baguettes_3 }
		set_variable = { FRN_tarrin_resistance_variable = 0.25 }
	}
	else_if = {
		limit = { has_idea = FRN_baguettes_2 }
		swap_ideas = { add_idea = FRN_baguettes_1 remove_idea = FRN_baguettes_2 }
		set_variable = { FRN_tarrin_resistance_variable = 0.15 }
	}
	else_if = {
		limit = { has_idea = FRN_baguettes_1 }
		swap_ideas = { add_idea = FRN_baguettes_0 remove_idea = FRN_baguettes_1 }
		set_variable = { FRN_tarrin_resistance_variable = 0 }
	}
	else_if = {
		limit = { has_idea = FRN_baguettes_0 }
		add_stability = 0.05
		add_war_support = 0.05
		add_political_power = 25
	}
}

FEA_gradually_remove_ruined_economy = {
	if = {
		limit = { has_idea = FEA_ruined_economy }
		swap_ideas = {
			remove_idea = FEA_ruined_economy
			add_idea = FEA_ruined_economy_1
		}
	}
	else_if = {
		limit = { has_idea = FEA_ruined_economy_1 }
		swap_ideas = {
			remove_idea = FEA_ruined_economy_1
			add_idea = FEA_ruined_economy_2
		}
	}
	else_if = {
		limit = { has_idea = FEA_ruined_economy_2 }
		swap_ideas = {
			remove_idea = FEA_ruined_economy_2
			add_idea = FEA_ruined_economy_3
		}
	}
	else_if = {
		limit = { has_idea = FEA_ruined_economy_3 }
		remove_ideas = FEA_ruined_economy_3
	}
}

decrease_storm_king = {
	if = {
		limit = { has_idea = zebrica_legacy_of_storm1 }
		swap_ideas = {
			remove_idea = zebrica_legacy_of_storm1
			add_idea = zebrica_legacy_of_storm2
		}
	}
	else_if = {
		limit = { has_idea = zebrica_legacy_of_storm2 }
		swap_ideas = {
			remove_idea = zebrica_legacy_of_storm2
			add_idea = zebrica_legacy_of_storm3
		}
	}
	else_if = {
		limit = { has_idea = zebrica_legacy_of_storm3 }
		remove_ideas = zebrica_legacy_of_storm3
	}
}

remove_storm_king = {
	remove_ideas = zebrica_legacy_of_storm1
	remove_ideas = zebrica_legacy_of_storm2
	remove_ideas = zebrica_legacy_of_storm3
}

FAT_kill_kemerskai = {
	every_possible_country = {
		limit = {
			has_character = FAT_alexander_kemerskai
		}
		FAT_alexander_kemerskai = {
			retire = yes
		}
	}
	set_global_flag = keremeskai_dead
}

# remove disband_fraction land units, keeping manpower and equipment
# expects disband_fraction variable to be set
disband_units_fraction = {
	log = "disband_units_fraction: [This.GetName] is disbanding [?disband_fraction] of their army"
	SOL = { 
		set_temp_variable = {
			old_manpower = manpower_k
		}
	}
	random_state = {
		limit = {
			is_coastal = no
			owner = {
				PREV = {
					is_fully_controlled_by = PREV
				}
			}
		}
		owner = { save_event_target_as = disband_state_owner }
		save_event_target_as = disband_state
		SOL = { set_state_owner = PREV }
	}
	transfer_units_fraction = {
		target = SOL
		size = 0
		target_organization = 1
		source_organization = 1
		army_ratio = var:disband_fraction
		keep_unit_leaders_trigger = {
			always = yes
		}
	}
	SOL = {
		every_state = {
			SOL = {
				delete_unit = { 
					state = PREV
					disband = yes
				}
			}
		}
		set_temp_variable = {
			manpower_diff = manpower_k
		}
		subtract_from_temp_variable = {
			manpower_diff = old_manpower
		}
		while_loop_effect = { #avoid overflows
			limit = { check_variable = { manpower_diff > 1 } }
			subtract_from_temp_variable = { manpower_diff = 1 }
			ROOT = { add_manpower = 1000 }
			add_manpower = -1000
		}
		multiply_temp_variable = {
			manpower_diff = 1000
		}
		ROOT = { add_manpower = PREV.manpower_diff }
		multiply_temp_variable = {
			manpower_diff = -1
		}
		add_manpower = manpower_diff
		transfer_units_fraction = {
			target = ROOT
			size = 0
			target_organization = 1
			source_organization = 1
			stockpile_ratio = 1
			keep_unit_leaders_trigger = {
				always = yes
			}
		}
	}
	event_target:disband_state = {
		event_target:disband_state_owner = { set_state_owner = PREV }
	}
	annex_country = {
		target = SOL transfer_troops = yes
	}
}

# Count Inflicted Casualties effect by Yard1
# Hopefully paradox will bless us with just a variable for that
# put this in on_daily - I'd limit it to only countries that actually make use of it, as it can be a bit performance intensive - though it's not as terrible as it looks
# inflicted_casualties - all inflicted casualties
# inflicted_casualties_on_@TAG - inflicted casualties on original tag, eg. inflicted_casualties_on_GER
count_inflicted_casualties_on_current_enemies = {
	set_temp_variable = { effect_root = THIS }
	every_enemy_country = {
		limit = {
			var:original_tag = {
				OR = {
					NOT = { has_variable = effect_root:current_inflicted_casualties_on_@THIS }
					casualties_inflicted_by = {
						opponent = var:effect_root
						thousands > effect_root:current_inflicted_casualties_on_@THIS
					}
				}
			}
		}
		clear_array = effect_root:digits
		resize_array = {
			array = effect_root:digits
			size = 9
		}
		for_each_loop = {
			array = effect_root:digits
			index = i
			value = v
			break = b
			for_loop_effect = {
				start = 0
				end = 10
				value = j
				set_variable = { effect_root:digits^i = j }
				meta_effect = {
					text = {
						set_temp_variable = {
							inflicted_casualties_temp = [DIGIT0][DIGIT1][DIGIT2][DIGIT3][DIGIT4][DIGIT5].[DIGIT6][DIGIT7][DIGIT8]
						}
					}
					DIGIT0 = "[?effect_root:digits^0|0]"
					DIGIT1 = "[?effect_root:digits^1|0]"
					DIGIT2 = "[?effect_root:digits^2|0]"
					DIGIT3 = "[?effect_root:digits^3|0]"
					DIGIT4 = "[?effect_root:digits^4|0]"
					DIGIT5 = "[?effect_root:digits^5|0]"
					DIGIT6 = "[?effect_root:digits^6|0]"
					DIGIT7 = "[?effect_root:digits^7|0]"
					DIGIT8 = "[?effect_root:digits^8|0]"
				}
				if = {
					limit = {
						casualties_inflicted_by = {
							opponent = PREV
							thousands < inflicted_casualties_temp
						}
					}
					subtract_from_variable = { effect_root:digits^i = 1 }
					set_temp_variable = { break = 1 }
				}
			}
		}
		subtract_from_temp_variable = { inflicted_casualties_temp = 0.001 }
		set_temp_variable = { inflicted_casualties_diff = inflicted_casualties_temp }
		var:original_tag = {
			subtract_from_temp_variable = { inflicted_casualties_diff = effect_root:current_inflicted_casualties_on_@THIS }
			add_to_variable = { effect_root:inflicted_casualties = inflicted_casualties_diff }
			add_to_variable = { effect_root:current_inflicted_casualties_on_@THIS = inflicted_casualties_diff }
			add_to_variable = { effect_root:inflicted_casualties_on_@THIS = inflicted_casualties_diff }
		}
	}
	clear_array = digits
}

# put this in on_peace
clear_current_inflicted_casualties = {
	for_each_scope_loop = {
		array = global.countries
		if = {
			limit = {
				NOT = { has_war_with = PREV }
			}
			clear_variable = PREV.current_inflicted_casualties_on_@THIS
			clear_variable = current_inflicted_casualties_on_@PREV
		}
	}
}

grant_claims_and_wargoals_on_core_states_of_PREV = {
    custom_effect_tooltip = EaW_wargoal_and_claims_tp
	for_each_loop = {
		array = PREV.core_states
		if = {
			limit = {
				var:v:owner = {
					NOT = { tag = PREV }
				}
			}
			add_state_claim = var:v
			create_wargoal = {
				type = take_claimed_state
				target = var:v:owner
			}
		}
	}
}

grant_claims_and_declare_war_on_core_states_of_PREV = {
    custom_effect_tooltip = EaW_war_and_claims_tp
	for_each_loop = {
		array = PREV.core_states
		if = {
			limit = {
				var:v:owner = {
					NOT = { tag = PREV }
				}
			}
			add_state_claim = var:v
			create_wargoal = {
				type = take_claimed_state
				target = var:v:owner
			}
			if = {
				limit = {
					var:v:owner = {
						NOT = {
							has_war_with = PREV
							is_in_faction_with = PREV
							is_subject_of = PREV
						}
					}
				}
				declare_war_on = {
					type = take_claimed_state
					target = var:v:owner
				}
			}
		}
	}
}

wargoals_on_core_states_of_PREV = {
    custom_effect_tooltip = EaW_wargoal_tp
	for_each_loop = {
		array = PREV.core_states
		if = {
			limit = {
				var:v:owner = {
					NOT = { tag = PREV }
				}
			}
			create_wargoal = {
				type = annex_everything
				target = var:v:owner
			}
		}
	}
}

declare_war_on_core_states_of_PREV = {
    custom_effect_tooltip = EaW_war_tp
	for_each_loop = {
		array = PREV.core_states
		if = {
			limit = {
				var:v:owner = {
					NOT = { tag = PREV }
				}
			}
			create_wargoal = {
				type = annex_everything
				target = var:v:owner
			}
			if = {
				limit = {
					var:v:owner = {
						NOT = {
							has_war_with = PREV
							is_in_faction_with = PREV
							is_subject_of = PREV
						}
					}
				}
				declare_war_on = {
					type = annex_everything
					target = var:v:owner
				}
			}
		}
	}
}

make_hate_DED_and_EWI = {
	if = {
		limit = {
			NOT = {
				original_tag = DED
				original_tag = EWI
				has_country_flag = FIR_is_necromancer
			}
		}
		add_opinion_modifier = { target = DED modifier = mortal_enemies }
		add_opinion_modifier = { target = DED modifier = embargo }
		add_opinion_modifier = { target = DED modifier = CHN_Embargo }
		reverse_add_opinion_modifier = { target = DED modifier = mortal_enemies }
		reverse_add_opinion_modifier = { target = DED modifier = embargo }
		reverse_add_opinion_modifier = { target = DED modifier = CHN_Embargo }
		add_opinion_modifier = { target = EWI modifier = mortal_enemies }
		add_opinion_modifier = { target = EWI modifier = embargo }
		add_opinion_modifier = { target = EWI modifier = CHN_Embargo }
		reverse_add_opinion_modifier = { target = EWI modifier = mortal_enemies }
		reverse_add_opinion_modifier = { target = EWI modifier = embargo }
		reverse_add_opinion_modifier = { target = EWI modifier = CHN_Embargo }
	}
}

set_AI_strategies = {
	make_hate_DED_and_EWI = yes
	set_ignore_AI_strategies = yes
}

set_AI_strategies_on_every_possible_country = {
	every_possible_country = {
		set_AI_strategies = yes
	}
}

set_AI_strategies_on_every_possible_country_delayed = {
	country_event = { id = generic.26 hours = 1 }
}
### Race tech removal effects

changeling_tech_removal = {
	set_technology = {
		tech_changeling_a = 0
		tech_changeling_a2 = 0
		tech_changeling_a3 = 0
		tech_changeling_b = 0
		tech_changeling_b2 = 0
		tech_changeling_b3 = 0
		tech_changeling_c = 0
		tech_changeling_c2 = 0
		tech_changeling_c3 = 0
		tech_infiltrators_di = 0
		tech_infiltrators_di2 = 0
		tech_infiltrators_di3 = 0
		tech_infiltrators_di4 = 0
		tech_infiltrators_si = 0
		tech_infiltrators_si2 = 0
		tech_infiltrators_si3 = 0
		tech_infiltrators_si4 = 0
		tech_infiltrators_di_lar = 0
		tech_infiltrators_di2_lar = 0
		tech_infiltrators_di3_lar = 0
		tech_infiltrators_di4_lar = 0
		tech_infiltrators_si_lar = 0
		tech_infiltrators_si2_lar = 0
		tech_infiltrators_si3_lar = 0
		tech_infiltrators_si4_lar = 0
	}
}

pony_tech_removal = {
	set_technology = {
		tech_pony_misc = 0
		tech_pony_misc3 = 0
		tech_pony_misc_a = 0
		tech_pony_misc_a2 = 0
		tech_pony_misc2 = 0
		tech_pony_misc_b = 0
		tech_pony_misc_c = 0
		tech_pony_misc_c2 = 0
		tech_pegasi = 0
		tech_pegasi2 = 0
		tech_pegasi3 = 0
		tech_pegasi_a = 0
		tech_pegasi_b = 0
		tech_pegasi_c = 0
		tech_unicorn = 0
		tech_unicorn_th = 0
		tech_unicorn_th2 = 0
		tech_unicorn_th3 = 0
		tech_unicorn_th4 = 0
		tech_unicorn_th5 = 0
		tech_unicorn_ms = 0
		tech_unicorn_ms2 = 0
		tech_unicorn_ms3 = 0
		tech_unicorn_ms4 = 0
		tech_unicorn_ms5 = 0
		tech_pony_magical_infantry = 0
		tech_pony_magical_infantry2 = 0
		tech_pony_magical_infantry3 = 0
		tech_pony_magical_infantry4 = 0
		tech_pony_magical_infantry5 = 0
		tech_pony_unicorns = 0
		tech_pony_unicorns2 = 0
		tech_pony_unicorns3 = 0
		tech_pony_unicorns4 = 0
		tech_pony_unicorns5 = 0
	}
}

set_continent_flags_on_every_possible_country = {
	every_possible_country = {
		set_global_flag = continent_flags_set
		if = {
			limit = { is_griffon_continent_country_tag = yes }
			set_country_flag = griffon_continent_country
		}
		if = {
			limit = { is_griffon_continent_griffon_country_tag = yes }
			set_country_flag = griffon_continent_griffon_country
		}
		if = {
			limit = { is_feudal_vassal_tag = yes }
			set_country_flag = feudal_vassal_country
		}
		if = {
			limit = { is_zebrican_continent_country_tag = yes }
			set_country_flag = zebrican_continent_country
		}
		if = {
			limit = { is_zebrican_zebra_country_tag = yes }
			set_country_flag = zebrican_continent_zebra_country
		}
		if = {
			limit = { is_riverlands_country_tag = yes }
			set_country_flag = riverlands_country
		}
		if = {
			limit = { is_original_riv_fed_country_tag = yes }
			set_country_flag = original_riv_fed_country
		}
		if = {
			limit = { is_griffon_empire_country_tag = yes }
			set_country_flag = griffon_empire_country
		}
		if = {
			limit = { is_underdeveloped_country_tag = yes }
			set_country_flag = underdeveloped_country
		}
		if = {
			limit = { is_eqs_civil_war_tag_tag = yes }
			set_country_flag = eqs_civil_war_tag
		}
	}
}

# Not perfect, but gets the job done
build_air_base = {
	set_temp_variable = { built_airport = 0 }
	if = {
		limit = {
			is_ai = yes
			num_of_civilian_factories_available_for_projects > 9
			has_deployed_air_force_size = {
				size > 0
			}
		}
		set_temp_variable = { air_capacity = 0 }
		if = {
			limit = {
				has_war = yes
				any_enemy_country = {
					is_neighbor_of = ROOT
				}
			}
			set_temp_variable = { has_neighbor_war = 1 }
		}
		else_if = {
			limit = {
				has_war = no
				any_neighbor_country = {
					is_in_array = {
						ROOT.potential_and_current_enemies = THIS
					}
				}
			}
			set_temp_variable = { has_neighbor_enemy = 1 }
		}
		every_controlled_state = {
			limit = {
				if = {
					limit = {
						ROOT = {
							check_variable = { has_neighbor_war > 0 }
						}
					}
					any_neighbor_state = {
						OR = {
							controller = { has_war_with = ROOT }
							any_neighbor_state = {
								controller = { has_war_with = ROOT }
							}
						}
					}
				}
				else_if = {
					limit = {
						ROOT = {
							check_variable = { has_neighbor_enemy > 0 }
						}
					}
					any_neighbor_state = {
						OR = {
							controller = {
								is_in_array = {
									ROOT.potential_and_current_enemies = THIS
								}
							}
							any_neighbor_state = {
								controller = {
									is_in_array = {
										ROOT.potential_and_current_enemies = THIS
									}
								}
							}
						}
					}
				}
				else = {
					always = yes
				}
			}
			set_temp_variable = { local_air_capacity = building_level@air_base }
			multiply_temp_variable = { local_air_capacity = 200 }
			add_to_temp_variable = { air_capacity = local_air_capacity }
		}
		log = "build_air_base: [?Root.GetTag] has air_capacity at [?air_capacity|0]"
		subtract_from_temp_variable = { air_capacity = 200 }
		random_list = {
			5 = {
				multiply_temp_variable = { air_capacity = 0.5 }
			}
			95 = {}
		}
		if = {
			limit = {
				has_deployed_air_force_size = {
					size > var:air_capacity
				}
			}
			log = "build_air_base: [?Root.GetTag] Execute build"
			if = {
				limit = {
					has_war = yes
				}
				log = "build_air_base: [?Root.GetTag] has_war"
				random_country = {
					limit = {
						has_war_with = ROOT
					}
					set_temp_variable = { closest_state = ROOT.closest_state_to@THIS }
				}
				random_controlled_state = {
					limit = {
						is_fully_controlled_by = ROOT
						air_base < 10
						OR = {
							state = var:closest_state
							any_neighbor_state = {
								OR = {
									state = var:closest_state
									controller = { has_war_with = ROOT }
								}
							}
						}
					}
					log = "build_air_base: [?Root.GetTag] builds in [?this.GetName] ([?this|0)"
					add_building_construction = {
						type = air_base
						level = 1
						instant_build = no
					}
					set_temp_variable = { built_airport = 1 }
				}
			}
			else_if = {
				limit = {
					check_variable = { potential_and_current_enemies^num > 0 }
				}
				log = "build_air_base: [?Root.GetTag] has potential_and_current_enemies"
				random_country = {
					limit = {
						is_in_array = {
							ROOT.potential_and_current_enemies = THIS
						}
					}
					set_temp_variable = { closest_state = ROOT.closest_state_to@THIS }
				}
				random_controlled_state = {
					limit = {
						is_fully_controlled_by = ROOT
						air_base < 10
						OR = {
							state = var:closest_state
							any_neighbor_state = {
								OR = {
									state = var:closest_state
									controller = {
										is_in_array = {
											ROOT.potential_and_current_enemies = THIS
										}
									}
								}
							}
						}
					}
					log = "build_air_base: [?Root.GetTag] builds in [?this.GetName] ([?this|0)"
					add_building_construction = {
						type = air_base
						level = 1
						instant_build = no
					}
					set_temp_variable = { built_airport = 1 }
				}
			}
		
			if = {
				limit = {
					check_variable = {
						built_airport = 0
					}
				}
				random_country = {
					limit = {
						ROOT = {
							OR = {
								check_variable = { ai_strategy_conquer@PREV > 0 }
								check_variable = { ai_strategy_antagonize@PREV > 0 }
								check_variable = { ai_strategy_declare_war@PREV > 0 }
								check_variable = { ai_strategy_prepare_for_war@PREV > 0 }
							}
						}
					}
					set_temp_variable = { closest_state = ROOT.closest_state_to@THIS }
					set_temp_variable = { probable_enemy = THIS }
				}
				log = "build_air_base: [?Root.GetTag] has strats against [?probable_enemy.GetTag]"
				random_controlled_state = {
					limit = {
						is_fully_controlled_by = ROOT
						air_base < 10
						OR = {
							state = var:closest_state
							any_neighbor_state = {
								OR = {
									state = var:closest_state
									controller = {
										tag = var:probable_enemy
									}
								}
							}
						}
					}
					log = "build_air_base: [?Root.GetTag] builds in [?this.GetName] ([?this|0)"
					add_building_construction = {
						type = air_base
						level = 1
						instant_build = no
					}
					set_temp_variable = { built_airport = 1 }
				}
			}
		
			if = {
				limit = {
					check_variable = {
						built_airport = 0
					}
				}
				log = "build_air_base: [?Root.GetTag] fallback"
				random_controlled_state = {
					limit = {
						is_fully_controlled_by = ROOT
						air_base > 0
						air_base < 10
					}
					log = "build_air_base: [?Root.GetTag] builds in [?this.GetName] ([?this|0)"
					add_building_construction = {
						type = air_base
						level = 1
						instant_build = no
					}
					set_temp_variable = { built_airport = 1 }
				}
			}

			if = {
				limit = {
					check_variable = {
						built_airport = 0
					}
				}
				log = "build_air_base: [?Root.GetTag] fallback 2"
				random_list = {
					50 = {
						capital_scope = {
							log = "build_air_base: [?Root.GetTag] builds in [?this.GetName] ([?this|0)"
							add_building_construction = {
								type = air_base
								level = 1
								instant_build = no
							}
							set_temp_variable = { built_airport = 1 }
						}
						modifier = {
							factor = 0
							capital_scope = {
								OR = {
									air_base > 9
									NOT = { is_fully_controlled_by = ROOT }
								}
							}
						}
					}
					50 = {
						random_controlled_state = {
							limit = {
								is_fully_controlled_by = ROOT
								is_in_home_area = yes
								air_base < 10
							}
							log = "build_air_base: [?Root.GetTag] builds in [?this.GetName] ([?this|0)"
							add_building_construction = {
								type = air_base
								level = 1
								instant_build = no
							}
							set_temp_variable = { built_airport = 1 }
						}
					}
				}
			}
		}
	}
}

STG_EQS_all_ponies_front = {
	STG = {
		every_country = {
			limit = { is_in_faction_with = STG }
			set_country_flag = was_in_STG_faction
			leave_faction = yes
			add_ai_strategy = {
				type = alliance
				id = EQS
				value = 200
			}
			EQS = {
				add_ai_strategy = {
					type = alliance
					id = PREV
					value = 200
				}
				add_to_faction = PREV
			}
		}
		set_country_flag = was_in_STG_faction
		dismantle_faction = yes
		add_ai_strategy = {
			type = alliance
			id = EQS
			value = 200
		}
		EQS = {
			add_ai_strategy = {
				type = alliance
				id = PREV
				value = 200
			}
			add_to_faction = PREV
		}
	}
	EQS = {
		every_enemy_country = {
			every_country = {
				limit = { has_country_flag = was_in_STG_faction }
				add_to_war = { targeted_alliance = EQS enemy = PREV }
			}
		}
		set_faction_name = "ponies_front"
	}
}

STG_EQS_all_ponies_front_end = {
	EQS = {
		set_faction_name = "All_ponies_front"
	}
	if = {
		limit = {
			STG = {
				has_country_flag = was_in_STG_faction
			}
		}
		STG = {
			clr_country_flag = was_in_STG_faction
			add_ai_strategy = {
				type = alliance
				id = EQS
				value = -200
			}
			EQS = {
				add_ai_strategy = {
					type = alliance
					id = PREV
					value = -200
				}
			}
			if = {
				limit = {
					is_subject = no
				}
				leave_faction = yes
			}
		}
	}
}

STG_EQS_all_ponies_front_end_2 = {
	STG = {
		create_faction = "Socialist_Union"
	}
	every_country = {
		limit = {
			OR = {
				has_country_flag = was_in_STG_faction 
				is_subject_of = STG
			}
		}
		if = {
			limit = {
				has_country_flag = was_in_STG_faction 
			}
			clr_country_flag = was_in_STG_faction
			add_ai_strategy = {
				type = alliance
				id = EQS
				value = -200
			}
			EQS = {
				add_ai_strategy = {
					type = alliance
					id = PREV
					value = -200
				}
			}
		}
		if = {
			limit = {
				is_in_faction_with = EQS
				STG = { is_faction_leader = yes }
			}
			leave_faction = yes
			STG = { add_to_faction = PREV }
		}
	}
}