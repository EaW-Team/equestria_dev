
SLC_strat_dynmod_alter_value = {
	SLC_strat_recruitable_population_factor_var_alter_value = yes
	SLC_strat_weekly_manpower_var_alter_value = yes
	SLC_strat_resources_gain_var_alter_value = yes
	SLC_strat_dockyard_output_var_alter_value = yes
	SLC_strat_consumer_goods_var_alter_value = yes
	SLC_strat_fuel_gain_var_alter_value = yes
	SLC_strat_base_efficiency_var_alter_value = yes
	SLC_strat_efficiency_growth_var_alter_value = yes
	SLC_strat_efficiency_retention_var_alter_value = yes
	SLC_strat_factory_output_var_alter_value = yes
}

SLC_strat_recruitable_population_factor_var_alter_value = {
	set_temp_variable = {
		temp_var = SLC_strat_recruitable_population_factor_start_var
	}
	multiply_temp_variable = { temp_var = SLC_strat_puppet_number_var }
    set_variable = { SLC_strat_recruitable_population_factor_var = temp_var }
}

SLC_strat_weekly_manpower_var_alter_value = {
	set_temp_variable = {
		temp_var = SLC_strat_weekly_manpower_start_var
	}
	multiply_temp_variable = { temp_var = SLC_strat_puppet_number_var }
    set_variable = { SLC_strat_weekly_manpower_var = temp_var }
}

SLC_strat_resources_gain_var_alter_value = {
	set_temp_variable = {
		temp_var = SLC_strat_resources_gain_start_var
	}
	multiply_temp_variable = { temp_var = SLC_strat_puppet_number_var }
    set_variable = { SLC_strat_resources_gain_var = temp_var }
}

SLC_strat_dockyard_output_var_alter_value = {
	set_temp_variable = {
		temp_var = SLC_strat_dockyard_output_start_var
	}
	multiply_temp_variable = { temp_var = SLC_strat_puppet_number_var }
    set_variable = { SLC_strat_dockyard_output_var = temp_var }
}

SLC_strat_consumer_goods_var_alter_value = {
	set_temp_variable = {
		temp_var = SLC_strat_consumer_goods_start_var
	}
	multiply_temp_variable = { temp_var = SLC_strat_puppet_number_var }
    set_variable = { SLC_strat_consumer_goods_var = temp_var }
}

SLC_strat_fuel_gain_var_alter_value = {
	set_temp_variable = {
		temp_var = SLC_strat_fuel_gain_start_var
	}
	multiply_temp_variable = { temp_var = SLC_strat_puppet_number_var }
    set_variable = { SLC_strat_fuel_gain_var = temp_var }
}

SLC_strat_base_efficiency_var_alter_value = {
	set_temp_variable = {
		temp_var = SLC_strat_base_efficiency_start_var
	}
	multiply_temp_variable = { temp_var = SLC_strat_puppet_number_var }
    set_variable = { SLC_strat_base_efficiency_var = temp_var }
}

SLC_strat_efficiency_growth_var_alter_value = {
	set_temp_variable = {
		temp_var = SLC_strat_efficiency_growth_start_var
	}
	multiply_temp_variable = { temp_var = SLC_strat_puppet_number_var }
    set_variable = { SLC_strat_efficiency_growth_var = temp_var }
}

SLC_strat_efficiency_retention_var_alter_value = {
	set_temp_variable = {
		temp_var = SLC_strat_efficiency_retention_start_var
	}
	multiply_temp_variable = { temp_var = SLC_strat_puppet_number_var }
    set_variable = { SLC_strat_efficiency_retention_var = temp_var }
}

SLC_strat_factory_output_var_alter_value = {
	set_temp_variable = {
		temp_var = SLC_strat_factory_output_start_var
	}
	multiply_temp_variable = { temp_var = SLC_strat_puppet_number_var }
    set_variable = { SLC_strat_factory_output_var = temp_var }
}

# Commies building communism Functions #

# Constants
@MIN_FERVOUR_NB = 0
@MAX_FERVOUR_NB = 100
@MAX_LEVEL_FOR_BAR = 5

# Function    : SLC_cbc_modify_fervour
# Description : Add a certain amount of fervour, SLC_cbc_fervour beeing the current number of fervour.
#               The total number of fervour is in the interval [0, 100].
#               A tooltip is included.
# Inputs      : i_fervour : The amount of fervour to add. Can be negative
# Outputs     : None
SLC_cbc_modify_fervour = {
	add_to_variable = { SLC_cbc_fervour = i_fervour }
	clamp_variable = {
		var = SLC_cbc_fervour
		min = @MIN_FERVOUR_NB
		max = @MAX_FERVOUR_NB
	}
	custom_effect_tooltip = SLC_cbc_modify_fervour_tt

	# Update the modifier
	SLC_cbc_update_dynmod = yes

	# Update the gui (Refresh only)
	add_to_variable = { SLC_cbc_update_gui = 1 }
}

# Function    : SLC_cbc_set_fervour
# Description : Set the number of fervour.
#               The total number of fervour is in the interval [0, 100].
#               A tooltip is included.
# Inputs      : i_fervour : The amount of fervour.
# Outputs     : None
SLC_cbc_set_fervour = {
	set_variable = { SLC_cbc_fervour = i_fervour }
	clamp_variable = {
		var = SLC_cbc_fervour
		min = @MIN_FERVOUR_NB
		max = @MAX_FERVOUR_NB
	}
	custom_effect_tooltip = SLC_cbc_set_fervour_tt

	# Update the modifier
	SLC_cbc_update_dynmod = yes

	# Update the gui (Refresh only)
	add_to_variable = { SLC_cbc_update_gui = 1 }
}

# Function    : SLC_cbc_activate_fervour
# Description : Activate the fervour mechanism.
# Inputs      : None
# Outputs     : None
SLC_cbc_activate_fervour = {
	set_country_flag = SLC_cbc_fervour_activated

	add_dynamic_modifier = {
		modifier = SLC_cbc_fervour_dynmod
	}

	# Update the GUI
	SLC_cbc_update_gui = yes
}

# Function    : SLC_cbc_deactivate_fervour
# Description : Deactivate the fervour mechanism.
# Inputs      : None
# Outputs     : None
SLC_cbc_deactivate_fervour = {
	clr_country_flag = SLC_cbc_fervour_activated

	remove_dynamic_modifier = {
		modifier = SLC_cbc_fervour_dynmod
	}

	# Update the GUI
	SLC_cbc_update_gui = yes
}

# Function    : SLC_cbc_set_authoritarianism
# Description : Set the authoritarianism level.
#               Has to be an integer in the interval [0, 4].
# Inputs      : i_level - The level of authoritarianism
# Outputs     : None
SLC_cbc_set_authoritarianism = {
	set_temp_variable = { displayed_level = i_level }
	round_temp_variable = displayed_level
	clamp_temp_variable = {
		var = displayed_level
		min = 0
		max = @MAX_LEVEL_FOR_BAR
	}

	custom_effect_tooltip = SLC_cbc_set_authoritarianism_tt
	set_variable = { SLC_cbc_authoritarianism_level = displayed_level }

	# Update the GUI
	SLC_cbc_update_gui = yes
}

# Function    : SLC_cbc_increment_authoritarianism
# Description : Increment the authoritarianism.
#               Cannot be more than 4.
# Inputs      : None
# Outputs     : None
SLC_cbc_increment_authoritarianism = {
	if = {
		limit = { 
			check_variable = {
				SLC_cbc_authoritarianism_level > 4
			}
		}
		custom_effect_tooltip = SLC_cbc_increment_authoritarianism_tt_2
		hidden_effect = {
			add_stability = -0.05
		}
	}
	else = {
		set_temp_variable = { displayed_level = SLC_cbc_authoritarianism_level }
		add_to_temp_variable = { displayed_level = 1 }
		round_temp_variable = displayed_level
		clamp_temp_variable = {
			var = displayed_level
			min = 0
			max = @MAX_LEVEL_FOR_BAR
		}

		custom_effect_tooltip = SLC_cbc_increment_authoritarianism_tt
		set_variable = { SLC_cbc_authoritarianism_level = displayed_level }

		# Update the GUI
		SLC_cbc_update_gui = yes
	}
}

# Function    : SLC_cbc_decrement_authoritarianism
# Description : Decrement the authoritarianism.
#               Cannot be less than 0.
# Inputs      : None
# Outputs     : None
SLC_cbc_decrement_authoritarianism = {
	if = {
		limit = { 
			check_variable = {
				SLC_cbc_authoritarianism_level < 1
			}
		}
		custom_effect_tooltip = SLC_cbc_decrement_authoritarianism_tt_2
		hidden_effect = {
			add_political_power = -65
		}
	}
	else = {
		set_temp_variable = { displayed_level = SLC_cbc_authoritarianism_level }
		add_to_temp_variable = { displayed_level = -1 }
		round_temp_variable = displayed_level
		clamp_temp_variable = {
			var = displayed_level
			min = 0
			max = @MAX_LEVEL_FOR_BAR
		}

		custom_effect_tooltip = SLC_cbc_decrement_authoritarianism_tt
		set_variable = { SLC_cbc_authoritarianism_level = displayed_level }

		# Update the GUI
		SLC_cbc_update_gui = yes
	}
}

# Function    : SLC_cbc_set_praxial_leaning
# Description : Set the praxial leaning level.
#               Has to be an integer in the interval [0, 4].
# Inputs      : i_level - The level of praxial leaning
# Outputs     : None
SLC_cbc_set_praxial_leaning = {
	set_temp_variable = { displayed_level = i_level }
	round_temp_variable = displayed_level
	clamp_temp_variable = {
		var = displayed_level
		min = 0
		max = @MAX_LEVEL_FOR_BAR
	}

	custom_effect_tooltip = SLC_cbc_set_praxial_leaning_tt
	set_variable = { SLC_cbc_praxial_leaning_level = displayed_level }

	# Update the GUI
	SLC_cbc_update_gui = yes
}

# Function    : SLC_cbc_increment_praxial_leaning 
# Description : Increment the praxial leaning.
#               Cannot be more than 4.
# Inputs      : None
# Outputs     : None
SLC_cbc_increment_praxial_leaning = {
	if = {
		limit = { 
			check_variable = {
				SLC_cbc_praxial_leaning_level > 4
			}
		}
		custom_effect_tooltip = SLC_cbc_increment_praxial_leaning_tt_2
		hidden_effect = {
			add_war_support = -0.05
		}
	}
	else = {
		set_temp_variable = { displayed_level = SLC_cbc_praxial_leaning_level }
		add_to_temp_variable = { displayed_level = 1 }
		round_temp_variable = displayed_level
		clamp_temp_variable = {
			var = displayed_level
			min = 0
			max = @MAX_LEVEL_FOR_BAR
		}

		custom_effect_tooltip = SLC_cbc_increment_praxial_leaning_tt
		set_variable = { SLC_cbc_praxial_leaning_level = displayed_level }

		# Update the GUI
		SLC_cbc_update_gui = yes
	}
}

# Function    : SLC_cbc_decrement_praxial_leaning 
# Description : Decrement the praxial leaning.
#               Cannot be les than 0.
# Inputs      : None
# Outputs     : None
SLC_cbc_decrement_praxial_leaning = {
	if = {
		limit = { 
			check_variable = {
				SLC_cbc_praxial_leaning_level < 1
			}
		}
		custom_effect_tooltip = SLC_cbc_decrement_praxial_leaning_tt_2
		hidden_effect = {
			add_command_power = -30
			army_experience = -20
		}
	}
	else = {
		set_temp_variable = { displayed_level = SLC_cbc_praxial_leaning_level }
		add_to_temp_variable = { displayed_level = -1 }
		round_temp_variable = displayed_level
		clamp_temp_variable = {
			var = displayed_level
			min = 0
			max = @MAX_LEVEL_FOR_BAR
		}

		custom_effect_tooltip = SLC_cbc_decrement_praxial_leaning_tt
		set_variable = { SLC_cbc_praxial_leaning_level = displayed_level }

		# Update the GUI
		SLC_cbc_update_gui = yes
	}
}

# Function    : SLC_cbc_update_gui
# Description : Update the decision category GUI
# Inputs      : None
# Outputs     : None
@SLC_CBC_STEP_PER_LEVEL = 20.000 # 100/(Number of level - 1)
SLC_cbc_update_gui = {
	# Authoritarianism progress bar
	set_variable = { SLC_cbc_autho_bar = SLC_cbc_authoritarianism_level }
	multiply_variable = { SLC_cbc_autho_bar = @SLC_CBC_STEP_PER_LEVEL }
	round_variable = SLC_cbc_autho_bar
	add_to_variable = { SLC_cbc_autho_bar = 1 }
	# Authoritarianism icon
	set_variable = { SLC_cbc_autho_icon = SLC_cbc_authoritarianism_level }
	add_to_variable = { SLC_cbc_autho_icon = 1 }

	# Praxial leaning progress bar
	set_variable = { SLC_cbc_praxial_bar = SLC_cbc_praxial_leaning_level }
	multiply_variable = { SLC_cbc_praxial_bar = @SLC_CBC_STEP_PER_LEVEL }
	round_variable = SLC_cbc_praxial_bar
	add_to_variable = { SLC_cbc_praxial_bar = 1 }

	# Praxial leaning icon
	set_variable = { SLC_cbc_praxial_icon = SLC_cbc_praxial_leaning_level }
	add_to_variable = { SLC_cbc_praxial_icon = 1 }

	if = {
		limit = { has_country_flag = SLC_cbc_fervour_activated }
		set_variable = { SLC_cbc_fervour_frame_frame = 2 }
	} else = {
		set_variable = { SLC_cbc_fervour_frame_frame = 1 }
	}

	# Update the GUI
	add_to_variable = { SLC_cbc_update_gui = 1 }
}

# Function    : SLC_cbc_update_dynmod
# Description : Update the fervour dynamic modifier
# Inputs      : None
# Outputs     : None
@FERVOUR_DYNMOD_MAX_PP_GAIN = 0.25
@FERVOUR_DYNMOD_MAX_RESISTANCE_TARGET = -0.50
@FERVOUR_DYNMOD_MAX_ARMY_ATTACK_FACTOR = 0.15
@FERVOUR_DYNMOD_MAX_ARMY_DEFENCE_FACTOR = 0.10
@FERVOUR_DYNMOD_MAX_COMPLIANCE_GAIN = 0.10
SLC_cbc_update_dynmod = {
	# Compute the factor - Linear progression
	set_temp_variable = { temp_factor = SLC_cbc_fervour }
	add_to_temp_variable = { temp_factor = -50 }
	divide_temp_variable = { temp_factor = 50 }

	# Political power gain
	set_variable = { SLC_cbc_fervour_dynmod_political_power_gain = @FERVOUR_DYNMOD_MAX_PP_GAIN }
	multiply_variable = { SLC_cbc_fervour_dynmod_political_power_gain = temp_factor }
	set_variable = { SLC_cbc_fervour_dynmod_resistance_target = @FERVOUR_DYNMOD_MAX_RESISTANCE_TARGET }
	multiply_variable = { SLC_cbc_fervour_dynmod_resistance_target = temp_factor }
	set_variable = { SLC_cbc_fervour_dynmod_army_attack_factor = @FERVOUR_DYNMOD_MAX_ARMY_ATTACK_FACTOR }
	multiply_variable = { SLC_cbc_fervour_dynmod_army_attack_factor = temp_factor }
	set_variable = { SLC_cbc_fervour_dynmod_army_defence_factor = @FERVOUR_DYNMOD_MAX_ARMY_DEFENCE_FACTOR }
	multiply_variable = { SLC_cbc_fervour_dynmod_army_defence_factor = temp_factor }
	set_variable = { SLC_cbc_fervour_dynmod_compliance_gain = @FERVOUR_DYNMOD_MAX_COMPLIANCE_GAIN }
	multiply_variable = { SLC_cbc_fervour_dynmod_compliance_gain = temp_factor }

	force_update_dynamic_modifier = yes
}
