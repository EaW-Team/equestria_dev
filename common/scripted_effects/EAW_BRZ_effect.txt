# What are these for?
add_latest_tank_licence_to_root = {
	if = {
		limit = {
			has_tech = gwtank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = gw_tank_equipment
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = basic_light_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = light_tank_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = improved_light_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = light_tank_equipment_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_light_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = light_tank_equipment_3
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_light_tank_a
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = light_tank_equipment_x
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_light_tank_b
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = light_tank_equipment_x_2
			}
			cost_factor = 0
		}
	}

	if = {
		limit = {
			has_tech = basic_medium_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = medium_tank_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = improved_medium_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = medium_tank_equipment_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_medium_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = medium_tank_equipment_3
			}
			cost_factor = 0
		}
	}

	if = {
		limit = {
			has_tech = main_battle_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = modern_tank_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = main_battle_tank_a
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = modern_tank_equipment_x
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = main_battle_tank_b
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = modern_tank_equipment_x_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = main_battle_tank_c
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = modern_tank_equipment_x_3
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = main_battle_tank_d
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = modern_tank_equipment_x_4
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = main_battle_tank_e
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = modern_tank_equipment_x_5
			}
			cost_factor = 0
		}
	}

	if = {
		limit = {
			has_tech = basic_heavy_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = heavy_tank_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = improved_heavy_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = heavy_tank_equipment_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_heavy_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = heavy_tank_equipment_3
			}
			cost_factor = 0
		}
	}
	
	if = {
		limit = {
			has_tech = super_heavy_tank
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = super_heavy_tank_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = super_heavy_tank_a
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = super_heavy_tank_equipment_x
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = super_heavy_tank_b
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = super_heavy_tank_equipment_x_2
			}
			cost_factor = 0
		}
	}
}

add_latest_infantry_equipment_licence_to_root = {
	if = {
		limit = {
			has_tech = infantry_weapons
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = infantry_equipment_0
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = infantry_weapons1
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = infantry_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = improved_infantry_weapons
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = infantry_equipment_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_infantry_weapons
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = infantry_equipment_3
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_infantry_weapons_b
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = infantry_equipment_x
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = advanced_infantry_weapons_e
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = infantry_equipment_x_2
			}
			cost_factor = 0
		}
	}

	if = {
		limit = {
			has_tech = magical_weapons
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = magical_equipment_1
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = magical_weapons1
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = magical_equipment_2
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = magical_weapons2
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = magical_equipment_3
			}
			cost_factor = 0
		}
	}
	else_if = {
		limit = {
			has_tech = magical_weapons3
		}
		create_production_license = {
			target = ROOT
			equipment = {
				type = magical_equipment_4
			}
			cost_factor = 0
		}
	}
}

# Explanaintion for the poor soul who has to understand this:
# I'm trying to generate 3 random event options, displayed in random order, out of 5 total. 
# First, I'm doing a 5-choose-3, to choose which event options will be displayed. These are assigned to three variables
# Then, I'm picking an order to display them, which assignes the first three variables to three other ones, 
# the ones used later in the options of the event code
BRZ_noble_virtue_investment_option_generator = {
	# Step 1: Choose which options to display
	set_variable = {
		investment_option_1 = 1 # Default
	}
	set_variable = {
		investment_option_2 = 2 # Default
	}
	set_variable = {
		investment_option_3 = 3 # Default
	}
	random_list = {
		1 = {
			set_variable = {
				investment_option_1 = 1
			}
			set_variable = {
				investment_option_2 = 2
			}
			set_variable = {
				investment_option_3 = 3
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 1
			}
			set_variable = {
				investment_option_2 = 2
			}
			set_variable = {
				investment_option_3 = 4
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 1
			}
			set_variable = {
				investment_option_2 = 2
			}
			set_variable = {
				investment_option_3 = 5
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 1
			}
			set_variable = {
				investment_option_2 = 3
			}
			set_variable = {
				investment_option_3 = 4
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 1
			}
			set_variable = {
				investment_option_2 = 3
			}
			set_variable = {
				investment_option_3 = 5
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 1
			}
			set_variable = {
				investment_option_2 = 4
			}
			set_variable = {
				investment_option_3 = 5
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 2
			}
			set_variable = {
				investment_option_2 = 3
			}
			set_variable = {
				investment_option_3 = 4
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 2
			}
			set_variable = {
				investment_option_2 = 3
			}
			set_variable = {
				investment_option_3 = 5
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 2
			}
			set_variable = {
				investment_option_2 = 4
			}
			set_variable = {
				investment_option_3 = 5
			}
		}
		1 = {
			set_variable = {
				investment_option_1 = 3
			}
			set_variable = {
				investment_option_2 = 4
			}
			set_variable = {
				investment_option_3 = 5
			}
		}
	}
	set_variable = {
		display_option_a = investment_option_1 # default
	}
	set_variable = {
		display_option_b = investment_option_2 # default
	}
	set_variable = {
		display_option_c = investment_option_3 # default
	}
	random_list = {
		1 = {
			set_variable = {
				display_option_a = investment_option_1
			}
			set_variable = {
				display_option_b = investment_option_2
			}
			set_variable = {
				display_option_c = investment_option_3
			}
		}
		1 = {
			set_variable = {
				display_option_a = investment_option_1
			}
			set_variable = {
				display_option_b = investment_option_3
			}
			set_variable = {
				display_option_c = investment_option_2
			}
		}
		1 = {
			set_variable = {
				display_option_a = investment_option_2
			}
			set_variable = {
				display_option_b = investment_option_1
			}
			set_variable = {
				display_option_c = investment_option_3
			}
		}
		1 = {
			set_variable = {
				display_option_a = investment_option_2
			}
			set_variable = {
				display_option_b = investment_option_3
			}
			set_variable = {
				display_option_c = investment_option_1
			}
		}
		1 = {
			set_variable = {
				display_option_a = investment_option_3
			}
			set_variable = {
				display_option_b = investment_option_1
			}
			set_variable = {
				display_option_c = investment_option_2
			}
		}
		1 = {
			set_variable = {
				display_option_a = investment_option_3
			}
			set_variable = {
				display_option_b = investment_option_2
			}
			set_variable = {
				display_option_c = investment_option_1
			}
		}
	}
}

BRZ_noble_virtue_investment_option_a_effect = {
	if = {
		limit = {
			check_variable = { display_option_a = 1 } # consumer goods
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 1 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_low
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 2 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_med
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 3 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_high
				days = 180
			}
		}
	}
	if = {
		limit = {
			check_variable = { display_option_a = 2 } # political power
		}
		add_political_power = BRZ_noble_virtue_pp_cost
	}
	if = {
		limit = {
			check_variable = { display_option_a = 3 } # command power
		}
		add_command_power = BRZ_noble_virtue_cp_cost
	}
	if = {
		limit = {
			check_variable = { display_option_a = 4 } # max production efficiency
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 1 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_low
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 2 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_med
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 3 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_high
				days = 180
			}
		}
	}
	if = {
		limit = {
			check_variable = { display_option_a = 5 } # stability
		}
		add_stability = BRZ_noble_virtue_stab_cost
	}
}

BRZ_noble_virtue_investment_option_b_effect = {
	if = {
		limit = {
			check_variable = { display_option_b = 1 } # consumer goods
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 1 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_low
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 2 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_med
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 3 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_high
				days = 180
			}
		}
	}
	if = {
		limit = {
			check_variable = { display_option_b = 2 } # political power
		}
		add_political_power = BRZ_noble_virtue_pp_cost
	}
	if = {
		limit = {
			check_variable = { display_option_b = 3 } # command power
		}
		add_command_power = BRZ_noble_virtue_cp_cost
	}
	if = {
		limit = {
			check_variable = { display_option_b = 4 } # max production efficiency
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 1 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_low
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 2 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_med
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 3 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_high
				days = 180
			}
		}
	}
	if = {
		limit = {
			check_variable = { display_option_b = 5 } # stability
		}
		add_stability = BRZ_noble_virtue_stab_cost
	}
}

BRZ_noble_virtue_investment_option_c_effect = {
	if = {
		limit = {
			check_variable = { display_option_c = 1 } # consumer goods
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 1 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_low
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 2 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_med
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_cg_cost = 3 }
			}
			add_timed_idea = {
				idea = BRZ_consumer_goods_investment_high
				days = 180
			}
		}
	}
	if = {
		limit = {
			check_variable = { display_option_c = 2 } # political power
		}
		add_political_power = BRZ_noble_virtue_pp_cost
	}
	if = {
		limit = {
			check_variable = { display_option_c = 3 } # command power
		}
		add_command_power = BRZ_noble_virtue_cp_cost
	}
	if = {
		limit = {
			check_variable = { display_option_c = 4 } # max production efficiency
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 1 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_low
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 2 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_med
				days = 180
			}
		}
		if = {
			limit = {
				check_variable = {	BRZ_noble_virtue_me_cost = 3 }
			}
			add_timed_idea = {
				idea = BRZ_max_eff_investment_high
				days = 180
			}
		}
	}
	if = {
		limit = {
			check_variable = { display_option_c = 5 } # stability
		}
		add_stability = BRZ_noble_virtue_stab_cost
	}
}

BRZ_add_initial_party_support = {
	# Kinda default values (works for Herzland)
	add_to_array = { BRZ_local_party_support = 0.3 } # Pan-Griffonian Harmonic Party
	add_to_array = { BRZ_local_party_support = 0.1 } # Agrarian Alliance Of Griffonia
	add_to_array = { BRZ_local_party_support = 0.08 } # Peasant And Workers Party Of The Griffonian Empire
	add_to_array = { BRZ_local_party_support = 0.05 } # Griffonian Liberal Species Union
	add_to_array = { BRZ_local_party_support = 0.25 } # Socialist Party Of The Griffonian Empire
	add_to_array = { BRZ_local_party_support = 0.02 } # Workers Party Of Free Griffonia
	add_to_array = { BRZ_local_party_support = 0.2 } # Regionalists
	
	set_variable = { BRZ_state_is_rural = 0 }
	
	# No regionalist in the Inner Core
	if = {
		limit = { # Bronzehill + Imperial Core
			OR = {
				state = 492 # Bronzekreuz
				state = 539 # Crownspike
				state = 568 # Highhill
				state = 479 # Pineshades
				state = 424 # Raven Lakes
				state = 382 # Griffenheim
				state = 437 # Crona
				state = 405 # Interriver
				state = 397 # Helheim
				state = 555 # King's Realm
			}
		}
		
		# Remove seperatists in Bronzehill + Imperial Core
		set_temp_variable = { BRZ_party_boost_buffer = -0.2 }
		set_temp_variable = { BRZ_party_boost_selector = 6 }
		BRZ_add_to_party_absolute = yes
	}
	
	# Consider Culture
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 7 } # Aquleian
		}
		# Aquileian ponies
		set_temp_variable = { BRZ_party_boost_buffer = 0.1 }
		set_temp_variable = { BRZ_party_boost_selector = 3 } # Liberals
		BRZ_add_to_party = yes
		
		# Aquileian seperatists
		set_temp_variable = { BRZ_party_boost_buffer = 0.3 }
		set_temp_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 12 } # Northern Griffonian
		}
		
		# Northern seperatists
		set_temp_variable = { BRZ_party_boost_buffer = 0.25 }
		set_temp_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 15 } # Southern Griffonian
		}
		
		# Southern seperatists
		set_temp_variable = { BRZ_party_boost_buffer = 0.6 }
		set_temp_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 14 } # Eastern Pony (Posniak + Skynavia)
		}
		
		# Different species
		set_temp_variable = { BRZ_party_boost_buffer = 0.5 }
		set_temp_variable = { BRZ_party_boost_selector = 6 } # Liberals
		BRZ_add_to_party = yes
		
		# Pony seperatists
		set_temp_variable = { BRZ_party_boost_buffer = 0.6 }
		set_temp_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 9 } # Evian
		}
		# Evi seperatists
		set_temp_variable = { BRZ_party_boost_buffer = 0.7 }
		set_temp_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 11 } # Minotaur
		}
		# Different species
		set_temp_variable = { BRZ_party_boost_buffer = 0.5 }
		set_temp_variable = { BRZ_party_boost_selector = 3 } # Liberals
		BRZ_add_to_party = yes
		
		# Minotaur seperatists
		set_temp_variable = { BRZ_party_boost_buffer = 0.8 }
		set_temp_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			check_variable = { culture_map_mode_value = 11 } # Diamand Dogs (outside Bronzehill)
			NOT = { state = 539 } # Crownspike 
			NOT = { state = 568 } # Highhill
		}
		
		# Dog species
		set_temp_variable = { BRZ_party_boost_buffer = 0.2 }
		set_temp_variable = { BRZ_party_boost_selector = 3 } # Liberals
		BRZ_add_to_party = yes
		
		# Dog-led party
		set_temp_variable = { BRZ_party_boost_buffer = 0.2 }
		set_temp_variable = { BRZ_party_boost_selector = 0 } # Conservatives
		BRZ_add_to_party = yes
		
		# Mountain seperatists
		set_temp_variable = { BRZ_party_boost_buffer = 0.7 }
		set_temp_variable = { BRZ_party_boost_selector = 6 } # Seperatists
		BRZ_add_to_party = yes
	}
	
	# Special cases (History)
	if = {
		limit = { # Skyfall
			OR = {
				state = 381 # Skyfall
				state = 379 # Oldbeaken
				state = 380 # Griffton
				state = 396 # Vleugleland
			}
		}
		# Skyfall leftism
		set_temp_variable = { BRZ_party_boost_buffer = 0.2 }
		set_temp_variable = { BRZ_party_boost_selector = 4 } # Socialists
		BRZ_add_to_party = yes
		
		# Skyfall republicanism
		set_temp_variable = { BRZ_party_boost_buffer = 0.2 }
		set_temp_variable = { BRZ_party_boost_selector = 5 } # Radical Socialists
		BRZ_add_to_party = yes
		
		# Skyfall multiculturalism
		set_temp_variable = { BRZ_party_boost_buffer = 0.5 }
		set_temp_variable = { BRZ_party_boost_selector = 3 } # Liberals
		BRZ_add_to_party = yes
	}
	
	if = {
		limit = {
			state = 485 # Cloudbury
		}
		# Cloudbury republicanism
		set_temp_variable = { BRZ_party_boost_buffer = 0.3 }
		set_temp_variable = { BRZ_party_boost_selector = 5 } # Radical Socialists
		BRZ_add_to_party = yes
	}
	
	if = { # New Skynavia
		limit = {
			state = 522 # New Skynavia
		}
		
		# Skynavia republicanism
		set_temp_variable = { BRZ_party_boost_buffer = 0.8 }
		set_temp_variable = { BRZ_party_boost_selector = 5 } # Radical Socialists
		BRZ_add_to_party = yes
	}
	
	# Consider urban density
	if = {
		limit = {
			check_variable = { state_population_k > 2000 } # Two Million state
		}
		# Urban leftism
		set_temp_variable = { BRZ_party_boost_buffer = 0.05 }
		set_temp_variable = { BRZ_party_boost_selector = 4 } # Socialists
		BRZ_add_to_party = yes
	}
	if = {
		limit = {
			check_variable = { state_population_k > 3000 } # Three Million state
		}
		# Urban leftism
		set_temp_variable = { BRZ_party_boost_buffer = 0.05 }
		set_temp_variable = { BRZ_party_boost_selector = 4 } # Socialists
		BRZ_add_to_party = yes
	}
	if = {
		limit = {
			check_variable = { state_population_k < 700 } # Half million state
		}
		# Rural agrarianism
		set_temp_variable = { BRZ_party_boost_buffer = 0.07 }
		set_temp_variable = { BRZ_party_boost_selector = 1 } # Conservative agrarians
		BRZ_add_to_party = yes
		set_temp_variable = { BRZ_party_boost_buffer = 0.07 }
		set_temp_variable = { BRZ_party_boost_selector = 2 } # Socialist agrarians
		BRZ_add_to_party = yes
		random_list = {
			1 = {
				set_temp_variable = { BRZ_party_boost_buffer = 0.05 }
				set_temp_variable = { BRZ_party_boost_selector = 1 } # Conservative agrarians
				BRZ_add_to_party = yes
			}
			1 = {
				set_temp_variable = { BRZ_party_boost_buffer = 0.05 }
				set_temp_variable = { BRZ_party_boost_selector = 2 } # Socialist agrarians
				BRZ_add_to_party = yes
			}
		}
		
		add_to_variable = { BRZ_state_is_rural = 1 }
	}
	if = {
		limit = {
			check_variable = { state_population_k < 500 } # Sparse state
		}
		# Rural agrarianism
		set_temp_variable = { BRZ_party_boost_buffer = 0.07 }
		set_temp_variable = { BRZ_party_boost_selector = 1 } # Conservative agrarians
		BRZ_add_to_party = yes
		set_temp_variable = { BRZ_party_boost_buffer = 0.07 }
		set_temp_variable = { BRZ_party_boost_selector = 2 } # Socialist agrarians
		BRZ_add_to_party = yes
		random_list = {
			1 = {
				set_temp_variable = { BRZ_party_boost_buffer = 0.05 }
				set_temp_variable = { BRZ_party_boost_selector = 1 } # Conservative agrarians
				BRZ_add_to_party = yes
			}
			1 = {
				set_temp_variable = { BRZ_party_boost_buffer = 0.05 }
				set_temp_variable = { BRZ_party_boost_selector = 2 } # Socialist agrarians
				BRZ_add_to_party = yes
			}
		}
		
		add_to_variable = { BRZ_state_is_rural = 1 }
	}
	if = {
		limit = {
			check_variable = { state_population_k < 300 } # Very sparse state
		}
		# Rural agrarianism
		set_temp_variable = { BRZ_party_boost_buffer = 0.07 }
		set_temp_variable = { BRZ_party_boost_selector = 1 } # Conservative agrarians
		BRZ_add_to_party = yes
		set_temp_variable = { BRZ_party_boost_buffer = 0.07 }
		set_temp_variable = { BRZ_party_boost_selector = 2 } # Socialist agrarians
		BRZ_add_to_party = yes
		random_list = {
			1 = {
				set_temp_variable = { BRZ_party_boost_buffer = 0.05 }
				set_temp_variable = { BRZ_party_boost_selector = 1 } # Conservative agrarians
				BRZ_add_to_party = yes
			}
			1 = {
				set_temp_variable = { BRZ_party_boost_buffer = 0.05 }
				set_temp_variable = { BRZ_party_boost_selector = 2 } # Socialist agrarians
				BRZ_add_to_party = yes
			}
		}
		
		add_to_variable = { BRZ_state_is_rural = 1 }
	}
}

# Note: 
# The amount to add needs to be set beforehand in the BRZ_party_boost_buffer variable
# The party to add to needs to be set beforehand in the BRZ_party_boost_selector variable
# Also please note that the effect - despite of what it seems - does NOT work as to add the 
# absolute value of BRZ_party_boost_buffer to the party in question.
# This is because the total party support (logically) always has to be 100%. 
# Therefore, if the party e.g. has already 50% support, only 50% of the BRZ_party_boost_buffer will be added, 
# and if it would have 100%, nothing would be added. If it has 0%, then the full effect is added
# This is just a consequence of the normalization that's going on.
BRZ_add_to_party = {
	set_temp_variable = { reduction_factor = 1 }
	subtract_from_temp_variable = { reduction_factor = BRZ_party_boost_buffer }
	
	multiply_variable = { BRZ_local_party_support^0 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^1 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^2 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^3 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^4 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^5 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^6 = reduction_factor }
	
	add_to_variable = { BRZ_local_party_support^BRZ_party_boost_selector = BRZ_party_boost_buffer }
}

# Note: 
# The amount to add needs to be set beforehand in the BRZ_party_boost_buffer variable
# The party to add to needs to be set beforehand in the BRZ_party_boost_selector variable
# In contrast to the "BRZ_add_to_party" effect, here, the absolute value of BRZ_party_boost_buffer
# is added to the party in question. This makes the effect potentially dangerous to use
# in certain edge cases - e.g. adding 20% support to a party with 90% support would
# result in 110% support. Proceed with caution, in general the BRZ_add_to_party effect
# should be used.
BRZ_add_to_party_absolute = {
	# Formula: reduction_factor = 1 - PBB / (1 - LPS[PBS]})
	set_temp_variable = { other_party_support = 1 }
	subtract_from_temp_variable = { other_party_support = BRZ_local_party_support^BRZ_party_boost_selector }
	set_temp_variable = { reduction_factor = BRZ_party_boost_buffer }
	divide_temp_variable = { reduction_factor = other_party_support }
	multiply_temp_variable = { reduction_factor = -1 }
	add_to_temp_variable = { reduction_factor = 1 }
	
	multiply_variable = { BRZ_local_party_support^0 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^1 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^2 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^3 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^4 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^5 = reduction_factor }
	multiply_variable = { BRZ_local_party_support^6 = reduction_factor }
	
	# don't actually reduce the variable in question - as we don't know which one, just counteract here
	divide_temp_variable = { BRZ_local_party_support^BRZ_party_boost_selector = reduction_factor }
	
	add_to_variable = { BRZ_local_party_support^BRZ_party_boost_selector = BRZ_party_boost_buffer }
}

# Used for poll aggregator or election itself
# Has to be triggered in BRZ (country) scope
BRZ_get_national_party_numbers = {
	
	# Reset variables to restart calculation
	set_variable = { BRZ_national_party_support^0 = 0 }
	set_variable = { BRZ_national_party_support^1 = 0 }
	set_variable = { BRZ_national_party_support^2 = 0 }
	set_variable = { BRZ_national_party_support^3 = 0 }
	set_variable = { BRZ_national_party_support^4 = 0 }
	set_variable = { BRZ_national_party_support^5 = 0 }
	set_variable = { BRZ_national_party_support^6 = 0 }
	
	set_variable = { BRZ_national_party_seats^0 = 0 }
	set_variable = { BRZ_national_party_seats^1 = 0 }
	set_variable = { BRZ_national_party_seats^2 = 0 }
	set_variable = { BRZ_national_party_seats^3 = 0 }
	set_variable = { BRZ_national_party_seats^4 = 0 }
	set_variable = { BRZ_national_party_seats^5 = 0 }
	set_variable = { BRZ_national_party_seats^6 = 0 }
	
	# Only core states vote
	every_core_state = {
	
		if = {
			limit = {
				PREV = {
					has_country_flag = BRZ_voting_fptp
				}
			}
			
			# Add to seats
			set_temp_variable = { temp_party_to_add = 0 }
			find_highest_in_array = {
				array = BRZ_local_party_support
				index = temp_party_to_add
			}
			
			add_to_variable = { PREV.BRZ_national_party_seats^temp_party_to_add = BRZ_local_state_seats }
		}
		
		for_each_loop = {
			array = BRZ_local_party_support
			value = party_support_local
			index = loop_index
			
			multiply_temp_variable = { party_support_local = state_population_k }
			add_to_variable = { PREV.BRZ_national_party_support^loop_index = party_support_local }
		}
		
		add_to_temp_variable = { total_votes = state_population_k }
	}
	
	if = {
		limit = {
			has_country_flag = BRZ_voting_proportional
		}
		
		for_each_loop = {
			array = BRZ_national_party_support
			value = national_party_support_value
			index = loop_index
			
			set_temp_variable = { proportional_seats = national_party_support_value }
			divide_temp_variable = { proportional_seats = 100 }
			round_temp_variable = proportional_seats
			add_to_variable = { BRZ_national_party_seats^loop_index = proportional_seats }
		}
	}
	
	divide_variable = { BRZ_national_party_support^0 = total_votes }
	divide_variable = { BRZ_national_party_support^1 = total_votes }
	divide_variable = { BRZ_national_party_support^2 = total_votes }
	divide_variable = { BRZ_national_party_support^3 = total_votes }
	divide_variable = { BRZ_national_party_support^4 = total_votes }
	divide_variable = { BRZ_national_party_support^5 = total_votes }
	divide_variable = { BRZ_national_party_support^6 = total_votes }
	
}

BRZ_set_new_socialist_prime_minister = {
	custom_effect_tooltip = BRZ_socialist_new_prime_minister_tt
	
	hidden_effect = {
		if = {
			limit = {
				has_character = TRD_genevieve_guildedwing
				NOT = { has_country_flag = BRZ_guildedwing_advisor }
				# BRZ_schuler_replaced_guildedwing does NOT need to be checked, because Guildedwing is retired in that case
			}
			add_advisor_role = {
				character = TRD_genevieve_guildedwing
				advisor = {
					slot = political_advisor
					cost = 150
					idea_token = BRZ_genevieve_guildedwing
					traits = {
						BRZ_social_democrat
					}
				}
			}
			
			TRD_genevieve_guildedwing = {
				set_can_be_fired_in_advisor_role = {
					slot = political_advisor
					value = no
				}
			}
			
			set_country_flag = BRZ_guildedwing_advisor
		}
		
		# fire copperhill
		if = {
			limit = {
				has_country_flag = BRZ_copperhill_advisor
			}
			if = {
				limit = {
					has_idea = BRZ_winston_copperhill
				}
				deactivate_advisor = BRZ_winston_copperhill
			}
			clr_country_flag = BRZ_copperhill_advisor # This character becomes invisible when this flag is not set			
		}
			
		# fire + remove his advisors
		if = {
			limit = {
				has_country_flag = BRZ_dawnfeather_advisor
			}
			if = {
				limit = {
					has_idea = BRZ_archibald_dawnfeather
				}
				deactivate_advisor = BRZ_archibald_dawnfeather
			}
			remove_advisor_role = {
				character = PYT_archibald_dawnfeather
				slot = political_advisor
			}
			clr_country_flag = BRZ_dawnfeather_advisor
		}
		if = {
			limit = {
				has_country_flag = BRZ_attaboy_advisor
			}
			if = {
				limit = {
					has_idea = BRZ_clement_attaboy
				}
				deactivate_advisor = BRZ_clement_attaboy
			}
			remove_advisor_role = {
				character = BRZ_clement_attaboy
				slot = political_advisor
			}
			clr_country_flag = BRZ_attaboy_advisor
		}
		
		# New Prime Minister
		if = {
			limit = {
				has_country_flag = BRZ_schuler_replaced_guildedwing
			}
			if = {
				limit = {
					NOT = { has_country_flag = BRZ_schuler_advisor }
				}
				every_possible_country = {
					limit = {
						has_character = YAL_georgina_fredrika_schuler
					}
					YAL_georgina_fredrika_schuler = {
						set_nationality = ROOT
						add_advisor_role = {
							advisor = {
								slot = political_advisor
								cost = 150
								idea_token = BRZ_georgina_fredrika_schuler
								traits = { YAL_Social_Democrat_chick_leader }
							}
						}
					}
					
					set_can_be_fired_in_advisor_role = {
						slot = political_advisor
						value = no
					}
				}
				set_country_flag = BRZ_schuler_advisor
			}
			activate_advisor = BRZ_georgina_fredrika_schuler
		}
		else = {
			# already defined earlier
			activate_advisor = BRZ_genevieve_guildedwing
		}
		
		meta_effect = {
			text = {
				set_politics = {
					ruling_party = democratic
					elections_allowed = yes
					last_election = "[DYNAMIC_DATE]"
					election_frequency = 60
					long_name = BRZ_democratic_party_empire_socialists_long
					name = BRZ_democratic_party_empire_socialists
				}
			}
			DYNAMIC_DATE = "[?global.date.GetDateStringNoHour]"
		}
	}
}

BRZ_set_new_conservative_prime_minister = {
	custom_effect_tooltip = BRZ_conservative_new_prime_minister_tt
	
	hidden_effect = {
		# fire guildedwing (prime minister)
		if = {
			limit = {
				has_country_flag = BRZ_guildedwing_advisor
			}
			if = {
				limit = {
					has_idea = BRZ_genevieve_guildedwing
				}
				deactivate_advisor = BRZ_genevieve_guildedwing
			}
			remove_advisor_role = {
				character = TRD_genevieve_guildedwing
				slot = political_advisor
			}
			clr_country_flag = BRZ_guildedwing_advisor
		}
		# fire + remove her advisors
		if = { # if she is/was prime minister, then don't remove her advisor role
			limit = {
				has_country_flag = BRZ_schuler_advisor
			}
			if = {
				limit = {
					has_idea = BRZ_georgina_fredrika_schuler
				}
				deactivate_advisor = BRZ_georgina_fredrika_schuler
			}
			remove_advisor_role = {
				character = YAL_georgina_fredrika_schuler
				slot = political_advisor
			}
			clr_country_flag = BRZ_schuler_advisor
		}
		if = {
			limit = {
				has_country_flag = BRZ_softfur_advisor
			}
			if = {
				limit = {
					has_idea = BRZ_rosey_softfur_advisor
				}
				deactivate_advisor = BRZ_rosey_softfur_advisor
			}
			remove_advisor_role = {
				character = BRZ_rosey_softfur
				slot = political_advisor
			}
			clr_country_flag = BRZ_softfur_advisor
		}
		
		set_country_flag = BRZ_copperhill_advisor # Copperhill becomes visible
		
		# New Prime Minister
		activate_advisor = BRZ_winston_copperhill
		
		meta_effect = {
			text = {
				set_politics = {
					ruling_party = democratic
					elections_allowed = yes
					last_election = "[DYNAMIC_DATE]"
					election_frequency = 60
					long_name = BRZ_democratic_party_empire
					name = BRZ_democratic_party_empire_long
				}
			}
			DYNAMIC_DATE = "[?global.date.GetDateStringNoHour]"
		}
	}
}

BRZ_calculate_governments = {
	set_temp_variable = { total_seats_var = 0 }
	
	for_each_loop = {
		array = BRZ_national_party_seats
		value = seat_number
		
		add_to_temp_variable = { total_seats_var = seat_number }
	}
	
	set_temp_variable = { majority = total_seats_var }
	divide_temp_variable = { majority = 2 }
	round_temp_variable = majority
	
	if = {
		limit = {
			check_variable = { BRZ_national_party_seats^0 > majority } # Conservative have a majority
		}
		set_country_flag = BRZ_conservative_government # Copperhill rules supreme
		set_country_flag = BRZ_conservative_agrarian_government # Agrarians can be integrated voluntarily
	}
	else_if = {
		limit = {
			check_variable = { BRZ_national_party_seats^4 > majority } # Socialists have a majority
		}
		set_country_flag = BRZ_socialist_government # Guildedwing rules supreme
		set_country_flag = BRZ_socialist_agrarian_government # Agrarians can be integrated voluntarily
	}
	else = {
		set_temp_variable = { conservative_agrarians = BRZ_national_party_seats^0 } # Conservatives
		add_to_temp_variable = { conservative_agrarians = BRZ_national_party_seats^1 } # + Conservative Agrarians
		
		set_temp_variable = { socialist_agrarians = BRZ_national_party_seats^4 } # Socialists
		add_to_temp_variable = { socialist_agrarians = BRZ_national_party_seats^2 } # Socialist Agrarians
		
		if = {
			limit = {
				check_variable = { conservative_agrarians > majority }
			}
			
			set_country_flag = BRZ_conservative_agrarian_government # Agrarians bring majority
		}
		else_if = {
			limit = {
				check_variable = { socialist_agrarians > majority }
			}
			
			set_country_flag = BRZ_socialist_agrarian_government # Agrarians bring majority
		}
		else = {
			set_temp_variable = { conservative_liberals = conservative_agrarians }
			add_to_temp_variable = { conservative_liberals = BRZ_national_party_seats^3 } # liberals
			
			set_temp_variable = { socialist_liberals = socialist_agrarians }
			add_to_temp_variable = { socialist_liberals = BRZ_national_party_seats^3 } # liberals
			
			set_temp_variable = { socialist_radicals = socialist_agrarians }
			add_to_temp_variable = { socialist_radicals = BRZ_national_party_seats^5 } # radicals
			
			if = {
				limit = {
					check_variable = { conservative_liberals > majority }
				}
				set_country_flag = BRZ_conservative_agrarian_liberal_government
			}
			if = {
				limit = {
					check_variable = { socialist_liberals > majority }
				}
				set_country_flag = BRZ_socialist_agrarian_liberal_government
			}
			if = {
				limit = {
					check_variable = { socialist_radicals > majority }
				}
				set_country_flag = BRZ_socialist_agrarian_radical_government
			}
			
			# No government can be formed
			if = {
				limit = {
					NOT = { has_country_flag = BRZ_conservative_agrarian_liberal_government }
					NOT = { has_country_flag = BRZ_socialist_agrarian_liberal_government }
					NOT = { has_country_flag = BRZ_socialist_agrarian_radical_government }
				}
				
				# Last measures
				set_temp_variable = { socialist_liberal_radical = socialist_liberals }
				add_to_temp_variable = { socialist_liberal_radical = BRZ_national_party_seats^5 } # radicals
				
				set_temp_variable = { conservative_regionalists = conservative_liberals }
				add_to_temp_variable = { conservative_regionalists = BRZ_national_party_seats^6 } # regionalists
				
				set_temp_variable = { socialist_regionalist = socialist_liberals }
				add_to_temp_variable = { socialist_regionalist = BRZ_national_party_seats^6 } # regionalists
				
				set_temp_variable = { socialist_radical_regionalist = socialist_radicals }
				add_to_temp_variable = { socialist_radical_regionalist = BRZ_national_party_seats^6 } # regionalists
				
				if = {
					limit = {
						check_variable = { socialist_liberal_radical > majority }
					}
					set_country_flag = BRZ_socialist_agrarian_liberal_radical_government
				}
				if = {
					limit = {
						check_variable = { conservative_regionalists > majority }
					}
					set_country_flag = BRZ_conservative_agrarian_liberal_regionalist_government
				}
				if = {
					limit = {
						check_variable = { socialist_regionalist > majority }
					}
					set_country_flag = BRZ_socialist_agrarian_liberal_regionalist_government
				}
				if = {
					limit = {
						check_variable = { socialist_radical_regionalist > majority }
					}
					set_country_flag = BRZ_socialist_agrarian_radical_regionalist_government
				}
			}
		}
	}
}

BRZ_clear_governments = {
	clr_country_flag = BRZ_conservative_government
	clr_country_flag = BRZ_conservative_agrarian_government
	clr_country_flag = BRZ_conservative_agrarian_liberal_government
	clr_country_flag = BRZ_conservative_agrarian_liberal_regionalist_government
	clr_country_flag = BRZ_socialist_government
	clr_country_flag = BRZ_socialist_agrarian_government
	clr_country_flag = BRZ_socialist_agrarian_radical_government
	clr_country_flag = BRZ_socialist_agrarian_liberal_government
	clr_country_flag = BRZ_socialist_agrarian_liberal_radical_government
	clr_country_flag = BRZ_socialist_agrarian_liberal_regionalist_government
	clr_country_flag = BRZ_socialist_agrarian_radical_regionalist_government
}

BRZ_clear_paranoia = {
	if = {
		limit = {
			check_variable = {
				BRZ_steelpaw_paranoia_val < 0
			}
		}
		set_variable = {
			BRZ_steelpaw_paranoia_val = 0
		}
	}
}

# To use, set temp variables BRZ_softfur_faction_influence_to_add to the value to add and 
# BRZ_softfur_faction_selector to 0 (theorist) 1 (syndicalist) or 2 (agrarian)
BRZ_softfur_add_faction_influence = {
	set_temp_variable = { BRZ_faction_influence_remove = BRZ_softfur_faction_influence_to_add }
	divide_temp_variable = { BRZ_faction_influence_remove = 2 }
	
	set_temp_variable = { BRZ_softfur_faction_influence_add = BRZ_softfur_faction_influence_to_add }
	multiply_temp_variable = { BRZ_softfur_faction_influence_add = 1.5 }
	
	subtract_from_variable = { BRZ_softfur_faction_influence^0 = BRZ_faction_influence_remove }
	subtract_from_variable = { BRZ_softfur_faction_influence^1 = BRZ_faction_influence_remove }
	subtract_from_variable = { BRZ_softfur_faction_influence^2 = BRZ_faction_influence_remove }
	
	add_to_variable = { BRZ_softfur_faction_influence^BRZ_softfur_faction_selector = BRZ_softfur_faction_influence_add }
	
	# Limit variables to be between 0 (0%) and 1 (100%)
	if = {
		limit = {
			check_variable = { BRZ_softfur_faction_influence^0 < 0  }
		}
		set_temp_variable = { BRZ_overshoot_value = BRZ_softfur_faction_influence^0 }
		multiply_temp_variable = { BRZ_overshoot_value = -1 }
		set_variable = { BRZ_softfur_faction_influence^0 = 0 }
		divide_temp_variable = { BRZ_overshoot_value = 2 }
		if = {
			limit = {
				check_variable = { BRZ_softfur_faction_influence^1 < BRZ_overshoot_value }
			}
			set_variable = { BRZ_softfur_faction_influence^1 = 0 }
			set_variable = { BRZ_softfur_faction_influence^2 = 1 }
		}
		else_if = {
			limit = {
				check_variable = { BRZ_softfur_faction_influence^2 < BRZ_overshoot_value }
			}
			set_variable = { BRZ_softfur_faction_influence^2 = 0 }
			set_variable = { BRZ_softfur_faction_influence^1 = 1 }
		}
		else = {
			subtract_from_variable = { BRZ_softfur_faction_influence^1 = BRZ_overshoot_value }
			subtract_from_variable = { BRZ_softfur_faction_influence^2 = BRZ_overshoot_value }
		}
	}
	if = {
		limit = {
			check_variable = { BRZ_softfur_faction_influence^1 < 0  }
		}
		set_temp_variable = { BRZ_overshoot_value = BRZ_softfur_faction_influence^1 }
		multiply_temp_variable = { BRZ_overshoot_value = -1 }
		set_variable = { BRZ_softfur_faction_influence^1 = 0 }
		divide_temp_variable = { BRZ_overshoot_value = 2 }
		if = {
			limit = {
				check_variable = { BRZ_softfur_faction_influence^0 < BRZ_overshoot_value }
			}
			set_variable = { BRZ_softfur_faction_influence^0 = 0 }
			set_variable = { BRZ_softfur_faction_influence^2 = 1 }
		}
		else_if = {
			limit = {
				check_variable = { BRZ_softfur_faction_influence^2 < BRZ_overshoot_value }
			}
			set_variable = { BRZ_softfur_faction_influence^2 = 0 }
			set_variable = { BRZ_softfur_faction_influence^0 = 1 }
		}
		else = {
			subtract_from_variable = { BRZ_softfur_faction_influence^0 = BRZ_overshoot_value }
			subtract_from_variable = { BRZ_softfur_faction_influence^2 = BRZ_overshoot_value }
		}
	}
	if = {
		limit = {
			check_variable = { BRZ_softfur_faction_influence^2 < 0  }
		}
		set_temp_variable = { BRZ_overshoot_value = BRZ_softfur_faction_influence^2 }
		multiply_temp_variable = { BRZ_overshoot_value = -1 }
		set_variable = { BRZ_softfur_faction_influence^2 = 0 }
		divide_temp_variable = { BRZ_overshoot_value = 2 }
		if = {
			limit = {
				check_variable = { BRZ_softfur_faction_influence^0 < BRZ_overshoot_value }
			}
			set_variable = { BRZ_softfur_faction_influence^0 = 0 }
			set_variable = { BRZ_softfur_faction_influence^1 = 1 }
		}
		else_if = {
			limit = {
				check_variable = { BRZ_softfur_faction_influence^1 < BRZ_overshoot_value }
			}
			set_variable = { BRZ_softfur_faction_influence^1 = 0 }
			set_variable = { BRZ_softfur_faction_influence^0 = 1 }
		}
		else = {
			subtract_from_variable = { BRZ_softfur_faction_influence^0 = BRZ_overshoot_value }
			subtract_from_variable = { BRZ_softfur_faction_influence^1 = BRZ_overshoot_value }
		}
	}
	
	BRZ_softfur_factions_recalculate_effects = yes
}

BRZ_softfur_factions_recalculate_effects = {
	# Theorist
	set_variable = { BRZ_softfur_factions_research_speed = BRZ_softfur_faction_influence^0 }
	multiply_variable = { BRZ_softfur_factions_research_speed = 0.15 }
	if = {
		limit = {
			has_country_flag = BRZ_softfur_theorist_buff_active
		}
		multiply_variable = { BRZ_softfur_factions_research_speed = 1.5 }
	}
	set_variable = { BRZ_softfur_factions_max_eff = BRZ_softfur_faction_influence^0 }
	multiply_variable = { BRZ_softfur_factions_max_eff = 0.15 }
	set_variable = { BRZ_softfur_factions_political_power = BRZ_softfur_faction_influence^0 }
	multiply_variable = { BRZ_softfur_factions_political_power = 0.3 }
	# Syndicalist
	set_variable = { BRZ_softfur_factions_output = BRZ_softfur_faction_influence^1 }
	multiply_variable = { BRZ_softfur_factions_output = 0.25 }
	if = {
		limit = {
			has_country_flag = BRZ_softfur_syndicalist_buff_active
		}
		multiply_variable = { BRZ_softfur_factions_output = 1.5 }
	}
	set_variable = { BRZ_softfur_factions_war_support = BRZ_softfur_faction_influence^1 }
	multiply_variable = { BRZ_softfur_factions_war_support = 0.2 }
	# Agrarian
	set_variable = { BRZ_softfur_factions_monthly_pop = BRZ_softfur_faction_influence^2 }
	multiply_variable = { BRZ_softfur_factions_monthly_pop = 0.2 }
	set_variable = { BRZ_softfur_factions_resources = BRZ_softfur_faction_influence^2 }
	multiply_variable = { BRZ_softfur_factions_resources = 0.25 }
	if = {
		limit = {
			has_country_flag = BRZ_softfur_agrarian_buff_active
		}
		multiply_variable = { BRZ_softfur_factions_resources = 1.5 }
	}
	set_variable = { BRZ_softfur_factions_stability = BRZ_softfur_faction_influence^2 }
	multiply_variable = { BRZ_softfur_factions_stability = 0.2 }
}

BRZ_recalculate_baselines = {
	set_variable = { BRZ_softfur_faction_influence_baseline^0 = 0.35 }
	set_variable = { BRZ_softfur_faction_influence_baseline^1 = 0.35 }
	set_variable = { BRZ_softfur_faction_influence_baseline^2 = 0.3 }
	
	if = {
		limit = {
			has_idea = BRZ_clara_woofingheart
		}
		add_to_variable = { BRZ_softfur_faction_influence_baseline^0 = 0.1 }
		add_to_variable = { BRZ_softfur_faction_influence_baseline^1 = -0.05 }
		add_to_variable = { BRZ_softfur_faction_influence_baseline^2 = -0.05 }
	}
	if = {
		limit = {
			has_idea = BRZ_gustav_graurabe
		}
		add_to_variable = { BRZ_softfur_faction_influence_baseline^0 = 0.1 }
		add_to_variable = { BRZ_softfur_faction_influence_baseline^1 = -0.05 }
		add_to_variable = { BRZ_softfur_faction_influence_baseline^2 = -0.05 }
	}
	if = {
		limit = {
			has_idea = BRZ_tiger_cappoodle
		}
		add_to_variable = { BRZ_softfur_faction_influence_baseline^0 = -0.05 }
		add_to_variable = { BRZ_softfur_faction_influence_baseline^1 = 0.1 }
		add_to_variable = { BRZ_softfur_faction_influence_baseline^2 = -0.05 }
	}
	if = {
		limit = {
			has_idea = BRZ_gerben_kogchel
		}
		add_to_variable = { BRZ_softfur_faction_influence_baseline^0 = -0.05 }
		add_to_variable = { BRZ_softfur_faction_influence_baseline^1 = 0.1 }
		add_to_variable = { BRZ_softfur_faction_influence_baseline^2 = -0.05 }
	}
	if = {
		limit = {
			has_idea = BRZ_vitalius_moonbill
		}
		add_to_variable = { BRZ_softfur_faction_influence_baseline^0 = -0.05 }
		add_to_variable = { BRZ_softfur_faction_influence_baseline^1 = -0.05 }
		add_to_variable = { BRZ_softfur_faction_influence_baseline^2 = 0.1 }
	}
	if = {
		limit = {
			has_idea = BRZ_rosemarie_fruhling
		}
		add_to_variable = { BRZ_softfur_faction_influence_baseline^0 = -0.05 }
		add_to_variable = { BRZ_softfur_faction_influence_baseline^1 = -0.05 }
		add_to_variable = { BRZ_softfur_faction_influence_baseline^2 = 0.1 }
	}
}

BRZ_upgrade_knights_technology = {
	if = {
		limit = { # Highest level, make some default
			has_tech = tech_knights_c
		}
		army_experience = 20
	}
	else_if = {
		limit = {
			has_tech = tech_knights_b
		}
		set_technology = {
			tech_knights_c = 1
		}
	}
	else_if = {
		limit = {
			has_tech = tech_knights_a
		}
		set_technology = {
			tech_knights_b = 1
		}
	}
	else_if = {
		limit = {
			has_tech = tech_knights3
		}
		set_technology = {
			tech_knights_a = 1
		}
	}
	else_if = {
		limit = {
			OR = {
				has_tech = tech_knights_regular2
				has_tech = tech_knights_magical2
			}
		}
		set_technology = {
			tech_knights3 = 1
		}
	}
	else_if = {
		limit = {
			has_tech = tech_knights_regular
		}
		set_technology = {
			tech_knights_regular2 = 1
		}
	}
	else_if = {
		limit = {
			has_tech = tech_knights_magical
		}
		set_technology = {
			tech_knights_magical2 = 1
		}
	}
	else_if = {
		limit = {
			has_tech = tech_knights2
		}
		if = {
			limit = {
				has_country_flag = BRZ_research_knights_noble
			}
			set_technology = {
				tech_knights_magical = 1
			}
		}
		else = {
			set_technology = {
				tech_knights_regular = 1
			}
		}
	}
	else_if = {
		limit = {
			has_tech = tech_knights
		}
		set_technology = {
			tech_knights2 = 1
		}
	}
	else = {
		set_technology = {
			tech_knights = 1
		}
	}
}

BRZ_puppeted_by_grover_ii = {
	# Load the flavour focus tree - keep_completed for Industry/Army trees
	load_focus_tree = {
		tree = bronzehill_grover_ii_tree
		keep_completed = yes
	}
	
	# If Powerstruggle, end immediately - Ignatius stays in Power
	if = {
		limit = {
			has_idea = BRZ_powerstruggle_in_the_council
		}
		remove_ideas = BRZ_powerstruggle_in_the_council
		
		remove_mission = BRZ_council_timeout_mission
		remove_mission = BRZ_copperhill_influence_mission
		remove_mission = BRZ_loudbark_influence_mission
		if = {
			limit = {
				has_country_flag = BRZ_softfur_in_the_council
			}
			remove_mission = BRZ_softfur_influence_mission
		} else = {
			remove_mission = BRZ_steelpaw_influence_mission
		}
		
		add_popularity = {
			ideology = neutrality
			popularity = 0.1
		}
	}
	
	# Remove maluses that would be removed by the now unavailable focus tree
	if = {
		limit = {
			has_idea = BRZ_disloyal_army
		}
		remove_ideas = BRZ_disloyal_army
	}
	if = {
		limit = {
			has_idea = BRZ_socialist_agitation
		}
		remove_ideas = BRZ_socialist_agitation
	}
	if = {
		limit = {
			has_idea = BRZ_lingering_socialist_agitation
		}
		remove_ideas = BRZ_lingering_socialist_agitation
	}
	if = {
		limit = {
			has_idea = BRZ_unrest_in_academia
		}
		remove_ideas = BRZ_unrest_in_academia
	}
	if = {
		limit = {
			has_idea = BRZ_hostile_ignatius
		}
		remove_ideas = BRZ_hostile_ignatius
	}
	if = {
		limit = {
			has_idea = BRZ_hostile_bronzehill_council
		}
		remove_ideas = BRZ_hostile_bronzehill_council
	}
}

BRZ_update_fervour = {
	set_variable = { BRZ_revenge_fervour_manpower = BRZ_revenge_army_fervour }
	multiply_variable = { BRZ_revenge_fervour_manpower = 75 }
	set_variable = { BRZ_revenge_fervour_morale = BRZ_revenge_army_fervour }
	multiply_variable = { BRZ_revenge_fervour_morale = 0.01 }
}

BRZ_initialize_triumph = {
	set_variable = { BRZ_revenge_triumph_cons_goods = 0 }
	set_variable = { BRZ_revenge_triumph_trade_opinion = 0}
	set_variable = { BRZ_revenge_triumph_stability = 0}
	set_variable = { BRZ_revenge_triumph_research_speed = 0}
	set_variable = { BRZ_revenge_triumph_pol_power = 0}
	set_variable = { BRZ_revenge_triumph_resistance_growth = 0}
	set_variable = { BRZ_revenge_triumph_ind_cap_dock = 0}
	set_variable = { BRZ_revenge_triumph_army_speed = 0}
	set_variable = { BRZ_revenge_triumph_ind_cap_fac = 0}
	set_variable = { BRZ_revenge_triumph_army_org = 0}
	set_variable = { BRZ_revenge_triumph_army_morale = 0 }
	
	add_dynamic_modifier = {
		modifier = BRZ_triumph_for_griffonia
	}
}

# The normal wargoals become unavailable upon the coronation, so on the off-chance that the player hasn't completed the regency tree, they get this
BRZ_coronation_fallback_claims_and_cores_effect = {
	# All tags that Bronzehill can integrate, excluding Herzland (integrated by declaration of regency, and without regency no coronation)
	TRD = { BRZ_claims_and_cores_effect = yes }
	FAT = { BRZ_claims_and_cores_effect = yes }
	FAW = { BRZ_claims_and_cores_effect = yes }
	VED = { BRZ_claims_and_cores_effect = yes }
	SRS = { BRZ_claims_and_cores_effect = yes }
	MNC = { BRZ_claims_and_cores_effect = yes }
	FEZ = { BRZ_claims_and_cores_effect = yes }
	AET = { BRZ_claims_and_cores_effect = yes }
	HEL = { BRZ_claims_and_cores_effect = yes }
	JER = { BRZ_claims_and_cores_effect = yes }
	JEB = { BRZ_claims_and_cores_effect = yes }
	JRR = { BRZ_claims_and_cores_effect = yes }
	VIN = { BRZ_claims_and_cores_effect = yes }
	JFT = { BRZ_claims_and_cores_effect = yes }
	POM = { BRZ_claims_and_cores_effect = yes }
	FLO = { BRZ_claims_and_cores_effect = yes }
	AVI = { BRZ_claims_and_cores_effect = yes }
	ERI = { BRZ_claims_and_cores_effect = yes }
	EYR = { BRZ_claims_and_cores_effect = yes }
	BOI = { BRZ_claims_and_cores_effect = yes }
	LAK = { BRZ_claims_and_cores_effect = yes }
	BAN = { BRZ_claims_and_cores_effect = yes }
	ARA = { BRZ_claims_and_cores_effect = yes }
	FRN = { BRZ_claims_and_cores_effect = yes }
	TAL = { BRZ_claims_and_cores_effect = yes }
	WNG = { BRZ_claims_and_cores_effect = yes }
	FAL = { BRZ_claims_and_cores_effect = yes }
	SIC = { BRZ_claims_and_cores_effect = yes }
	CYA = { BRZ_claims_and_cores_effect = yes }
	BAN = { BRZ_claims_and_cores_effect = yes }
	GRW = { BRZ_claims_and_cores_effect = yes }
	BRF = { BRZ_claims_and_cores_effect = yes }
	LUS = { BRZ_claims_and_cores_effect = yes }
	HLQ = { BRZ_claims_and_cores_effect = yes }
	LNS = { BRZ_claims_and_cores_effect = yes }
	LSM = { BRZ_claims_and_cores_effect = yes }
	LSC = { BRZ_claims_and_cores_effect = yes }
	GRY = { BRZ_claims_and_cores_effect = yes }
	GRU = { BRZ_claims_and_cores_effect = yes }
	DMT = { BRZ_claims_and_cores_effect = yes }
}

BRZ_claims_and_cores_effect = {
	add_to_ROOT_potential_cores = yes
	every_core_state = {
		limit = {
			NOT = { is_core_of = ROOT }
		}
		add_claim_by = ROOT
	}
}