###########################
# POLITICAL UNREST EFFECTS
###########################

# Effect to get the total number of states susceptible to unrest modifiers
MGY_Unrest_GetNumberOfPossibleStates_effect = {
	set_variable = {
		MGY_OwnedStates_var = 0
	}
	hidden_effect = {
		every_owned_state = {
			limit = {
				impassable = no
			}
			owner = {
				add_to_variable = {
					MGY_OwnedStates_var = 1
				}
			}
		}
	}
}

#Effect to sum up the total unrest in the country
MGY_Unrest_GetTotalSum_effect = {
	set_variable = {
		MGY_TotalUnrest_var = 0
	}
	hidden_effect = {
		every_owned_state = {
			limit = {
				impassable = no
				has_dynamic_modifier = {
					modifier = MGY_MODIFIER_LocalUnrest_Dynmod
				}
			}
			owner = {
				add_to_variable = {
					MGY_TotalUnrest_var = PREV.MGY_StateUnrest_var
				}
			}
		}
	}
}

#Effect to get the mean total unrest in the country
MGY_Unrest_GetAverage_effect = {
	MGY_Unrest_GetNumberOfPossibleStates_effect = yes
	MGY_Unrest_GetTotalSum_effect = yes
	set_variable = {
		MGY_Unrest_Average_var = 0
	}
	add_to_variable = {
		MGY_Unrest_Average_var = MGY_TotalUnrest_var
	}
	divide_variable = {
		MGY_Unrest_Average_var = MGY_OwnedStates_var
	}
	set_variable = {
		MGY_Unrest_DoubleAverage_var = MGY_Unrest_Average_var
	}
	multiply_variable = {
		MGY_Unrest_DoubleAverage_var = 2
	}
	log = "[GetDateText] SOTN: Recalculating average unrest out of [?ROOT.MGY_OwnedStates_var] possible states: [?ROOT.MGY_Unrest_Average_var]"
}

#Effect to get the impact of the average unrest on the country, as variables
MGY_Unrest_GetImpact_effect = {
	set_variable = {
		MGY_UnrestImpact_var = MGY_Unrest_Average_var
	}
	divide_variable = {
		MGY_UnrestImpact_var = -100
	}
	set_variable = {
		MGY_UnrestImpactSmall_var = MGY_UnrestImpact_var
	}
	divide_variable = {
		MGY_UnrestImpactSmall_var = 2
	}
}

#Effect to handle state control change for unrest modifiers
MGY_Unrest_onStateOwnershipChange_effect = {
	if = {
		limit = {
			ROOT = {
				has_idea = MGY_PoliticalUnrest
			}
			FROM.FROM = {
				NOT = {
					has_dynamic_modifier = {
						modifier = MGY_MODIFIER_LocalUnrest_Dynmod
					}
				}
				NOT = {
					has_state_flag = MGY_Unrest_PacifiedState_flag
				}
				check_variable = {
					MGY_StateUnrest_var = 1
					compare = greater_than_or_equals
				}
				impassable = no
			}
		}
		FROM.FROM = {	
			log = "[GetDateText] SOTN: Re-enabling unrest modifier in [THIS.GetName], with an unrest value of [?THIS.MGY_StateUnrest_var]."
			add_dynamic_modifier = {
				modifier = MGY_MODIFIER_LocalUnrest_Dynmod
			}
		}
	}
	else_if = {
		limit = {
			NOT = {
				has_idea = MGY_PoliticalUnrest
			}
			FROM.FROM = {
				has_dynamic_modifier = {
					modifier = MGY_MODIFIER_LocalUnrest_Dynmod
				}
				impassable = no
			}
		}
		FROM.FROM = {
			log = "[GetDateText] SOTN: Removing unrest modifier from [THIS.GetName]"
			remove_dynamic_modifier = {
				modifier = MGY_MODIFIER_LocalUnrest_Dynmod
			}
		}
	}
}


# Effects to add unrest to a state (increments are 2, 5 and 10)
# Needs to be nested within a state for it to work

MGY_IncreaseStateUnrest_small_effect = { #Small unrest increase (2)
	log = "[GetDateText] SOTN: Increasing unrest in [THIS.GetName] by 10."
	custom_effect_tooltip = MGY_IncreaseStateUnrest_small_tt
	hidden_effect = {
		if = {
			limit = {
				NOT = {
					has_dynamic_modifier = {
						modifier = MGY_MODIFIER_LocalUnrest_Dynmod
					}
				}
			}
			add_dynamic_modifier = {
				modifier = MGY_MODIFIER_LocalUnrest_Dynmod
			}
		}
	}
	add_to_variable = {
		MGY_StateUnrest_var = 2
	}
	clamp_variable = {
		var = MGY_StateUnrest_var
		min = 1 #Unrest should always remain present
		max = 100 #Unrest should never get over 100
	}
	add_to_variable = { #Add to new variable, extract it, multiply it by -200 to get the proper value for the modifier
		MGY_StateUnrestImpact_var = MGY_StateUnrest_var
	}
	divide_variable = {
		MGY_StateUnrestImpact_var = -100
	}
	owner = { #Recalculate the Average unrest and dependent variable for the country itself
		MGY_Unrest_GetAverage_effect = yes
		MGY_Unrest_GetImpact_effect = yes
	}
}


MGY_IncreaseStateUnrest_medium_effect = { #Medium unrest increase (5)
	log = "[GetDateText] SOTN: Increasing unrest in [THIS.GetName] by 10."
	custom_effect_tooltip = MGY_IncreaseStateUnrest_medium_tt
	hidden_effect = {
		if = {
			limit = {
				NOT = {
					has_dynamic_modifier = {
						modifier = MGY_MODIFIER_LocalUnrest_Dynmod
					}
				}
			}
			add_dynamic_modifier = {
				modifier = MGY_MODIFIER_LocalUnrest_Dynmod
			}
		}
	}
	add_to_variable = {
		MGY_StateUnrest_var = 5
	}
	clamp_variable = {
		var = MGY_StateUnrest_var
		min = 1 #Unrest should always remain present
		max = 100 #Unrest should never get over 100
	}
	add_to_variable = { #Add to new variable, extract it, multiply it by -200 to get the proper value for the modifier
		MGY_StateUnrestImpact_var = MGY_StateUnrest_var
	}
	divide_variable = {
		MGY_StateUnrestImpact_var = -100
	}
	owner = { #Recalculate the Average unrest and dependent variable for the country itself
		MGY_Unrest_GetAverage_effect = yes
		MGY_Unrest_GetImpact_effect = yes
	}
}

MGY_IncreaseStateUnrest_large_effect = { #Large unrest increase (10)
	log = "[GetDateText] SOTN: Increasing unrest in [THIS.GetName] by 10."
	custom_effect_tooltip = MGY_IncreaseStateUnrest_large_tt
	hidden_effect = {
		if = {
			limit = {
				NOT = {
					has_dynamic_modifier = {
						modifier = MGY_MODIFIER_LocalUnrest_Dynmod
					}
				}
			}
			add_dynamic_modifier = {
				modifier = MGY_MODIFIER_LocalUnrest_Dynmod
			}
		}
	}
	add_to_variable = {
		MGY_StateUnrest_var = 10
	}
	clamp_variable = {
		var = MGY_StateUnrest_var
		min = 1 #Unrest should always remain present
		max = 100 #Unrest should never get over 100
	}
	add_to_variable = { #Add to new variable, extract it, multiply it by -200 to get the proper value for the modifier
		MGY_StateUnrestImpact_var = MGY_StateUnrest_var
	}
	divide_variable = {
		MGY_StateUnrestImpact_var = -100
	}
	owner = { #Recalculate the Average unrest and dependent variable for the country itself
		MGY_Unrest_GetAverage_effect = yes
		MGY_Unrest_GetImpact_effect = yes
	}
}

# Effects to lower unrest to a state (increments are -2, -5 and -10)
# Needs to be nested within a state for it to work

MGY_DecreaseStateUnrest_small_effect = { #Small unrest decrease (-2)
	log = "[GetDateText] SOTN: Decreasing unrest in [THIS.GetName] by -2."
	custom_effect_tooltip = MGY_DecreaseStateUnrest_small_tt
	hidden_effect = {
		if = {
			limit = {
				NOT = {
					has_dynamic_modifier = {
						modifier = MGY_MODIFIER_LocalUnrest_Dynmod
					}
				}
			}
			add_dynamic_modifier = {
				modifier = MGY_MODIFIER_LocalUnrest_Dynmod
			}
		}
	}
	add_to_variable = {
		MGY_StateUnrest_var = -2
	}
	clamp_variable = {
		var = MGY_StateUnrest_var
		min = 1 #Unrest should always remain present
		max = 100 #Unrest should never get over 100
	}
	add_to_variable = { #Add to new variable, extract it, multiply it by -200 to get the proper value for the modifier
		MGY_StateUnrestImpact_var = MGY_StateUnrest_var
	}
	divide_variable = {
		MGY_StateUnrestImpact_var = -100
	}
	owner = { #Recalculate the Average unrest and dependent variable for the country itself
		MGY_Unrest_GetAverage_effect = yes
		MGY_Unrest_GetImpact_effect = yes
	}
}


MGY_DecreaseStateUnrest_medium_effect = { #Medium unrest decrease (-5)
	log = "[GetDateText] SOTN: Decreasing unrest in [THIS.GetName] by -5."
	custom_effect_tooltip = MGY_DecreaseStateUnrest_medium_tt
	hidden_effect = {
		if = {
			limit = {
				NOT = {
					has_dynamic_modifier = {
						modifier = MGY_MODIFIER_LocalUnrest_Dynmod
					}
				}
			}
			add_dynamic_modifier = {
				modifier = MGY_MODIFIER_LocalUnrest_Dynmod
			}
		}
	}
	add_to_variable = {
		MGY_StateUnrest_var = -5
	}
	clamp_variable = {
		var = MGY_StateUnrest_var
		min = 1 #Unrest should always remain present
		max = 100 #Unrest should never get over 100
	}
	add_to_variable = { #Add to new variable, extract it, multiply it by -200 to get the proper value for the modifier
		MGY_StateUnrestImpact_var = MGY_StateUnrest_var
	}
	divide_variable = {
		MGY_StateUnrestImpact_var = -100
	}
	owner = { #Recalculate the Average unrest and dependent variable for the country itself
		MGY_Unrest_GetAverage_effect = yes
		MGY_Unrest_GetImpact_effect = yes
	}
}

MGY_DecreaseStateUnrest_large_effect = { #Large unrest decrease (-10)
	log = "[GetDateText] SOTN: Decreasing unrest in [THIS.GetName] by -10."
	custom_effect_tooltip = MGY_DecreaseStateUnrest_large_tt
	hidden_effect = {
		if = {
			limit = {
				NOT = {
					has_dynamic_modifier = {
						modifier = MGY_MODIFIER_LocalUnrest_Dynmod
					}
				}
			}
			add_dynamic_modifier = {
				modifier = MGY_MODIFIER_LocalUnrest_Dynmod
			}
		}
	}
	add_to_variable = {
		MGY_StateUnrest_var = -10
	}
	clamp_variable = {
		var = MGY_StateUnrest_var
		min = 1 #Unrest should always remain present
		max = 100 #Unrest should never get over 100
	}
	add_to_variable = { #Add to new variable, extract it, multiply it by -200 to get the proper value for the modifier
		MGY_StateUnrestImpact_var = MGY_StateUnrest_var
	}
	divide_variable = {
		MGY_StateUnrestImpact_var = -100
	}
	owner = { #Recalculate the Average unrest and dependent variable for the country itself
		MGY_Unrest_GetAverage_effect = yes
		MGY_Unrest_GetImpact_effect = yes
	}
}

#Master effect to enable and setup the urnest mechanics - not all states start with unrest
MGY_UnrestStartup_effect = {
	740 = {
		log = "[GetDateText] SOTN: Enabling unrest in setup for the state of [THIS.GetName]."
		add_dynamic_modifier = {
			modifier = MGY_MODIFIER_LocalUnrest_Dynmod
		}
		set_variable = {
			MGY_StateUnrest_var = 20
		}
		set_variable = {
			MGY_StateUnrestImpact_var = -0.2
		}
	}
	738 = {
		log = "[GetDateText] SOTN: Enabling unrest in setup for the state of [THIS.GetName]."
		add_dynamic_modifier = {
			modifier = MGY_MODIFIER_LocalUnrest_Dynmod
		}
		set_variable = {
			MGY_StateUnrest_var = 20
		}
		set_variable = {
			MGY_StateUnrestImpact_var = -0.2
		}
	}
	735 = {
		log = "[GetDateText] SOTN: Enabling unrest in setup for the state of [THIS.GetName]."
		add_dynamic_modifier = {
			modifier = MGY_MODIFIER_LocalUnrest_Dynmod
		}
		set_variable = {
			MGY_StateUnrest_var = 15
		}
		set_variable = {
			MGY_StateUnrestImpact_var = -0.15
		}
	}
	758 = {
		log = "[GetDateText] SOTN: Enabling unrest in setup for the state of [THIS.GetName]."
		add_dynamic_modifier = {
			modifier = MGY_MODIFIER_LocalUnrest_Dynmod
		}
		set_variable = {
			MGY_StateUnrest_var = 10
		}
		set_variable = {
			MGY_StateUnrestImpact_var = -0.1
		}
	}
	759 = {
		log = "[GetDateText] SOTN: Enabling unrest in setup for the state of [THIS.GetName]."
		add_dynamic_modifier = {
			modifier = MGY_MODIFIER_LocalUnrest_Dynmod
		}
		set_variable = {
			MGY_StateUnrest_var = 10
		}
		set_variable = {
			MGY_StateUnrestImpact_var = -0.1
		}
	}
	760 = {
		log = "[GetDateText] SOTN: Enabling unrest in setup for the state of [THIS.GetName]."
		add_dynamic_modifier = {
			modifier = MGY_MODIFIER_LocalUnrest_Dynmod
		}
		set_variable = {
			MGY_StateUnrest_var = 15
		}
		set_variable = {
			MGY_StateUnrestImpact_var = -0.15
		}
	}
	761 = {
		log = "[GetDateText] SOTN: Enabling unrest in setup for the state of [THIS.GetName]."
		add_dynamic_modifier = {
			modifier = MGY_MODIFIER_LocalUnrest_Dynmod
		}
		set_variable = {
			MGY_StateUnrest_var = 15
		}
		set_variable = {
			MGY_StateUnrestImpact_var = -0.15
		}
	}
	763 = {
		log = "[GetDateText] SOTN: Enabling unrest in setup for the state of [THIS.GetName]."
		add_dynamic_modifier = {
			modifier = MGY_MODIFIER_LocalUnrest_Dynmod
		}
		set_variable = {
			MGY_StateUnrest_var = 10
		}
		set_variable = {
			MGY_StateUnrestImpact_var = -0.1
		}
	}
	766 = {
		log = "[GetDateText] SOTN: Enabling unrest in setup for the state of [THIS.GetName]."
		add_dynamic_modifier = {
			modifier = MGY_MODIFIER_LocalUnrest_Dynmod
		}
		set_variable = {
			MGY_StateUnrest_var = 10
		}
		set_variable = {
			MGY_StateUnrestImpact_var = -0.1
		}
	}
	770 = {
		log = "[GetDateText] SOTN: Enabling unrest in setup for the state of [THIS.GetName]."
		add_dynamic_modifier = {
			modifier = MGY_MODIFIER_LocalUnrest_Dynmod
		}
		set_variable = {
			MGY_StateUnrest_var = 15
		}
		set_variable = {
			MGY_StateUnrestImpact_var = -0.15
		}
	}
	MGY_Unrest_GetAverage_effect = yes
	MGY_Unrest_GetImpact_effect = yes
	add_dynamic_modifier = {
		modifier = MGY_PoliticalUnrest_Dynmod
	}
}

###########################
# Legacy of the Storm Change
###########################

MGY_Misc_DealWithStorm_effect = {
	if = {
		limit = {
			OR = {
				has_idea = MGY_legacy_of_storm1
				has_idea = MGY_legacy_of_storm2
				has_idea = MGY_legacy_of_storm3
			}
		}
		custom_effect_tooltip = MGY_StormEffectsWillLower_tt
		if = {
			limit = {
				NOT = {
					has_completed_focus = MGY_EconomyDevelopment
				}
			}
		}
		else_if = {
			limit = {
				has_completed_focus = MGY_EconomyDevelopment
				has_idea = MGY_legacy_of_storm1
				check_variable = {
					var = MGY_LegacyOfStormCounter_var
					value = 400
					compare = less_than
				}
			}
			remove_ideas = MGY_legacy_of_storm1
			add_timed_idea = {
				idea = MGY_legacy_of_storm2
				days = MGY_LegacyOfStormCounter_var
			}
			#
			country_event = MGY_FocusEconomy.21	}
		else_if = {
			limit = {
				has_completed_focus = MGY_EconomyDevelopment
				has_idea = MGY_legacy_of_storm2
				check_variable = {
					var = MGY_LegacyOfStormCounter_var
					value = 200
					compare = less_than
				}
			}
			remove_ideas = MGY_legacy_of_storm2
			add_timed_idea = {
				idea = MGY_legacy_of_storm3
				days = MGY_LegacyOfStormCounter_var
			}
			#
			country_event = MGY_FocusEconomy.22		}
		else_if = {
			limit = {
				has_completed_focus = MGY_EconomyDevelopment
				has_idea = MGY_legacy_of_storm3
				check_variable = {
					var = MGY_LegacyOfStormCounter_var
					value = 1
					compare = less_than
				}
			}
			remove_ideas = MGY_legacy_of_storm3
			#
			country_event = MGY_FocusEconomy.23
		}
	}
	else = {
		
	}
}

###########################
# Granry of Zebrica Effects
###########################

MGY_Granary_Setup_effect = {
	set_variable = {
		MGY_Grain_var = 250
	}
	set_variable = {
		MGY_GranaryPolCost_var = 35
	}
	set_variable = {
		MGY_GranaryPonypowerSmallCost_var = 1000
	}
	set_variable = {
		MGY_GranaryPonypowerLargeCost_var = 2500
	}
	add_dynamic_modifier = {
		modifier = MGY_GranaryOfZebrica_Dynmod
	}
	add_dynamic_modifier = {
		modifier = MGY_GranaryFoodImport_Dynmod
	}
	set_variable = {
		MGY_MarketDecision_var = 1
	}
	set_variable = {
		MGY_ProductionDecision_var = 1
	}
	# Build the farms available at the start
	735 = { #Manephis
		add_building_construction = {
			type = MGY_Farms
			level = 1
			province = 10184
		}
		add_building_construction = {
			type = MGY_Granary
			level = 2
			province = 10184
		}
		add_building_construction = {
			type = MGY_Farms
			level = 2
			province = 10263
		}
		add_building_construction = {
			type = MGY_Farms
			level = 1
			province = 10214
		}
	}
	736 = { #Hayxor
		add_building_construction = {
			type = MGY_Farms
			level = 2
			province = 8250
		}
		add_building_construction = {
			type = MGY_Farms
			level = 2
			province = 10300
		}
	}
	734 = { #Rathep
		add_building_construction = {
			type = MGY_Farms
			level = 2
			province = 7269
		}
	}
	# Calcluate the "real" variables
	MGY_Granary_CalcPercentageGain_effect = yes
	MGY_Granary_CalcPercentageMax_effect = yes
}

MGY_Granary_CalcPercentageGain_effect = { #Updates the real food gain: MGY_Grain_increase_var x ( MGY_Grain_increase_factor_var + 1) = MGY_WeeklyFoodChange_var
	# Fetch the Variables
	set_temp_variable = {
		# base food gain
		MGY_Grain_increase_tempvar = modifier@MGY_Grain_increase_modifier
	}
	set_temp_variable = {
		# percentage
		MGY_Grain_increase_factor_tempvar = modifier@MGY_Grain_increase_factor_modifier
	}
	add_to_temp_variable = {
		#Adjust for multiplier
		MGY_Grain_increase_factor_tempvar = 1
	}
	multiply_temp_variable = {
		# Multiply
		var = MGY_Grain_increase_tempvar
		value = MGY_Grain_increase_factor_tempvar
	}
	set_variable = {
		#Store result in non-temporary variable: THIS is the display variable
		MGY_WeeklyFoodChange_var = MGY_Grain_increase_tempvar
	}
}

MGY_Granary_CalcPercentageMax_effect = { #Updates the real maximum food: MGY_Grain_max_var x ( MGY_Grain_max_factor_var + 1)
	# Fetch the Variables
	set_temp_variable = {
		# base food gain
		MGY_Grain_max_tempvar = modifier@MGY_Grain_max_modifier
	}
	set_temp_variable = {
		# percentage
		MGY_Grain_max_factor_tempvar = modifier@MGY_Grain_max_factor_modifier
	}
	add_to_temp_variable = {
		#Adjust for multiplier
		MGY_Grain_max_factor_tempvar = 1
	}
	multiply_temp_variable = {
		# Multiply
		var = MGY_Grain_max_tempvar
		value = MGY_Grain_max_factor_tempvar
	}
	set_variable = {
		#Store result in non-temporary variable: THIS is the display variable
		MGY_Grain_capacity_var = MGY_Grain_max_tempvar
	}
}

MGY_Granary_CheckFoodNeeds_effect = { #Effect only triggers if food is in the negative. The higher the negative, the higher the consumer goods factor penalty
	if = {
		limit = {
			check_variable = {
				var = MGY_Grain_var
				value = 0
				compare = less_than
			}
		}
		set_variable = {
			MGY_FoodNeedImpact_var = MGY_Grain_var
		}
		divide_variable = {
			MGY_FoodNeedImpact_var = -1000
		}
	}
	else = {
		set_variable = {
			MGY_FoodNeedImpact_var = 0
		}
	}
}

MGY_Granary_OnWeek_effect = { #As on the tin, updates the food gain per week
	MGY_Granary_CalcPercentageGain_effect = yes
	MGY_Granary_CalcPercentageMax_effect = yes
	add_to_variable = {
		MGY_Grain_var = MGY_WeeklyFoodChange_var
	}
	clamp_variable = {
		var = MGY_Grain_var
		max = MGY_Grain_capacity_var
	}
	# MGY_Granary_CheckFoodNeeds_effect = yes
}

###########################
# Scripted GUI Effects
###########################

MGY_refreshGranaryScriptedUi_effect = {
	force_update_dynamic_modifier = yes
	if = {
		limit = {
			check_variable = {
				MGY_GranaryOfZebrica_var = 0
			}
		}
		set_variable = {
			MGY_GranaryOfZebrica_var = 1
		}
	}
	else = {
		set_variable = {
			MGY_GranaryOfZebrica_var = 0
		}
	}
}

###########################
# DECISION EFFECTS
###########################

MGY_ReturnManpower_effect = {
	custom_effect_tooltip = MGY_ReturnManpower_tt
	set_temp_variable = {
		MGY_ManpowerReturn_tempvar = MGY_GranaryOfZebricaManpower_var
	}
	if = {
		limit = {
			has_completed_focus = MGY_ModernTools
		}
		multiply_temp_variable = {
			MGY_ManpowerReturn_tempvar = 0.8
		}
	}
	else = {
		multiply_temp_variable = {
			MGY_ManpowerReturn_tempvar = 0.5
		}
	}
	add_manpower = MGY_ManpowerReturn_tempvar
}

MGY_ReturnManpowerBig_effect = {
	custom_effect_tooltip = MGY_ReturnManpower_tt
	set_temp_variable = {
		MGY_ManpowerReturn_tempvar = MGY_GranaryOfZebricaManpowerBig_var
	}
	if = {
		limit = {
			has_completed_focus = MGY_ModernTools
		}
		multiply_temp_variable = {
			MGY_ManpowerReturn_tempvar = 0.9
		}
	}
	else = {
		multiply_temp_variable = {
			MGY_ManpowerReturn_tempvar = 0.7
		}
	}
	add_manpower = MGY_ManpowerReturn_tempvar
}

MGY_GrainSaleProfit_effect = {
# Calculate the return of CIC based on factory count and opinion
			set_temp_variable = {
				MGY_WheatProfits_tempvar = FROM.num_of_civilian_factories
			}
			# Modify based on opinion
			if = {
				limit = {
					FROM = {
						has_opinion = {
							target = ROOT
							value > 100
						}
					}
				}
				multiply_temp_variable = {
					MGY_WheatProfits_tempvar = 1.6
				}
			}
			else_if = {
				limit = {
					FROM = {
						has_opinion = {
							target = ROOT
							value > 75
						}
					}
				}
				multiply_temp_variable = {
					MGY_WheatProfits_tempvar = 1.4
				}
			}
			else_if = {
				limit = {
					FROM = {
						has_opinion = {
							target = ROOT
							value > 50
						}
					}
				}
				multiply_temp_variable = {
					MGY_WheatProfits_tempvar = 1.2
				}
			}
			else_if = {
				limit = {
					FROM = {
						has_opinion = {
							target = ROOT
							value > 25
						}
					}
				}
				multiply_temp_variable = {
					MGY_WheatProfits_tempvar = 1.1
				}
			}
			else = {
				
			}
			# Rounding up
			round_temp_variable = MGY_WheatProfits_tempvar
			# Clamp Variable
			
			if = {
				# If agrarian investments were completed
				limit = {
					has_completed_focus = MGY_AgrarianInvestments
				}
				multiply_temp_variable = {
					MGY_WheatProfits_tempvar = 50
				}
				clamp_temp_variable = {
					var = MGY_WheatProfits_tempvar
					min = MGY_SalesBonusMin_var
					max = MGY_SalesBonusIncreased_var
				}
			}
			else = {
				# Otherwise, as normal
				multiply_temp_variable = {
					MGY_WheatProfits_tempvar = 40
				}
				clamp_temp_variable = {
					var = MGY_WheatProfits_tempvar
					min = MGY_SalesBonusMin_var
					max = MGY_SalesBonus_var
				}
				round_temp_variable = MGY_WheatProfits_tempvar
			}
			# Get the CIC
			add_cic = MGY_WheatProfits_tempvar
}

###########################
# MISC EFFECTS
###########################

MGY_VariablesSetup_effect = {
	set_variable = {
		MGY_GranaryOfZebricaCost_var = 40
	}
	set_variable = {
		MGY_EconomyDevCost_var = 40
	}
	set_variable = {
		MGY_GranaryOfZebricaManpower_var = 2000
	}
	set_variable = {
		MGY_GranaryOfZebricaManpowerBig_var = 4000
	}
	set_variable = {
		MGY_EconomyInfrastructure_var = 0.1
	}
	set_variable = {
		MGY_DebtPaymentCost_var = 350
	}
	set_variable = {
		MGY_SalesBonus_var = 800
	}
	set_variable = {
		MGY_SalesBonusIncreased_var = MGY_SalesBonus_var
	}
	multiply_variable = {
		MGY_SalesBonusIncreased_var = 1.25
	}
	set_variable = {
		MGY_SalesBonusMin_var = 500
	}
	set_variable = {
		MGY_Investors_var = 1
	}
}

###########################
# ROYAL DIET
###########################

MGY_RoyalDiet_setupStart_effect = {
	MGY_RoyalDiet_setupArrays_effect = yes # Setup the arrays
}

MGY_RoyalDiet_setupArrays_effect = { # Master effect to handle the initialising of the arrays used in the Royal Diet scripted GUI at the start
	# First we need an indexThis is used for the image frame and name.
	add_to_array = { MGY_RoyalDiet_faction_array = 1 } # IHT - Zebricanists
	add_to_array = { MGY_RoyalDiet_faction_array = 2 } # IHT - Farmer-Labour
	add_to_array = { MGY_RoyalDiet_faction_array = 3 } # IHT - Moderates
	add_to_array = { MGY_RoyalDiet_faction_array = 4 } # SHH - Reformists
	add_to_array = { MGY_RoyalDiet_faction_array = 5 } # SHH - Traditionalists
	add_to_array = { MGY_RoyalDiet_faction_array = 6 } # SHH - Somnambula Clique
	add_to_array = { MGY_RoyalDiet_faction_array = 7 } # SNB - Agrarian
	add_to_array = { MGY_RoyalDiet_faction_array = 8 } # SNB - Nomarchs
	add_to_array = { MGY_RoyalDiet_faction_array = 9 } # IMH - Veterans

	# 420 seats in total. At the start, 261 seats are in control of the coalition.
	add_to_array = { MGY_RoyalDiet_seats_array = 12 } # IHT - Zebricanists: 12
	add_to_array = { MGY_RoyalDiet_seats_array = 38 } # IHT - Farmer-Labour: 38
	add_to_array = { MGY_RoyalDiet_seats_array = 20 } # IHT - Moderates: 20
	add_to_array = { MGY_RoyalDiet_seats_array = 58 } # SHH - Reformists: 58
	add_to_array = { MGY_RoyalDiet_seats_array = 115 } # SHH - Traditionalists: 115
	add_to_array = { MGY_RoyalDiet_seats_array = 6 } # SHH - Somnambula Clique: 6
	add_to_array = { MGY_RoyalDiet_seats_array = 79 } # SNB - Agrarian: 79
	add_to_array = { MGY_RoyalDiet_seats_array = 61 } # SNB - Nomarchs: 61
	add_to_array = { MGY_RoyalDiet_seats_array = 31 } # IMH - Veterans: 31

	# List the favours
	add_to_array = { MGY_RoyalDiet_favors_array = 0 } # IHT - Zebricanists
	add_to_array = { MGY_RoyalDiet_favors_array = 0 } # IHT - Farmer-Labour
	add_to_array = { MGY_RoyalDiet_favors_array = 0 } # IHT - Moderates
	add_to_array = { MGY_RoyalDiet_favors_array = 0 } # SHH - Reformists
	add_to_array = { MGY_RoyalDiet_favors_array = 0 } # SHH - Traditionalists
	add_to_array = { MGY_RoyalDiet_favors_array = 0 } # SHH - Somnambula Clique
	add_to_array = { MGY_RoyalDiet_favors_array = 0 } # SNB - Agrarian
	add_to_array = { MGY_RoyalDiet_favors_array = 0 } # SNB - Nomarchs
	add_to_array = { MGY_RoyalDiet_favors_array = 0 } # IMH - Veterans

	# Is the faction in coalition (2), or government (3)
	# for the coalition: MGY_RoyalDiet_coalition_array^MGY_RoyalDiet_faction_index as the frame 
	add_to_array = { MGY_RoyalDiet_coalition_array = 1 } # IHT - Zebricanists
	add_to_array = { MGY_RoyalDiet_coalition_array = 1 } # IHT - Farmer-Labour
	add_to_array = { MGY_RoyalDiet_coalition_array = 1 } # IHT - Moderates
	add_to_array = { MGY_RoyalDiet_coalition_array = 1 } # SHH - Reformists
	add_to_array = { MGY_RoyalDiet_coalition_array = 2 } # SHH - Traditionalists
	add_to_array = { MGY_RoyalDiet_coalition_array = 3 } # SHH - Somnambula Clique
	add_to_array = { MGY_RoyalDiet_coalition_array = 2 } # SNB - Agrarian
	add_to_array = { MGY_RoyalDiet_coalition_array = 2 } # SNB - Nomarchs
	add_to_array = { MGY_RoyalDiet_coalition_array = 1 } # IMH - Veterans
}