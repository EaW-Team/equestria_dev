
LCT_DIET_initiate = {
	clear_array = LCT_DIET_seats_array
	
	add_to_array = { LCT_DIET_seats_array = 40 }
	add_to_array = { LCT_DIET_seats_array = 67 }
	add_to_array = { LCT_DIET_seats_array = 26 }
	add_to_array = { LCT_DIET_seats_array = 27 }
	
	set_variable = { LCT_UMP_leader_status = token:LCT_UMP_Leader_Deirdra_Skye }
	set_variable = { LCT_TJS_leader_status = token:LCT_TJS_Leader_Springtime_Frost }
	set_variable = { LCT_PD_leader_status = token:LCT_PD_Leader_Wild_Tree }
	
	clear_array = LCT_DIET_seats_display_array
	
	resize_array = { LCT_DIET_seats_display_array = 40 value = 0 }
	resize_array = { LCT_DIET_seats_display_array = 107 value = 1 }
	resize_array = { LCT_DIET_seats_display_array = 133 value = 2 }
	resize_array = { LCT_DIET_seats_display_array = 160 value = 3 }
	
	set_country_flag = LCT_Diet_Visible
	add_to_variable = { LCT_Diet_Dirty = 0.01 }
}

LCT_DIET_kill = {
	clear_array = LCT_DIET_seats_array
	clear_array = LCT_DIET_seats_display_array
	clr_country_flag = LCT_Diet_Visible
}

#### Indexes
# 0 = TBD
# 1 = LDP
# 2 = CTT
# 3 = Independents

## How to use:
# set_temp_variable = { temp_faction = 1 }
# set_temp_variable = { temp_seats = 10 }
# LCT_DIET_change_seats = yes

## This will change the LDP's (1) seat count by 10, deducting it from other factions.
## The scripted effect will generate its own tooltip so don't worry about that.

LCT_DIET_change_seats = {
	
	## Normalize values
	set_temp_variable = { future_value = LCT_DIET_seats_array^temp_faction }
	add_to_temp_variable = { future_value = temp_seats }
	if = {
		limit = {
			check_variable = { future_value > 160 }
		}
		set_temp_variable = { min_temp_seats = future_value }
		subtract_from_temp_variable = { min_temp_seats = 160 }
		subtract_from_temp_variable = { temp_seats = min_temp_seats }
	}
	else_if = {
		limit = {
			check_variable = { future_value < 0 }
		}
		subtract_from_temp_variable = { temp_seats = future_value }
	}
	
	## Tooltip generation + seperating positive/negative
	if = {
		limit = {
			check_variable = { temp_seats > 0 }
		}
		set_temp_variable = { positive_negative = 1 }
		custom_effect_tooltip = LCT_DIET_change_seats_positive_tt
	}
	else = {
		set_temp_variable = { positive_negative = -1 }
		multiply_temp_variable = { temp_seats = -1 }
		custom_effect_tooltip = LCT_DIET_change_seats_negative_tt
	}
	
	## Subtracting seats from other factions based on:
	#	if positive: more seats means you are more likely to be subtracted from
	#	if negative: less seats means you are more likely to be added upon
	for_loop_effect = {
		start = 0
		end = temp_seats

		for_each_loop = {
			array = LCT_DIET_seats_array
			value = x
			index = y
			
			if = {
				limit = {
					check_variable = { positive_negative = 1 }
				}
				add_to_temp_array = { chance = x }
			}
			else = {
				set_temp_variable = { chance_n = 160 }
				subtract_from_temp_variable = { chance_n = x }
				add_to_temp_array = { chance = chance_n }
			}

			if = {
				limit = {
					OR = {
						check_variable = { temp_faction = y }
						AND = {
							check_variable = { positive_negative = 1 }
							check_variable = { x = 0 }
						}
					}
				}
				set_temp_variable = { chance^y = 0 }
			}
		}
		
		random_list = {
			chance^0 = {
				subtract_from_variable = { LCT_DIET_seats_array^0 = positive_negative }
			}
			chance^1 = {
				subtract_from_variable = { LCT_DIET_seats_array^1 = positive_negative }
			}
			chance^2 = {
				subtract_from_variable = { LCT_DIET_seats_array^2 = positive_negative }
			}
			chance^3 = {
				subtract_from_variable = { LCT_DIET_seats_array^3 = positive_negative }
			}
		}
		clear_temp_array = chance
	}
	multiply_temp_variable = { temp_seats = positive_negative }
	add_to_variable = { LCT_DIET_seats_array^temp_faction = temp_seats }
	
	LCT_DIET_re_render = yes
	
	clear_variable = temp_seats
	clear_variable = temp_faction
}

## How to use:
# add_to_temp_array = { bill_support_ratio = 0.8 } # This is for the UMP
# add_to_temp_array = { bill_support_ratio = 0.3 } # This is for the TJS
# add_to_temp_array = { bill_support_ratio = 0.6 } # This is for the PD
# add_to_temp_array = { bill_support_ratio = 0.5 } # This is for the Independents
# LCT_initiate_new_bill = yes
# hidden_effect = {
# 	 activate_mission = LCT_Bill_Mandatory_Cheeseburgers
# }

LCT_initiate_new_bill = {
	custom_effect_tooltip = LCT_initiate_new_bill_tt

	for_each_loop = {
		array = LCT_DIET_seats_array
		add_to_array = { LCT_DIET_support = v }
		multiply_variable = { LCT_DIET_support^i = bill_support_ratio^i }
		round_variable = LCT_DIET_support^i
	}
	set_country_flag = LCT_bill_on_the_floor
	LCT_re_calculate_support_for_bill = yes
}

## How to use:
# set_temp_variable = { temp_faction = 1 }
# set_temp_variable = { temp_support = 10 }
# LCT_change_support_for_bill = yes

## This will change the TJS's (1) support for the current bill by 10, maxing out at the TJS's total seat count.
## The scripted effect will generate its own tooltip so don't worry about that.

LCT_change_support_for_bill = {
	set_temp_variable = { hard_cap = LCT_DIET_seats_array^temp_faction }
	set_temp_variable = { future_value = LCT_DIET_support^temp_faction }
	add_to_temp_variable = { future_value = temp_support }
	
	if = {
		limit = {
			check_variable = { future_value > hard_cap }
		}
		set_temp_variable = { normalizer = future_value }
		subtract_from_temp_variable = { normalizer = hard_cap }
		subtract_from_temp_variable = { temp_support = normalizer }
	}

	custom_effect_tooltip = LCT_change_support_for_bill_tt

	add_to_variable = { LCT_DIET_support^temp_faction = temp_support }
	LCT_re_calculate_support_for_bill = yes
	
	clear_variable = temp_faction
	clear_variable = temp_support
}

### BACKEND STUFF, don't worry about these

LCT_DIET_re_render = {
	set_temp_variable = { seats_1 = LCT_DIET_seats_array^0 }
	add_to_temp_variable = { seats_1 = LCT_DIET_seats_array^1 }

	set_temp_variable = { seats_2 = seats_1 }
	add_to_temp_variable = { seats_2 = LCT_DIET_seats_array^2 }

	set_temp_variable = { seats_3 = seats_2 }
	add_to_temp_variable = { seats_3 = LCT_DIET_seats_array^3 }
	
	clear_array = LCT_DIET_seats_display_array
	
	resize_array = { LCT_DIET_seats_display_array = LCT_DIET_seats_array^0 value = 0 }
	resize_array = { LCT_DIET_seats_display_array = seats_1 value = 1 }
	resize_array = { LCT_DIET_seats_display_array = seats_2 value = 2 }
	resize_array = { LCT_DIET_seats_display_array = seats_3 value = 3 }
	add_to_variable = { LCT_Diet_Dirty = 0.01 }
	
	if = {
		limit = {
			has_country_flag = LCT_bill_on_the_floor
		}
		LCT_re_calculate_support_for_bill = yes
	}
	
	log = "LCT: Re render GUI"
	log = "LCT_DIET_seats_array^0 = [?LCT_DIET_seats_array^0]"
	log = "LCT_DIET_seats_array^1 = [?LCT_DIET_seats_array^1]"
	log = "LCT_DIET_seats_array^2 = [?LCT_DIET_seats_array^2]"
	log = "LCT_DIET_seats_array^3 = [?LCT_DIET_seats_array^3]"
	log = "TOTAL = [?LCT_DIET_seats_display_array^num]"
}

LCT_re_calculate_support_for_bill = {
	clear_variable = LCT_Current_Support_for_Bill
	for_each_loop = {
		array = LCT_DIET_support

		clamp_variable = { var = LCT_DIET_support^i min = 0 max = LCT_DIET_seats_array^i }
		add_to_variable = { LCT_Current_Support_for_Bill = v }
	}
	
	resize_array = { LCT_DIET_is_seat_supporting = LCT_DIET_support^0 value = 1 }
	resize_array = { LCT_DIET_is_seat_supporting = LCT_DIET_seats_array^0 value = 0 }
	
	set_temp_variable = { supporting_1 = LCT_DIET_is_seat_supporting^num }
	add_to_temp_variable = { supporting_1 = LCT_DIET_support^1 }
	resize_array = { LCT_DIET_is_seat_supporting = supporting_1 value = 1 }
	subtract_from_temp_variable = { supporting_1 = LCT_DIET_support^1 }
	add_to_temp_variable = { supporting_1 = LCT_DIET_seats_array^1 }
	resize_array = { LCT_DIET_is_seat_supporting = supporting_1 value = 0 }
	
	set_temp_variable = { supporting_2 = LCT_DIET_is_seat_supporting^num }
	add_to_temp_variable = { supporting_2 = LCT_DIET_support^2 }
	resize_array = { LCT_DIET_is_seat_supporting = supporting_2 value = 1 }
	subtract_from_temp_variable = { supporting_2 = LCT_DIET_support^2 }
	add_to_temp_variable = { supporting_2 = LCT_DIET_seats_array^2 }
	resize_array = { LCT_DIET_is_seat_supporting = supporting_2 value = 0 }
	
	set_temp_variable = { supporting_3 = LCT_DIET_is_seat_supporting^num }
	add_to_temp_variable = { supporting_3 = LCT_DIET_support^3 }
	resize_array = { LCT_DIET_is_seat_supporting = supporting_3 value = 1 }
	subtract_from_temp_variable = { supporting_3 = LCT_DIET_support^3 }
	add_to_temp_variable = { supporting_3 = LCT_DIET_seats_array^3 }
	resize_array = { LCT_DIET_is_seat_supporting = supporting_3 value = 0 }
	
	add_to_variable = { LCT_Diet_Dirty = 0.01 }
}

LCT_clean_up_bill = {
	clear_array = LCT_DIET_support
	clear_array = LCT_DIET_is_seat_supporting
	clear_variable = LCT_Current_Support_for_Bill
	clr_country_flag = LCT_bill_on_the_floor
	add_to_variable = { LCT_Diet_Dirty = 0.01 }
}

LCT_do_demand_random = {
	#log = "[?LCT_active_demands_var]"
	if = {
		limit = {
			check_variable = {
				var = LCT_active_demands_var
				value = 2
				compare = less_than
			}
		}
		random = {
			chance = 33
			LCT_select_demand = yes
		}
	}
	else = {
		log = "Nothing"
	}
}

LCT_select_demand = {

	#Reset Chance To Happen Variables
	set_variable = { LCT_fort_build_chance_var = 0 }
	set_variable = { LCT_raise_rhetoric_chance_var = 0 }
	set_variable = { LCT_diplomacy_chance_var = 0 }
	set_variable = { LCT_artillery_stockpile_chance_var = 0 }
	set_variable = { LCT_build_factory_chance_var = 0 }
	set_variable = { LCT_war_strategy_chance_var = 0 }
	
	#Fort Building Demand
	if = {
		limit = {
			NOT = {
				has_country_flag = LCT_construction_demand_in_progress
			}
		}
		random_owned_state = {
			limit = {
				NOT = {
					all_neighbor_state  = {
						is_owned_by = LCT
					}
					has_state_flag = LCT_fortified_border
				}
			}
			set_variable = { ROOT.LCT_bordering_state_target_var = THIS.id }
			set_variable = { ROOT.LCT_fort_build_chance_var = 10 }
		}
	}
	
	#Raise Rhetoric Demand
	if = {
		limit = {
			OR = {
				AND = {
					check_variable = {
						var = lct_unity_rhetoric_var
						value = 0.2
						compare = less_than
					}
					has_country_flag = LCT_unlocked_stability_rhetoric
				}
				AND = {
					check_variable = {
						var = lct_productivity_rhetoric_var
						value = 0.2
						compare = less_than
					}
					has_country_flag = LCT_Propaganda_Campaign_Visible
				}
				AND = {
					check_variable = {
						var = lct_war_support_rhetoric_var
						value = 0.2
						compare = less_than
					}
					has_country_flag = LCT_unlocked_war_support_rhetoric
				}
			}
			NOT = {
				has_country_flag = LCT_propaganda_demand_in_progress
			}
		}
		set_variable = { LCT_raise_rhetoric_chance_var = 10 }
	}
	
	#Diplomacy
	if = {
		limit = {
			NOT = {
				has_country_flag = LCT_diplomacy_demand_in_progress
			}
		}
		random_other_country = {
			limit = {
				exists = yes
				is_pony_race = yes
				has_opinion = {
					target = ROOT
					value < 16
				}
				has_opinion = {
					target = ROOT
					value > -51
				}
				NOT = {
					has_war_with = ROOT
					has_government = communism
					tag = BAR
					tag = NTR
				}
				is_zebrican_continent_country = no
			}
			set_variable = { ROOT.LCT_diplomacy_target_var = THIS.id }
			set_variable = { ROOT.LCT_diplomacy_chance_var = 10 }
		}
	}
	
	#Artillery Stockpile
	if = {
		limit = {
			has_equipment = {
				artillery_equipment < 1000
			}
			NOT = {
				has_country_flag = LCT_artillery_demand_in_progress
			}
		}
		set_variable = { LCT_artillery_stockpile_chance_var = 10 }
	}
	
	#Build Military Factories
	if = {
		limit = {
			any_owned_state = {
				free_building_slots = {
					building = arms_factory
					size > 0
					include_locked = no
				}
			}
			NOT = {
				has_country_flag = LCT_construction_demand_in_progress
			}
		}
		if = {
			limit = {
				has_country_flag = LCT_glory_awaits
			}
			randomize_variable = {
				var = num_new_factories
				distribution = uniform
				min = 3.5
				max = 6.49
			}
		}
		else = {
			randomize_variable = {
				var = num_new_factories
				distribution = uniform
				min = 0.5
				max = 3.49
			}
		}
		round_variable = num_new_factories
		set_variable = { LCT_target_factories_num = num_of_military_factories }
		add_to_variable = { LCT_target_factories_num = num_new_factories }
		set_variable = { LCT_build_factory_chance_var = 10 }
	}
	
	#War strategy
	random_state = {
		limit = {
			any_neighbor_state = {
				NOT = {
					is_controlled_by = LCT
				}
				any_neighbor_state = {
					is_controlled_by = LCT
				}
			}
			controller = {
				has_war_with = LCT
			}
			NOT = {
				has_country_flag = LCT_strategy_demand_in_progress
			}
		}
		set_variable = { ROOT.LCT_war_strategy_chance_var = 10 }
		set_variable = { ROOT.LCT_war_target_state_var = THIS.id }
	}
	
	#log = "New Factories: [?num_new_factories]"
	#log = "[?LCT_fort_build_chance_var]"
	#log = "[?LCT_raise_rhetoric_chance_var]"
	#log = "[?LCT_diplomacy_chance_var]"
	#log = "[?LCT_artillery_stockpile_chance_var]"
	#log = "[?LCT_build_factory_chance_var]"
	#log = "[?LCT_war_strategy_chance_var]"
	
	#set_variable = { LCT_fort_build_chance_var = 0 }
	#set_variable = { LCT_raise_rhetoric_chance_var = 0 }
	#set_variable = { LCT_diplomacy_chance_var = 0 }
	#set_variable = { LCT_artillery_stockpile_chance_var = 0 }
	#set_variable = { LCT_build_factory_chance_var = 0 }
	#set_variable = { LCT_war_strategy_chance_var = 0 }
	
	#Random Mission List
	random_list = {
		LCT_fort_build_chance_var = {
			country_event = {
				id = LCT_six_lords_demands.1
				days = 5
				random_hours = 24
				random_days = 13
			}
			set_country_flag = LCT_construction_demand_in_progress
			add_to_variable = { LCT_active_demands_var = 1 }
			log = "Build Forts"
		}
		LCT_raise_rhetoric_chance_var = {
			LCT_raise_rhetoric_demand_selection = yes
			set_country_flag = LCT_propaganda_demand_in_progress
			add_to_variable = { LCT_active_demands_var = 1 }
			log = "Raise Rhetoric"
		}
		LCT_diplomacy_chance_var = {
			country_event = {
				id = LCT_six_lords_demands.5
				days = 5
				random_hours = 24
				random_days = 13
			}
			set_country_flag = LCT_diplomacy_demand_in_progress
			add_to_variable = { LCT_active_demands_var = 1 }
			log = "Diplomacy"
		}
		LCT_artillery_stockpile_chance_var = {
			country_event = {
				id = LCT_six_lords_demands.12
				days = 5
				random_hours = 24
				random_days = 13
			}
			set_country_flag = LCT_artillery_demand_in_progress
			add_to_variable = { LCT_active_demands_var = 1 }
			log = "Artillery"
		}
		LCT_build_factory_chance_var = {
			country_event = {
				id = LCT_six_lords_demands.13
				days = 5
				random_hours = 24
				random_days = 13
			}
			set_country_flag = LCT_construction_demand_in_progress
			add_to_variable = { LCT_active_demands_var = 1 }
			log = "Build Factories"
		}
		LCT_war_strategy_chance_var = {
			country_event = {
				id = LCT_six_lords_demands.14
				days = 5
				random_hours = 24
				random_days = 13
			}
			set_country_flag = LCT_strategy_demand_in_progress
			log = "Take Territory"
		}
	}
}

LCT_raise_rhetoric_demand_selection = {
	set_temp_variable = { LCT_unity_chance_var = 0 }
	set_temp_variable = { LCT_productivity_chance_var = 0 }
	set_temp_variable = { LCT_war_support_chance_var = 0 }
	
	if = {
		limit = {
			check_variable = {
				var = lct_unity_rhetoric_var
				value = 0.2
				compare = less_than
			}
			has_country_flag = LCT_unlocked_stability_rhetoric
		}
		set_temp_variable = { LCT_unity_chance_var = 10 }
	}
	if = {
		limit = {
			check_variable = {
				var = lct_productivity_rhetoric_var
				value = 0.2
				compare = less_than
			}
			has_country_flag = LCT_Propaganda_Campaign_Visible
		}
		set_temp_variable = { LCT_productivity_chance_var = 10 }
	}
	if = {
		limit = {
			check_variable = {
				var = lct_war_support_rhetoric_var
				value = 0.2
				compare = less_than
			}
			has_country_flag = LCT_unlocked_war_support_rhetoric
		}
		set_temp_variable = { LCT_war_support_chance_var = 10 }
	}
	
	random_list = {
		LCT_unity_chance_var = {
			country_event = {
				id = LCT_six_lords_demands.2
				days = 5
				random_hours = 24
				random_days = 13
			}
		}
		LCT_productivity_chance_var = {
			country_event = {
				id = LCT_six_lords_demands.3
				days = 5
				random_hours = 24
				random_days = 13
			}
		}
		LCT_war_support_chance_var = {
			country_event = {
				id = LCT_six_lords_demands.4
				days = 5
				random_hours = 24
				random_days = 13
			}
		}
	}
}

###Resistance System###

LCT_resistance_initiate = {
	set_country_flag = LCT_resistance_active

	add_to_array = { LCT_resistance_map_array = 387 }
	add_to_array = { LCT_resistance_map_array_id = 387.id }
	add_to_array = { LCT_resistance_map_array_x = 209 }
	add_to_array = { LCT_resistance_map_array_y = 98 }

	add_to_array = { LCT_resistance_map_array = 499 }
	add_to_array = { LCT_resistance_map_array_id = 499.id }
	add_to_array = { LCT_resistance_map_array_x = 177 }
	add_to_array = { LCT_resistance_map_array_y = 135 }

	add_to_array = { LCT_resistance_map_array = 505 }
	add_to_array = { LCT_resistance_map_array_id = 505.id }
	add_to_array = { LCT_resistance_map_array_x = 62 }
	add_to_array = { LCT_resistance_map_array_y = 161 }

	add_to_array = { LCT_resistance_map_array = 537 }
	add_to_array = { LCT_resistance_map_array_id = 537.id }
	add_to_array = { LCT_resistance_map_array_x = 78 }
	add_to_array = { LCT_resistance_map_array_y = 77 }

	add_to_array = { LCT_resistance_map_array = 540 }
	add_to_array = { LCT_resistance_map_array_id = 540.id }
	add_to_array = { LCT_resistance_map_array_x = 44 }
	add_to_array = { LCT_resistance_map_array_y = 126 }

	add_to_array = { LCT_resistance_map_array = 541 }
	add_to_array = { LCT_resistance_map_array_id = 541.id }
	add_to_array = { LCT_resistance_map_array_x = 143 }
	add_to_array = { LCT_resistance_map_array_y = 92 }

	add_to_array = { LCT_resistance_map_array = 550 }
	add_to_array = { LCT_resistance_map_array_id = 550.id }
	add_to_array = { LCT_resistance_map_array_x = 257 }
	add_to_array = { LCT_resistance_map_array_y = 96 }

	add_to_array = { LCT_resistance_map_array = 551 }
	add_to_array = { LCT_resistance_map_array_id = 551.id }
	add_to_array = { LCT_resistance_map_array_x = 219 }
	add_to_array = { LCT_resistance_map_array_y = 140 }

	add_to_array = { LCT_resistance_map_array = 552 }
	add_to_array = { LCT_resistance_map_array_id = 552.id }
	add_to_array = { LCT_resistance_map_array_x = 84 }
	add_to_array = { LCT_resistance_map_array_y = 113 }

	add_to_array = { LCT_resistance_map_array = 553 }
	add_to_array = { LCT_resistance_map_array_id = 553.id }
	add_to_array = { LCT_resistance_map_array_x = 9 }
	add_to_array = { LCT_resistance_map_array_y = 65 }

	add_to_array = { LCT_resistance_map_array = 560 }
	add_to_array = { LCT_resistance_map_array_id = 560.id }
	add_to_array = { LCT_resistance_map_array_x = 138 }
	add_to_array = { LCT_resistance_map_array_y = 134 }

	add_to_array = { LCT_resistance_map_array = 633 }
	add_to_array = { LCT_resistance_map_array_id = 633.id }
	add_to_array = { LCT_resistance_map_array_x = 5 }
	add_to_array = { LCT_resistance_map_array_y = 5 }

	add_to_array = { LCT_resistance_map_array = 634 }
	add_to_array = { LCT_resistance_map_array_id = 634.id }
	add_to_array = { LCT_resistance_map_array_x = 68 }
	add_to_array = { LCT_resistance_map_array_y = 15 }
	
	set_variable = { LCT_selected_resistance_state = 387 }
	
	add_to_array = { LCT_resistance_dummy_array = 0 }
	
	set_variable = { LCT_tab_resistance_bg = 2 }
	
	387 = { #Jezeragrad
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 58 } #Government
			add_to_array = { LCT_resistance_control = 16 } #Harmonists
			add_to_array = { LCT_resistance_control = 14 } #Non-Aligned
			add_to_array = { LCT_resistance_control = 12 } #Communists
			add_to_array = { LCT_resistance_control = 0 }  #Supremacists
		}
		else = {
			add_to_array = { LCT_resistance_control = 58 }
			add_to_array = { LCT_resistance_control = 16 }
			add_to_array = { LCT_resistance_control = 14 }
			add_to_array = { LCT_resistance_control = 12 }
		}
	}
	499 = { #Bucka
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 13 }
			add_to_array = { LCT_resistance_control = 7 }
			add_to_array = { LCT_resistance_control = 62 }
			add_to_array = { LCT_resistance_control = 18 }
			add_to_array = { LCT_resistance_control = 0 }
		}
		else = {
			add_to_array = { LCT_resistance_control = 13 }
			add_to_array = { LCT_resistance_control = 7 }
			add_to_array = { LCT_resistance_control = 62 }
			add_to_array = { LCT_resistance_control = 18 }
		}
	}
	505 = { #Longbowgriff
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 3 }
			add_to_array = { LCT_resistance_control = 22 }
			add_to_array = { LCT_resistance_control = 5 }
			add_to_array = { LCT_resistance_control = 57 }
			add_to_array = { LCT_resistance_control = 13 }
		}
		else = {
			add_to_array = { LCT_resistance_control = 6 }
			add_to_array = { LCT_resistance_control = 23 }
			add_to_array = { LCT_resistance_control = 8 }
			add_to_array = { LCT_resistance_control = 63 }
		}
	}
	537 = { #Hellquill
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 33 }
			add_to_array = { LCT_resistance_control = 12 }
			add_to_array = { LCT_resistance_control = 18 }
			add_to_array = { LCT_resistance_control = 11 }
			add_to_array = { LCT_resistance_control = 26 }
		}
		else = {
			add_to_array = { LCT_resistance_control = 39 }
			add_to_array = { LCT_resistance_control = 20 }
			add_to_array = { LCT_resistance_control = 28 }
			add_to_array = { LCT_resistance_control = 13 }
		}
	}
	540 = { #Panacea
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 2 }
			add_to_array = { LCT_resistance_control = 18 }
			add_to_array = { LCT_resistance_control = 13 }
			add_to_array = { LCT_resistance_control = 53 }
			add_to_array = { LCT_resistance_control = 14 }
		}
		else = {
			add_to_array = { LCT_resistance_control = 6 }
			add_to_array = { LCT_resistance_control = 20 }
			add_to_array = { LCT_resistance_control = 15 }
			add_to_array = { LCT_resistance_control = 59 }
		}
	}
	541 = { #Coltsovo
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 36 }
			add_to_array = { LCT_resistance_control = 12 }
			add_to_array = { LCT_resistance_control = 38 }
			add_to_array = { LCT_resistance_control = 14 }
			add_to_array = { LCT_resistance_control = 0 }
		}
		else = {
			add_to_array = { LCT_resistance_control = 38 }
			add_to_array = { LCT_resistance_control = 12 }
			add_to_array = { LCT_resistance_control = 36 }
			add_to_array = { LCT_resistance_control = 14 }
		}
	}
	550 = { #Svetazemlja
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 8 }
			add_to_array = { LCT_resistance_control = 64 }
			add_to_array = { LCT_resistance_control = 12 }
			add_to_array = { LCT_resistance_control = 16 }
			add_to_array = { LCT_resistance_control = 0 }
		}
		else = {
			add_to_array = { LCT_resistance_control = 8 }
			add_to_array = { LCT_resistance_control = 64 }
			add_to_array = { LCT_resistance_control = 12 }
			add_to_array = { LCT_resistance_control = 16 }
		}
	}
	551 = { #Shayrmia
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 12 }
			add_to_array = { LCT_resistance_control = 36 }
			add_to_array = { LCT_resistance_control = 24 }
			add_to_array = { LCT_resistance_control = 28 }
			add_to_array = { LCT_resistance_control = 0 }
		}
		else = {
			add_to_array = { LCT_resistance_control = 12 }
			add_to_array = { LCT_resistance_control = 36 }
			add_to_array = { LCT_resistance_control = 24 }
			add_to_array = { LCT_resistance_control = 28 }
		}
	}
	552 = { #Swordsson
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 28 }
			add_to_array = { LCT_resistance_control = 13 }
			add_to_array = { LCT_resistance_control = 4 }
			add_to_array = { LCT_resistance_control = 14 }
			add_to_array = { LCT_resistance_control = 41 }
		}
		else = {
			add_to_array = { LCT_resistance_control = 24 }
			add_to_array = { LCT_resistance_control = 23 }
			add_to_array = { LCT_resistance_control = 28 }
			add_to_array = { LCT_resistance_control = 25 }
		}
	}
	553 = { #Lone Domain
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 13 }
			add_to_array = { LCT_resistance_control = 6 }
			add_to_array = { LCT_resistance_control = 12 }
			add_to_array = { LCT_resistance_control = 15 }
			add_to_array = { LCT_resistance_control = 54 }
		}
		else = {
			add_to_array = { LCT_resistance_control = 24 }
			add_to_array = { LCT_resistance_control = 13 }
			add_to_array = { LCT_resistance_control = 26 }
			add_to_array = { LCT_resistance_control = 37 }
		}
	}
	560 = { #Coltubar
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 14 }
			add_to_array = { LCT_resistance_control = 18 }
			add_to_array = { LCT_resistance_control = 51 }
			add_to_array = { LCT_resistance_control = 17 }
			add_to_array = { LCT_resistance_control = 0 }
		}
		else = {
			add_to_array = { LCT_resistance_control = 14 }
			add_to_array = { LCT_resistance_control = 18 }
			add_to_array = { LCT_resistance_control = 51 }
			add_to_array = { LCT_resistance_control = 17 }
		}
	}
	633 = { #Brightcreeks
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 3 }
			add_to_array = { LCT_resistance_control = 5 }
			add_to_array = { LCT_resistance_control = 24 }
			add_to_array = { LCT_resistance_control = 17 }
			add_to_array = { LCT_resistance_control = 51 }
		}
		else = {
			add_to_array = { LCT_resistance_control = 8 }
			add_to_array = { LCT_resistance_control = 18 }
			add_to_array = { LCT_resistance_control = 43 }
			add_to_array = { LCT_resistance_control = 31 }
		}
	}
	634 = { #Sondersune
		if = {
			limit = {
				ROOT = {
					has_country_flag = LCT_resistance_with_reformisten
				}
			}
			add_to_array = { LCT_resistance_control = 4 }
			add_to_array = { LCT_resistance_control = 31 }
			add_to_array = { LCT_resistance_control = 12 }
			add_to_array = { LCT_resistance_control = 7 }
			add_to_array = { LCT_resistance_control = 46 }
		}
		else = {
			add_to_array = { LCT_resistance_control = 7 }
			add_to_array = { LCT_resistance_control = 37 }
			add_to_array = { LCT_resistance_control = 28 }
			add_to_array = { LCT_resistance_control = 28 }
		}
	}
	
	LCT_resistance_calculate = yes
}

LCT_resistance_change_mp = {
	add_to_variable = { LCT_military_police = temp_mp }
	custom_effect_tooltip = LCT_resistance_mp_CET
	clamp_variable = { var = LCT_military_police min = 0 }
	add_to_variable = { LCT_resistance_dirty = 0.01 }
}

LCT_resistance_calculate = {
	for_each_loop = {
		array = LCT_resistance_map_array
		var:v = {
			set_temp_variable = { total = 0 }
			for_each_loop = {
				array = LCT_resistance_control
				index = o
				value = b
				add_to_temp_variable = { total = b }
			}
			divide_temp_variable = { total = 100 }
			for_each_loop = {
				array = LCT_resistance_control
				index = o
				value = b
				divide_variable = { LCT_resistance_control^o = total }
			}
			
			find_highest_in_array = {
				array = LCT_resistance_control
				index = most_powerful_index
			}
			set_variable = { LCT_resistance_control_ruling_id = most_powerful_index }
			meta_effect = {
				text = {
					set_variable = { LCT_resistance_control_ruling = token:LCT_resistance_group_[GROUP] }
				}
				GROUP = "[?most_powerful_index]"
			}
		}
	}
	LCT_resistance_update_gui = yes
}

LCT_resistance_update_gui = {
	set_variable = { progressbar_1_frame = LCT_selected_resistance_state:LCT_resistance_control^0 }
	add_to_variable = { progressbar_1_frame = LCT_selected_resistance_state:LCT_resistance_control^1 }
	set_variable = { progressbar_2_frame = progressbar_1_frame }
	add_to_variable = { progressbar_2_frame = LCT_selected_resistance_state:LCT_resistance_control^2 }
	set_variable = { progressbar_3_frame = progressbar_2_frame }
	add_to_variable = { progressbar_3_frame = LCT_selected_resistance_state:LCT_resistance_control^3 }
	set_variable = { progressbar_4_frame = progressbar_3_frame }
	add_to_variable = { progressbar_4_frame = LCT_selected_resistance_state:LCT_resistance_control^4 }
	
	set_variable = { progressbar_txt_0_x = LCT_selected_resistance_state:LCT_resistance_control^0 }
	divide_variable = { progressbar_txt_0_x = 200 }
	multiply_variable = { progressbar_txt_0_x = 404 }
	
	set_variable = { progressbar_txt_1_x = LCT_selected_resistance_state:LCT_resistance_control^1 }
	divide_variable = { progressbar_txt_1_x = 2 }
	add_to_variable = { progressbar_txt_1_x = LCT_selected_resistance_state:LCT_resistance_control^0 }
	divide_variable = { progressbar_txt_1_x = 100 }
	multiply_variable = { progressbar_txt_1_x = 404 }

	set_variable = { progressbar_txt_2_x = LCT_selected_resistance_state:LCT_resistance_control^2 }
	divide_variable = { progressbar_txt_2_x = 2 }
	add_to_variable = { progressbar_txt_2_x = LCT_selected_resistance_state:LCT_resistance_control^0 }
	add_to_variable = { progressbar_txt_2_x = LCT_selected_resistance_state:LCT_resistance_control^1 }
	divide_variable = { progressbar_txt_2_x = 100 }
	multiply_variable = { progressbar_txt_2_x = 404 }

	set_variable = { progressbar_txt_3_x = LCT_selected_resistance_state:LCT_resistance_control^3 }
	divide_variable = { progressbar_txt_3_x = 2 }
	add_to_variable = { progressbar_txt_3_x = LCT_selected_resistance_state:LCT_resistance_control^0 }
	add_to_variable = { progressbar_txt_3_x = LCT_selected_resistance_state:LCT_resistance_control^1 }
	add_to_variable = { progressbar_txt_3_x = LCT_selected_resistance_state:LCT_resistance_control^2 }
	divide_variable = { progressbar_txt_3_x = 100 }
	multiply_variable = { progressbar_txt_3_x = 404 }

	set_variable = { progressbar_txt_4_x = LCT_selected_resistance_state:LCT_resistance_control^4 }
	divide_variable = { progressbar_txt_4_x = 2 }
	add_to_variable = { progressbar_txt_4_x = LCT_selected_resistance_state:LCT_resistance_control^0 }
	add_to_variable = { progressbar_txt_4_x = LCT_selected_resistance_state:LCT_resistance_control^1 }
	add_to_variable = { progressbar_txt_4_x = LCT_selected_resistance_state:LCT_resistance_control^2 }
	add_to_variable = { progressbar_txt_4_x = LCT_selected_resistance_state:LCT_resistance_control^3 }
	divide_variable = { progressbar_txt_4_x = 100 }
	multiply_variable = { progressbar_txt_4_x = 404 }
	
	add_to_variable = { LCT_resistance_dirty = 0.01 }
}

LCT_check_for_100 = {
	for_each_loop = {
		array = LCT_resistance_map_array
		var:v = {
			set_temp_variable = { check = 0 }
			for_each_loop = {
				array = LCT_resistance_control
				index = o
				value = b
				add_to_temp_variable = { check = b }
			}
			if = {
				limit = {
					check_variable = { var = check value = 100 compare = not_equals }
				}
				log = "[THIS.GetName] LCT_resistance_control DOESNT ADD UP TO 100: [?check|R]"
			}
		}
	}
}
