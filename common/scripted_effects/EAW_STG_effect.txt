modify_var_stg_construction_2 = {
	if = {
		limit = {
			OR = { has_food_shortages_STG = yes has_war = yes }
		}
		add_to_variable = { var = palace_construction value = 3 }
	}
	else_if = {
		limit = {
			has_war = no
			NOT = { has_food_shortages_STG = yes }
		}
		add_to_variable = { var = palace_construction value = 4 }
	}
	else_if = {
		limit = {
			has_war = no
			NOT = { has_food_shortages_STG = yes }
			NOT = { has_idea = incomplete_industrialization }
		}
		add_to_variable = { var = palace_construction value = 5 }
	}
}

deconstruct_the_palace_stg = {
	if = {
		limit = {
			check_variable = { var = palace_construction value = 20 compare = greater_than_or_equals }
			NOT = { check_variable = { var = palace_construction value = 20 compare = less_than } }
			has_country_flag = statue_obtained
		}
		four_random_industrial_complex = yes
		add_resource = { type = steel amount = 20 state = 153 }
		add_resource = { type = steel amount = 5 state = 166 }
	}
	if = {
		limit = {
			check_variable = { var = palace_construction value = 20 compare = greater_than_or_equals }
			NOT = { check_variable = { var = palace_construction value = 20 compare = less_than } }
			NOT = { has_country_flag = statue_obtained }
		}
		four_random_industrial_complex = yes
		add_resource = { type = steel amount = 20 state = 153 }
	}
	if = {
		limit = {
			NOT = { check_variable = { var = palace_construction value = 20 compare = greater_than_or_equals } }
			check_variable = { var = palace_construction value = 15 compare = greater_than_or_equals }
			NOT = { check_variable = { var = palace_construction value = 15 compare = less_than } }
		}
		three_random_industrial_complex = yes
		add_resource = { type = steel amount = 15 state = 153 }
	}
	if = {
		limit = {
			NOT = { check_variable = { var = palace_construction value = 15 compare = greater_than_or_equals } }
			check_variable = { var = palace_construction value = 10 compare = greater_than_or_equals }
			NOT = { check_variable = { var = palace_construction value = 10 compare = less_than } }
		}
		two_random_industrial_complex = yes
		add_resource = { type = steel amount = 10 state = 153 }
	}
	if = {
		limit = {
			NOT = { check_variable = { var = palace_construction value = 10 compare = greater_than_or_equals } }
			check_variable = { var = palace_construction value = 1 compare = greater_than_or_equals }
		}
		two_random_industrial_complex = yes
		add_resource = { type = steel amount = 5 state = 153 }
	}
	if = {
		limit = {
			check_variable = { var = palace_construction value = 0 compare = equals }
		}
		one_random_industrial_complex = yes
		add_resource = { type = steel amount = 3 state = 153 }
	}
}

remove_hunger_effect = {
	if = {
		limit = {
			has_idea = severe_famine
		}
		swap_ideas = { add_idea = severe_famine2 remove_idea = severe_famine }
	}
	else_if = {
		limit = {
			has_idea = severe_famine2
		}
		swap_ideas = { add_idea = severe_famine3 remove_idea = severe_famine2 }
	}
	else_if = {
		limit = {
			has_idea = severe_famine3
		}
		swap_ideas = { add_idea = severe_famine4 remove_idea = severe_famine3 }
	}
	else_if = {
		limit = {
			has_idea = severe_famine4
		}
		swap_ideas = { add_idea = severe_famine5 remove_idea = severe_famine4 }
	}
	else_if = {
		limit = {
			has_idea = severe_famine5
		}
		swap_ideas = { add_idea = severe_famine6 remove_idea = severe_famine5 }
	}
	else_if = {
		limit = {
			has_idea = severe_famine6
		}
		remove_ideas = severe_famine6
	}
}
remove_agrarian_problem_vasya = {
	if = {
		limit = {
			has_idea = STG_agrarian_problem
		}
		swap_ideas = {
			remove_idea = STG_agrarian_problem
			add_idea = STG_agrarian_problem_vasya_1
		}
	}
}
remove_agrarian_problem_karamelka = {
	if = {
		limit = {
			has_idea = STG_agrarian_problem
		}
		swap_ideas = {
			remove_idea = STG_agrarian_problem
			add_idea = STG_agrarian_problem_karamelka_1
		}
	}
}
remove_workers_army = {
	if = {
		limit = {
			has_idea = STG_workers_army
		}
		swap_ideas = {
			remove_idea = STG_workers_army
			add_idea = STG_workers_army_1
		}
	}
}
remove_equestrian_embargo_vasya = {
	if = {
		limit = {
			has_idea = STG_equestrian_embargo
		}	
		swap_ideas = {
			remove_idea = STG_equestrian_embargo
			add_idea = STG_equestrian_embargo_vasya_1
		}
	}
}
remove_equestrian_embargo_karamelka = {
	if = {
		limit = {
			has_idea = STG_equestrian_embargo
		}
		swap_ideas = {
			remove_idea = STG_equestrian_embargo
			add_idea = STG_equestrian_embargo_kar_1
		}
	}
}
STG_vasya_industry_upd = {
	if = {
		limit = {
			has_idea = STG_new_economic_policy
		}
		swap_ideas = {
			remove_idea = STG_new_economic_policy
			add_idea = STG_vasya_industry
		}
	}
}
STG_sladkova_industry_upd = {
	if = {
		limit = {
			has_idea = STG_new_economic_policy
		}
		swap_ideas = {
			remove_idea = STG_new_economic_policy
			add_idea = STG_sladkova_industry
		}
	}
}

STG_check_party_variables = {

	clamp_variable = {
		var = STG_main_party_support
		min = 0
		max = 100
	}

	clamp_variable = {
		var = STG_left_opposition_support
		min = 0
		max = 100
	}

	clamp_variable = {
		var = STG_right_opposition_support
		min = 0
		max = 100
	}
}
#Crutch for party mechanic part 
#Just delete shit that you don't need. Loc and checks are written in other shit
#typical_cringe_STG_effect = { #name for your effect and don't forget write in event typacal_cringe_STG_effect = yes
#	add_to_variable = {
#		var = STG_main_party_influence
#		value = x you can use negative number
#		tooltip = STG_main_party_influence_tt
#	}
#	add_to_variable = {
#		var = STG_main_party_support
#		value = x you can use negative number
#		tooltip = STG_main_party_party_support_tt
#	}
#	add_to_variable = {
#		var = STG_opposition_influence
#		value = x you can use negative number
#		tooltip = STG_opposition_influence_tt
#	}
#	add_to_variable = {
#		var = STG_opposition_support
#		value = x you can use negative number
#		tooltip = STG_opposition_support_tt
#	}
#	add_to_variable = {
#		var = STG_main_party_influence_2
#		value = x you can use negative number
#		tooltip = STG_main_party_influence_2_tt
#	}
#	add_to_variable = {
#		var = STG_main_party_influence_2
#		value = x you can use negative number
#		tooltip = STG_main_party_support_2_tt
#	}
#	add_to_variable = {
#		var = STG_left_opposition_influence
#		value = x you can use negative number
#		tooltip = STG_left_opposition_influence_tt
#	}
#	add_to_variable = {
#		var = STG_left_opposition_support
#		value = x you can use negative number
#		tooltip = STG_left_opposition_support_tt
#	}
#	add_to_variable = {
#		var = STG_right_opposition_influence
#		value = x you can use negative number
#		tooltip = STG_right_opposition_influence_tt
#	}
#	add_to_variable = {
#		var = STG_right_opposition_support
#		value = x you can use negative number
#		tooltip = STG_right_opposition_support_tt
#	}
#	STG_check_party_variables = yes
#}
#STG_party_recalculating = {
#	TODO this shit later (don't forget about status quo)
#	
vasya_STG_effect = {
	add_to_variable = {
		var = STG_main_party_support
		value = 2
		tooltip = STG_main_party_party_support_tt
	}
	add_to_variable = {
		var = STG_opposition_support
		value = -2
		tooltip = STG_opposition_support_tt
	}
	STG_check_party_variables = yes
}
opposition_STG_effect = {
	add_to_variable = {
		var = STG_main_party_support
		value = -2
		tooltip = STG_main_party_party_support_tt
	}
	add_to_variable = {
		var = STG_opposition_support
		value = 2
		tooltip = STG_opposition_support_tt
	}
	STG_check_party_variables = yes
}
vasya_adv_STG_effect = {
	add_to_variable = {
		var = STG_main_party_support
		value = 2
		tooltip = STG_main_party_party_support_tt
	}
	add_to_variable = {
		var = STG_opposition_support
		value = -2
		tooltip = STG_opposition_support_tt
	}
	add_to_variable = {
		var = STG_main_party_influence
		value = 1 
		tooltip = STG_main_party_influence_tt
	}
	add_to_variable = {
		var = STG_opposition_influence
		value = -1 
		tooltip = STG_opposition_influence_tt
	}
	STG_check_party_variables = yes
}
opposition_STG_effect_LEFT = {
	add_to_variable = {
		var = STG_main_party_support
		value = -4
		tooltip = STG_main_party_party_support_tt
	}
	add_to_variable = {
		var = STG_opposition_support
		value = 4
		tooltip = STG_opposition_support_tt
	}
	STG_check_party_variables = yes
}
vasya_STG_effect_2 = {
	add_to_variable = {
		var = STG_main_party_support_2
		value = 2
		tooltip = STG_main_party_party_support_2_tt
	}
	add_to_variable = {
		var = STG_left_opposition_support
		value = -2
		tooltip = STG_left_opposition_support_tt
	}
	add_to_variable = {
		var = STG_right_opposition_support
		value = -2
		tooltip = STG_right_opposition_support_tt
	}
	add_to_variable = {
		var = STG_main_party_influence_2
		value = 1
		tooltip = STG_main_party_influence_2_tt
	}
	add_to_variable = {
		var = STG_left_opposition_influence
		value = -1
		tooltip = STG_left_opposition_influence_tt
	}
	add_to_variable = {
		var = STG_right_opposition_influence
		value = -1
		tooltip = STG_right_opposition_influence_tt
	}
	STG_check_party_variables = yes
}
left_STG_effect_2 = {
	add_to_variable = {
		var = STG_main_party_support_2
		value = -2
		tooltip = STG_main_party_party_support_2_tt
	}
	add_to_variable = {
		var = STG_left_opposition_support
		value = 2
		tooltip = STG_left_opposition_support_tt
	}
	add_to_variable = {
		var = STG_right_opposition_support
		value = -2
		tooltip = STG_right_opposition_support_tt
	}
	add_to_variable = {
		var = STG_main_party_influence_2
		value = -1
		tooltip = STG_main_party_influence_2_tt
	}
	add_to_variable = {
		var = STG_left_opposition_influence
		value = 1
		tooltip = STG_left_opposition_influence_tt
	}
	add_to_variable = {
		var = STG_right_opposition_influence
		value = -1
		tooltip = STG_right_opposition_influence_tt
	}
	STG_check_party_variables = yes
}
right_STG_effect_2 = {
	add_to_variable = {
		var = STG_main_party_support_2
		value = -2
		tooltip = STG_main_party_support_2_tt
	}
	add_to_variable = {
		var = STG_left_opposition_support
		value = -2
		tooltip = STG_left_opposition_support_tt
	}
	add_to_variable = {
		var = STG_right_opposition_support
		value = 2
		tooltip = STG_right_opposition_support_tt
	}
	add_to_variable = {
		var = STG_main_party_influence_2
		value = -1
		tooltip = STG_main_party_influence_2_tt
	}
	add_to_variable = {
		var = STG_left_opposition_influence
		value = -1
		tooltip = STG_left_opposition_influence_tt
	}
	add_to_variable = {
		var = STG_right_opposition_influence
		value = 1
		tooltip = STG_right_opposition_influence_tt
	}
	STG_check_party_variables = yes
}
I_WANT_TO_FINISH_THIS_MECHANIC_WHEN_I_AM_ALIVE = {
	if = {
		limit = {
			check_variable = { STG_opposition_support < 30 }
		}
		set_country_flag = STG_flag_unity_in_party
	}
	else_if = { 
		limit = {
			check_variable = { STG_main_party_support < 71 }
			has_country_flag = STG_EASY_LEFT
		}
		set_country_flag = STG_flag_status_quo
		set_temp_variable = { temp1 = STG_main_party_support }
		divide_temp_variable = { temp1 = 8 }
		set_temp_variable = { temp2 = STG_main_party_support_2 }
		add_to_temp_variable = { temp2 = temp1 }
		multiply_temp_variable = { temp2 = 4 }
		set_temp_variable = { temp3 = STG_left_opposition_support }
		add_to_temp_variable = { temp3 = temp1 }
		multiply_temp_variable = { temp3 = 3 }
		set_temp_variable = { temp4 = STG_right_opposition_support }
		add_to_temp_variable = { temp4 = temp1 }
		multiply_temp_variable = { temp4 = 1 }
		set_temp_variable = { temp5 = STG_opposition_support }
		divide_temp_variable = { temp5 = 2 }
		add_to_variable = { STG_left_opposition_support = temp5 }
		add_to_variable = { STG_right_opposition_support = temp5 }
		add_to_variable = { STG_main_party_support_2 = temp2 }
		add_to_variable = { STG_left_opposition_support = temp3 }
		add_to_variable = { STG_right_opposition_support = temp4 }
		STG_check_party_variables = yes
	}
	else_if = { 
		limit = {
			check_variable = { STG_main_party_support < 71 }
		}
		set_country_flag = STG_flag_status_quo
		set_temp_variable = { temp1 = STG_main_party_support }
		divide_temp_variable = { temp1 = 4 }
		set_temp_variable = { temp2 = STG_main_party_support_2 }
		add_to_temp_variable = { temp2 = temp1 }
		multiply_temp_variable = { temp2 = 2 }
		set_temp_variable = { temp3 = STG_left_opposition_support }
		add_to_temp_variable = { temp3 = temp1 }
		multiply_temp_variable = { temp3 = 1 }
		set_temp_variable = { temp4 = STG_right_opposition_support }
		add_to_temp_variable = { temp4 = temp1 }
		multiply_temp_variable = { temp4 = 1 }
		set_temp_variable = { temp5 = STG_opposition_support }
		divide_temp_variable = { temp5 = 2 }
		add_to_variable = { STG_left_opposition_support = temp5 }
		add_to_variable = { STG_right_opposition_support = temp5 }
		add_to_variable = { STG_main_party_support_2 = temp2 }
		add_to_variable = { STG_left_opposition_support = temp3 }
		add_to_variable = { STG_right_opposition_support = temp4 }
		STG_check_party_variables = yes
	}
}
opposition_adv_STG_effect = {
	add_to_variable = {
		var = STG_main_party_support
		value = -2
		tooltip = STG_main_party_party_support_tt
	}
	add_to_variable = {
		var = STG_opposition_support
		value = 2
		tooltip = STG_opposition_support_tt
	}
	add_to_variable = {
		var = STG_main_party_influence
		value = -1 
		tooltip = STG_main_party_influence_tt
	}
	add_to_variable = {
		var = STG_opposition_influence
		value = 1 
		tooltip = STG_opposition_influence_tt
	}
	STG_check_party_variables = yes
}
karamelkas_reform_increase_5 = {
	add_to_variable = {
		var = STG_Karamelkas_reform_progress
		value = 5
		tooltip = STG_karamelkas_reform_increase_tt
	}
	check_karamelkas_variables = yes
}
karamelkas_reform_increase_10 = {
	add_to_variable = {
		var = STG_Karamelkas_reform_progress
		value = 10
		tooltip = STG_karamelkas_reform_increase_tt
	}
	check_karamelkas_variables = yes
}
karamelkas_reform_increase_15 = {
	add_to_variable = {
		var = STG_Karamelkas_reform_progress
		value = 15
		tooltip = STG_karamelkas_reform_increase_tt
	}
	check_karamelkas_variables = yes
}
karamelkas_reform_decrease_5 = {
	add_to_variable = {
		var = STG_Karamelkas_reform_progress
		value = -5
		tooltip = STG_karamelkas_reform_decrease_tt
	}
	check_karamelkas_variables = yes
}

karamelkas_reform_decrease_10 = {
	add_to_variable = {
		var = STG_Karamelkas_reform_progress
		value = -10
		tooltip = STG_karamelkas_reform_decrease_tt
	}
	check_karamelkas_variables = yes
}
karamelkas_reform_decrease_15 = {
	add_to_variable = {
		var = STG_Karamelkas_reform_progress
		value = -15
		tooltip = STG_karamelkas_reform_decrease_tt
		}
	check_karamelkas_variables = yes
}
check_karamelkas_variables = {
	clamp_variable = {
		var = STG_Karamelkas_reform_progress
		min = 0
		max = 100
	}
}

STG_wings_popularity_penalties_check = {
	
	##### Left wing influence
	
	set_temp_variable = { tmp_factories_change = STG_left_opposition_support }
	subtract_from_temp_variable = { tmp_factories_change = 50 }
	multiply_temp_variable = { tmp_factories_change = 0.003 }
	set_variable = { left_opposition_factory_influence = tmp_factories_change }
	
	#### Right wing influence
	
	set_temp_variable = { tmp_resource_change = STG_right_opposition_support }
	subtract_from_temp_variable = { tmp_resource_change = 50 }
	multiply_temp_variable = { tmp_resource_change = 0.003 }
	set_variable = { right_opposition_resources_influence = tmp_resource_change }
	
	#### Main party influence
	
	set_temp_variable = { tmp_politpower_change = STG_main_party_support }
	subtract_from_temp_variable = { tmp_politpower_change = 50 }
	multiply_temp_variable = { tmp_politpower_change = 0.003 }
	set_variable = { centrists_politpower_influence = tmp_politpower_change }
	
}

#####
##### PROPAGANDA SYSTEM #####
#####
STG_achievement_propaganda_counter_effect = {
	if = {
		limit = {
			check_variable = { var = propaganda_counter value = 1 compare = less_than }
		}
		set_variable = { var = propaganda_counter value = 1 } #setup variable
	}
	else = {
		add_to_variable = {
			propaganda_counter = 1
		}
	}
}
STG_pick_propaganda_campaign_slot_effect = {
	hidden_effect = {
		if = {
			limit = {
				check_variable = { STG_poster_left_icon_frame = STG_propaganda_empty_slot_index }
			}
			set_variable = { STG_poster_left_icon_frame = STG_new_propaganda_campaign }
			#Ageing posters
			set_variable = { STG_propaganda_left_poster_to_age = STG_poster_left_icon_frame } #This is used to prevent the system to break if a propaganda campaign is cancelled
			hidden_effect = {
				country_event = { id = Stalliongrad_propaganda_capmaign_events.101 days = STG_default_propaganda_campaign_old_days }
				#set_country_flag = { flag = STG_propaganda_left_days_remaining_flag days = STG_default_propaganda_campaign_duration } #Surprise! This doesnät work with vars :D  Maybe in the future
				if = { #Debug -> Faster time
					limit = {
						has_country_flag = STG_debug_fast_propaganda_campaigns_flag
					}
					set_country_flag = { flag = STG_propaganda_left_days_remaining_flag days = 5 }
				}
				else = { #Regular time
					set_country_flag = { flag = STG_propaganda_left_days_remaining_flag days = 180 } #Need code support to use a var here
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { STG_poster_center_icon_frame = STG_propaganda_empty_slot_index }
			}
			set_variable = { STG_poster_center_icon_frame = STG_new_propaganda_campaign }
			#Ageing posters
			set_variable = { STG_propaganda_center_poster_to_age = STG_poster_center_icon_frame } #This is used to prevent the system to break if a propaganda campaign is cancelled
			hidden_effect = {
				country_event = { id = Stalliongrad_propaganda_capmaign_events.102 days = STG_default_propaganda_campaign_old_days }
				#set_country_flag = { flag = STG_propaganda_center_days_remaining_flag days = STG_default_propaganda_campaign_duration } #Surprise! This doesnät work with vars :D  Maybe in the future
				if = { #Debug -> Faster time
					limit = {
						has_country_flag = STG_debug_fast_propaganda_campaigns_flag
					}
					set_country_flag = { flag = STG_propaganda_center_days_remaining_flag days = 5 }
				}
				else = { #Regular time
					set_country_flag = { flag = STG_propaganda_center_days_remaining_flag days = 180 } #Need code support to use a var here
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { STG_poster_right_icon_frame = STG_propaganda_empty_slot_index }
			}
			set_variable = { STG_poster_right_icon_frame = STG_new_propaganda_campaign }
			#Ageing posters
			set_variable = { STG_propaganda_right_poster_to_age = STG_poster_right_icon_frame } #This is used to prevent the system to break if a propaganda campaign is cancelled
			hidden_effect = {
				country_event = { id = Stalliongrad_propaganda_capmaign_events.103 days = STG_default_propaganda_campaign_old_days }
				#set_country_flag = { flag = STG_propaganda_right_days_remaining_flag days = STG_default_propaganda_campaign_duration } #Surprise! This doesnät work with vars :D  Maybe in the future
				if = { #Debug -> Faster time
					limit = {
						has_country_flag = STG_debug_fast_propaganda_campaigns_flag
					}
					set_country_flag = { flag = STG_propaganda_right_days_remaining_flag days = 5 }
				}
				else = { #Regular time
					set_country_flag = { flag = STG_propaganda_right_days_remaining_flag days = 180 } #Need code support to use a var here
				}
			}
		}
		set_variable = { STG_new_propaganda_campaign = 0 } # Reset var
		add_to_variable = { STG_propaganda_campaigns_taken = 1 } #Update propaganda campaigns counter
	}
}

STG_reset_propaganda_campaign_slot_effect = {
	hidden_effect = {
		if = {
			limit = {
				check_variable = { STG_poster_left_icon_frame = STG_propaganda_campaign_to_remove }
			}
			set_variable = { STG_poster_left_icon_frame = STG_propaganda_empty_slot_index }
			#Clear aged posters
			clear_variable = STG_propaganda_left_poster_to_age
			clr_country_flag = STG_propaganda_left_slot_is_old_flag
		}
		else_if = {
			limit = {
				check_variable = { STG_poster_center_icon_frame = STG_propaganda_campaign_to_remove }
			}
			set_variable = { STG_poster_center_icon_frame = STG_propaganda_empty_slot_index }
			#Clear aged posters
			clear_variable = STG_propaganda_center_poster_to_age
			clr_country_flag = STG_propaganda_center_slot_is_old_flag
		}
		else_if = { #This could be turned into an else, but leaving it like this to hopefully make it easier to see
			limit = {
				check_variable = { STG_poster_right_icon_frame = STG_propaganda_campaign_to_remove }
			}
			set_variable = { STG_poster_right_icon_frame = STG_propaganda_empty_slot_index }
			#Clear aged posters
			clear_variable = STG_propaganda_right_poster_to_age
			clr_country_flag = STG_propaganda_right_slot_is_old_flag
		}
		set_variable = { STG_propaganda_campaign_to_remove = 0 } # Reset var
	}
}

STG_unlock_propaganda_campaign_slot_effect = {
	hidden_effect = {
		if = {
			limit = {
				check_variable = { STG_poster_left_icon_frame = STG_propaganda_locked_slot_index }
			}
			set_variable = { STG_poster_left_icon_frame = STG_propaganda_empty_slot_index }
		}
		else_if = {
			limit = {
				check_variable = { STG_poster_center_icon_frame = STG_propaganda_locked_slot_index }
			}
			set_variable = { STG_poster_center_icon_frame = STG_propaganda_empty_slot_index }
		}
		else = {
			set_variable = { STG_poster_right_icon_frame = STG_propaganda_empty_slot_index }
		}
	}
}

STG_increase_propaganda_campaign_cost_effect = {
	multiply_variable = { STG_propaganda_cost = STG_propaganda_cost_increase } #Using generic var STG_propaganda_cost so that we only need to change this operation to tweak all propagandas' cost escalation
}

STG_check_needle_and_value_reforms = {
	set_temp_variable = { stg_karref_value = STG_reforms_counterpower }
	multiply_temp_variable = { stg_karref_value = 100 }
	divide_temp_variable = { stg_karref_value = 5 }
	subtract_from_temp_variable = { stg_karref_value = 0.5 }
	round_temp_variable = stg_karref_value
	if = {
		limit = {
			check_variable = { STG_reforms_counterpower > 0 }
		}
		add_to_temp_variable = { stg_karref_value = 1 }
	}
	set_variable = { STG_reforms_needle_frame = stg_karref_value }
}

STG_launch_new_counterref_event = {
	
	random_list = {
		1 = {
			country_event = { id = stalliongrad_reforms.1 days = 50 random_days = 10 }
		}
		1 = {
			country_event = { id = stalliongrad_reforms.2 days = 50 random_days = 10 }
		}
		1 = {
			modifier = {
				factor = 0
				check_variable = { STG_reforms_counterpower < 0.3 }
			}
			country_event = { id = stalliongrad_reforms.3 days = 50 random_days = 10 }
		}
		1 = {
			modifier = {
				factor = 0
				check_variable = { STG_reforms_counterpower < 0.3 }
			}
			country_event = { id = stalliongrad_reforms.4 days = 50 random_days = 10 }
		}
		1 = {
			modifier = {
				factor = 0
				check_variable = { STG_reforms_counterpower < 0.5 }
			}
			country_event = { id = stalliongrad_reforms.5 days = 50 random_days = 10 }
		
		}
		1 = {
			modifier = {
				factor = 0
				check_variable = { STG_reforms_counterpower < 0.5 }
			}
			country_event = { id = stalliongrad_reforms.6 days = 50 random_days = 10 }
		
		}
		1 = {
			modifier = {
				factor = 0
				check_variable = { STG_reforms_counterpower < 0.75 }
			}
			country_event = { id = stalliongrad_reforms.7 days = 50 random_days = 10 }
		
		}
		1 = {
			modifier = {
				factor = 0
				check_variable = { STG_reforms_counterpower < 0.75 }
			}
			country_event = { id = stalliongrad_reforms.8 days = 50 random_days = 10 }
		
		}
	}
	
}
	
STG_expand_counterreforms_progress = {	

	add_to_variable = {
		var = STG_reforms_counterpower
		value = tmp_counterref
		tooltip = STG_expand_counter_reform_progress
	}
	clamp_variable = {
		var = STG_reforms_counterpower
		min = 0
		max = 1
	}
	
	STG_check_needle_and_value_reforms = yes 
}
	
# COMECON effects #

# Function    : STG_add_scope_to_comecon
# Description : Add the current scope to the COMECON. Exemple : EQS = { STG_add_scope_to_comecon }
# Inputs      : None
# Outputs     : None
STG_add_scope_to_comecon = {
	# Sanity check - The coutnry is not already in it
	if = {
		limit = {
			NOT = {
				is_in_array = { STG.STG_COMECON_majors_array = THIS }
				is_in_array = { STG.STG_COMECON_minors_array = THIS }
			}
		}
		# Update the COMECON SGUI
		if = {
			limit = {
				STG_is_major_comecon = yes
			}

			add_to_array = {
				array = STG.STG_COMECON_majors_array
				value = THIS
			}
		} else = {
			add_to_array = {
				array = STG.STG_COMECON_minors_array
				value = THIS
			}
		}

		# Update the COMECON modifier
		STG_update_comecon_modifier = yes

		# Add the dynamic modifier for the nex member of the COMECON
		#STG_add_comecon_dynamic_variable = yes
	}
}


# Function    : STG_remove_scope_to_comecon
# Description : Remove the current scope from the COMECON. Exemple : EQS = { STG_remove_scope_to_comecon }
# Inputs      : None
# Outputs     : None
STG_remove_scope_to_comecon = {
	# Sanity check - The country is in the COMECON
	if = {
		limit = {
			OR = {
				is_in_array = { STG.STG_COMECON_majors_array = THIS }
				is_in_array = { STG.STG_COMECON_minors_array = THIS }
			}
		}
		
		# Update the COMECON SGUI
		if = {
			limit = {
				is_in_array = { STG.STG_COMECON_majors_array = THIS }
			}

			remove_from_array = {
				array = STG.STG_COMECON_majors_array
				value = THIS
			}
		} else = {
			remove_from_array = {
				array = STG.STG_COMECON_minors_array
				value = THIS
			}
		}

		# Update the COMECON leader dynamic modifier if necessary
		STG_update_comecon_modifier = yes

		# Remove the COMECON member dynamic modifier for the current scope
		STG_remove_comecon_dynamic_variable = yes
	}
}

# Function    : STG_update_comecon_modifier
# Description : Update the contribution and the comecon modifier
# Inputs      : None
# Outputs     : None
STG_update_comecon_modifier = {
	STG_get_total_comecon_strength = yes
	STG_update_comecon_modifier_values = yes
	force_update_dynamic_modifier = yes
}

@COMECON_CONTRIB_MAX_MULT    = 2
@COMECON_CONTRIB_FORM_FACTOR = 0.05

# Function    : STG_scope_comecon_contribution
# Description : Compute the contribution to the Comecon for the current scope. It is between 1 and @COMECON_CONTRIB_MAX_MULT
#                A hyperbol : f(x) = (1 + a*b*x) / (1 + b*x) with x the number of civilian factory
#                                                                 a the maximum contribution
#                                                                 b the form factor (How fast the function clim to the a value)
# Inputs      : None
# Outputs     : o_contribution - The current scope contribution
STG_scope_comecon_contribution = {
	set_temp_variable = { temp_den = num_of_civilian_factories }
	multiply_temp_variable = { temp_den = @COMECON_CONTRIB_FORM_FACTOR }
	add_to_temp_variable = { temp_den = 1 }

	set_temp_variable = { o_contribution = num_of_civilian_factories }
	multiply_temp_variable = { o_contribution = @COMECON_CONTRIB_MAX_MULT }
	multiply_temp_variable = { o_contribution = @COMECON_CONTRIB_FORM_FACTOR }
	add_to_temp_variable = { o_contribution = 1 }

	divide_temp_variable = { o_contribution = temp_den }
}

# Function    : STG_get_total_comecon_strength
# Description : Return the current Comecon strength
# Inputs      : None
# Outputs     : STG.STG_comecon_strength - The current Comecon strength
STG_get_total_comecon_strength = {
	# Get STG contribution
	STG = { STG_scope_comecon_contribution = yes }
	set_variable = { STG.STG_comecon_strength = o_contribution }

	# Get the majors contribution
	for_each_scope_loop = {
		array = STG.STG_COMECON_majors_array

		STG_scope_comecon_contribution = yes
		add_to_variable = { STG.STG_comecon_strength = o_contribution }
	}
	# Get the minors contribution
	for_each_scope_loop = {
		array = STG.STG_COMECON_minors_array

		STG_scope_comecon_contribution = yes
		add_to_variable = { STG.STG_comecon_strength = o_contribution }
	}
}

@COMECON_CONTRIBUTION_FOR_MAX_BONUS = 8

@COMECON_FACTORY_OUTPUT_MIN   = 0.05
@COMECON_FACTORY_OUTPUT_BONUS = 0.15 # Max bonus 20% (Min + Bonus)

# Function    : STG_update_comecon_modifier_values
# Description : Compute the dynamic modifier value depending on the current Comecon value
# Inputs      : None
# Outputs     : None
STG_update_comecon_modifier_values = {
	# Compute the current contribution factor
	set_temp_variable = { temp_factor = STG.STG_comecon_strength }
	clamp_temp_variable = {
		var = temp_factor
		min = 1
		max = @COMECON_CONTRIBUTION_FOR_MAX_BONUS
	}
	divide_temp_variable = { temp_factor = @COMECON_CONTRIBUTION_FOR_MAX_BONUS }

	# Factory output
	set_variable = { STG.STG_comecon_factory_output = @COMECON_FACTORY_OUTPUT_BONUS }
	multiply_variable = { STG.STG_comecon_factory_output = temp_factor }
	add_to_variable = { STG.STG_comecon_factory_output = @COMECON_FACTORY_OUTPUT_MIN }
}

# Function    : STG_add_comecon_dynamic_variable
# Description : Adds the correct dynamic variable to the current scope
# Inputs      : None
# Outputs     : None
STG_add_comecon_dynamic_variable = {
	if = {
		limit = {
			STG = {
				has_country_leader = {
					character = STG_vasiliy_wheatin
					ruling_only = yes
				}
			}
		}
		add_dynamic_modifier = {
			modifier = STG_comecon_member_vasily
		}
	}
	else_if = {
		limit = {
			STG = {
				has_country_leader = {
					character = STG_caramelka_sladkaya
					ruling_only = yes
				}
			}
		}
		add_dynamic_modifier = {
			modifier = STG_comecon_member_karamelka
		}
	}
	else_if = {
		limit = {
			STG = {
				has_country_leader = {
					character = STG_sinister_serov
					ruling_only = yes
				}
			}
		}
		add_dynamic_modifier = {
			modifier = STG_comecon_member_sinister
		}
	}
	else_if = {
		limit = {
			STG = {
				has_country_leader = {
					character = STG_masha_norushkina
					ruling_only = yes
				}
			}
		}
		add_dynamic_modifier = {
			modifier = STG_comecon_member_masha
		}
	}
}

# Function    : STG_remove_comecon_dynamic_variable
# Description : Adds the correct dynamic variable to the current scope
# Inputs      : None
# Outputs     : None
STG_remove_comecon_dynamic_variable = {
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = STG_comecon_member_vasily
			}
		}
		remove_dynamic_modifier = {
			modifier = STG_comecon_member_vasily
		}
	}
	else_if = {
		limit = {
			has_dynamic_modifier = {
				modifier = STG_comecon_member_karamelka
			}
		}
		remove_dynamic_modifier = {
			modifier = STG_comecon_member_karamelka
		}
	}
	else_if = {
		limit = {
			has_dynamic_modifier = {
				modifier = STG_comecon_member_sinister
			}
		}
		remove_dynamic_modifier = {
			modifier = STG_comecon_member_sinister
		}
	}
	else_if = {
		limit = {
			has_dynamic_modifier = {
				modifier = STG_comecon_member_masha
			}
		}
		remove_dynamic_modifier = {
			modifier = STG_comecon_member_masha
		}
	}
}