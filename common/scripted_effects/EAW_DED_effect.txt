DED_startup = {

	set_technology = {
		DED_starting_tech = 1
		DED_tech_mage_kit = 1
		DED_tech_first_seal = 1
		DED_tech_necromancy = 1
		DED_tech_soul_cleansing = 1
		DED_ancient_warfare = 1
		popup = no
	}
	load_oob = "DED_1007"
	add_equipment_to_stockpile = {
		type = DED_undead_equipment_0
    	amount = 900
	}
	add_equipment_to_stockpile = {
		type = DED_mage_equipment_0
    	amount = 900
	}
	add_equipment_to_stockpile = {
		type = DED_mage_equipment_1
    	amount = 900
	}

	load_focus_tree = DED_START
	#army_experience = 100
	#set_variable = { DED_undead_production = 735 }
	#country_event = { id = dread.1 days = 3 }


	add_dynamic_modifier = {
	    modifier = DED_thaumaturgia
	}

	set_variable = { DED_test_var = 1}

	DED_catacomb_startup = yes


	DED_setup_gui = yes

	set_country_flag = DED_magic_schools

	DED_the_thaumaturgia_init = yes
}

DED_monthly = {
	if = {
		limit = {
			has_country_flag = DED_catacomb_system_active
		}
		DED_catacomb_system_loop = yes
	}
	DED_the_thaumaturgia_update = yes
}

#DED GUI stuff
#{
	DED_setup_gui = {
		add_to_array = { DED_gui_pos = 0}
		add_to_array = { DED_gui_pos = 1}
		add_to_array = { DED_gui_pos = 2}
		add_to_array = { DED_gui_pos = 3}

		add_to_array = { DED_gui_pos_y = 7}
		add_to_array = { DED_gui_pos_y = 41}
		add_to_array = { DED_gui_pos_y = 75}
		add_to_array = { DED_gui_pos_y = 109}

		add_to_array = { DED_gui_pos_y_bg = 0}
		add_to_array = { DED_gui_pos_y_bg = 34}
		add_to_array = { DED_gui_pos_y_bg = 68}
		add_to_array = { DED_gui_pos_y_bg = 102}
	}




	DED_gui_increase_priority = {
		# DED_gui_ID is the ID of the "part" moved


		if = {
			limit = {
				check_variable = { DED_gui_pos^DED_gui_ID > 0}
			}
			set_temp_variable = { x = DED_gui_pos^DED_gui_ID }
			subtract_from_temp_variable = { x = 1}


			for_each_loop = {
				array = DED_gui_pos
				if = {
					limit = {
						check_variable = { DED_gui_pos^i = x }
					}
					set_temp_variable = { break = 1 }
				}
			}
			set_variable = { DED_gui_found_i = i }

			set_temp_variable = { tempinc_y = DED_gui_pos_y^DED_gui_ID }
			set_temp_variable = { tempinc_y_bg = DED_gui_pos_y_bg^DED_gui_ID }

			set_temp_variable = { newtempinc_y = DED_gui_pos_y^DED_gui_found_i }
			set_temp_variable = { newtempinc_y_bg = DED_gui_pos_y_bg^DED_gui_found_i }


			set_variable = { DED_gui_pos_y^DED_gui_ID = newtempinc_y }
			set_variable = { DED_gui_pos_y_bg^DED_gui_ID = newtempinc_y_bg }

			set_variable = { DED_gui_pos_y^DED_gui_found_i = tempinc_y }
			set_variable = { DED_gui_pos_y_bg^DED_gui_found_i = tempinc_y_bg }

			set_variable = { DED_gui_pos^i = DED_gui_pos^DED_gui_ID }
			set_variable = { DED_gui_pos^DED_gui_ID = x }

		}
	}

	DED_gui_decrease_priority = {
		# DED_gui_ID is the ID of the "part" moved


		if = {
			limit = {
				check_variable = { DED_gui_pos^DED_gui_ID < 3}
			}
			set_temp_variable = { x = DED_gui_pos^DED_gui_ID }
			add_to_temp_variable = { x = 1}


			for_each_loop = {
				array = DED_gui_pos
				if = {
					limit = {
						check_variable = { DED_gui_pos^i = x }
					}
					set_temp_variable = { break = 1 }
				}
			}
			set_variable = { DED_gui_found_i = i }

			set_temp_variable = { tempinc_y = DED_gui_pos_y^DED_gui_ID }
			set_temp_variable = { tempinc_y_bg = DED_gui_pos_y_bg^DED_gui_ID }

			set_temp_variable = { newtempinc_y = DED_gui_pos_y^DED_gui_found_i }
			set_temp_variable = { newtempinc_y_bg = DED_gui_pos_y_bg^DED_gui_found_i }


			set_variable = { DED_gui_pos_y^DED_gui_ID = newtempinc_y }
			set_variable = { DED_gui_pos_y_bg^DED_gui_ID = newtempinc_y_bg }

			set_variable = { DED_gui_pos_y^DED_gui_found_i = tempinc_y }
			set_variable = { DED_gui_pos_y_bg^DED_gui_found_i = tempinc_y_bg }

			set_variable = { DED_gui_pos^i = DED_gui_pos^DED_gui_ID }
			set_variable = { DED_gui_pos^DED_gui_ID = x }

		}
	}
#}


#DED Stitcher fuckery experiments
#{
	DED_stitcher_test = {
		create_equipment_variant = {
			name = "Abomination"
			type = DED_abomination_equipment_1
			parent_version = 0
			is_buildable = no
			modules = {
				main_armament_slot = DED_tank_heavy_machine_gun
			}
			icon = "gfx/interface/technologies/gwtank.dds"
		}
		create_equipment_variant = {
			name = "Abomination 2.0"
			type = DED_abomination_equipment_1
			parent_version = 0
			is_buildable = no
			modules = {
				main_armament_slot = DED_tank_heavy_machine_gun
			}
			upgrades = {
				DED_abomination_upgrade = 1
				DED_abomination_eng_upgrade = 15
			}
			icon = "gfx/interface/technologies/gwtank.dds"
		}		
		add_equipment_to_stockpile = {
			type = DED_abomination_equipment_1
	    	amount = 900
	    	producer = DED
	    	variant_name = "Abomination"
		}
		add_equipment_to_stockpile = {
			type = DED_abomination_equipment_1
	    	amount = 900
	    	producer = DED
	    	variant_name = "Abomination 2.0"
		}
	}
#}


#Welcome to my personal purgatory
#Integer limits are in the air
#Gaze upon my work ye mighty
#And despair.




DED_catacomb_system_loop = {
	DED_catacomb_corpse_gain = yes
	DED_mage_gain = yes
	DED_catacomb_gain_undead_base = yes
	DED_undead_attrition = yes
	DED_catacomb_gain_undead = yes
}

DED_catacomb_startup = {
	set_variable = { DED_corpse_stockpile = 100 }	#This variable stores the amount of corpses in store. It's in hundreds for the sake of not going over the bloody integer limit.
	set_variable = { DED_death_rate = 20 }			#What a joyous variable, the death rate per 1000 people in the dread league's territory! (it's pretty high innit?)

	set_variable = { DED_mage_ressurectors = 200 }
	set_variable = { DED_mage_ressurection_rate = 10 }


	set_variable = { DED_mage_teachers = 50 }
	set_variable = { DED_mage_teaching_rate = 0.04 }
	set_variable = { DED_mage_prod = 0}

	set_variable = { DED_mage_unassigned = 50 }

	set_variable = { DED_mage_auto_assignment = 0 }

	set_country_flag = DED_catacomb_system_active
	DED_catacomb_system_loop = yes
}



#Calculates the Number of corpses gained each months. Adds them to ze corpse stockpile Simple as
DED_catacomb_corpse_gain = {
	set_temp_variable = { DED_temp_death_rate = DED_death_rate }
	divide_temp_variable = { DED_temp_death_rate = 12 }
	set_temp_variable = { DED_total = max_manpower_k }
	divide_temp_variable = { DED_total = 100 }
	multiply_temp_variable = { DED_total = DED_temp_death_rate }
	round_temp_variable = DED_total

	set_variable = { DED_corpse_production = DED_total }
	add_to_variable = { DED_corpse_stockpile = DED_corpse_production }
}



#Calculate the reproduc- uh ... schooling rate of mages? yes. Schooling Rate.
DED_mage_gain = {

	#First, we calculate the new state of production. Kinda the same system as IC in game. Except here it's be ... Schooling Capacity?	
	#Essentially, Teachers teach less than one student per month (in the sense, that a teacher will have to take some 30 months of personal time to teach to one student.)

	set_variable = { DED_mage_monthly_prod = DED_mage_teachers }
	multiply_variable = { DED_mage_monthly_prod = DED_mage_teaching_rate }

	add_to_variable = { DED_mage_prod = DED_mage_monthly_prod }

	set_variable = { DED_effective_mage_prod = DED_mage_prod }
	round_variable = DED_effective_mage_prod
	if = { #If DED_mage_prod's decimal is >0.5, it'll round up instead of down. We always want it to round down, so:
		limit = { check_variable = { DED_effective_mage_prod > DED_mage_prod }}
		subtract_from_temp_variable = { DED_effective_mage_prod = 1}
	}

	#From that, we now remove the 'produced' mages, and send them to wherever they work.

	subtract_from_variable = { DED_mage_prod = DED_effective_mage_prod}

	if = {	
		limit = { check_variable = { DED_mage_auto_assignment = 0 }	}	

		add_to_variable = { DED_necromancer_teachers = DED_effective_mage_prod }
	}
	else_if = {			#Military Auto Assignment
		limit = { check_variable = { DED_mage_auto_assignment = 1 }	}	

		add_equipment_to_stockpile = {
			type = DED_mage_equipment
	    	amount = var:DED_effective_mage_prod
	    	producer = DED
		}
	}
	else_if = {		#Schooling Auto Assignment
		limit = { check_variable = { DED_mage_auto_assignment = 2 }	}	

		add_to_variable = { DED_mage_teachers = DED_effective_mage_prod }
	}
	else_if = {		#Ressurection Auto Assignment
		limit = { check_variable = { DED_mage_auto_assignment = 3 }	}

		add_to_variable = { DED_mage_ressurectors = DED_effective_mage_prod }
	}
}

DED_undead_attrition = {

	#LOSSES IN ARMY

	set_variable = { DED_undead_in_army_reliability = 0.99 }

	set_variable = { DED_undead_in_army_reliability_final = 1 }
	subtract_from_variable = { DED_undead_in_army_reliability_final = DED_undead_in_army_reliability }
	multiply_variable = { DED_undead_in_army_reliability_final = 100 }

	set_variable = { DED_undead_in_army = num_equipment_in_armies@DED_undead_equipment }
	set_variable = { DED_undead_in_reserve = num_equipment@DED_undead_equipment }
	set_variable = { DED_undead_in_army_lost = DED_undead_in_army }
	multiply_variable = { DED_undead_in_army_lost = DED_undead_in_army_reliability_final }



	#LOSSES IN INDUSTRY


	set_variable = { DED_undead_in_industry_lost = 0 }

	#LOSSES IN SUPPLY



	set_variable = { DED_undead_in_supply_lost = 0 }


	#Total losses

	set_variable = { DED_undead_total_losses = DED_undead_in_army_lost }
	add_to_variable = { DED_undead_total_losses = DED_undead_in_industry_lost }
	add_to_variable = { DED_undead_total_losses = DED_undead_in_supply_lost }

}

DED_catacomb_gain_undead_base = {
	set_variable = { DED_undead_monthly_prod = DED_necromancer_ressurectors }
	multiply_variable = { DED_undead_monthly_prod = DED_necromancer_ressurection_rate }

	#We need a stockpile of undeads on the per unit level .... I need to setup some arrays to keep numbers that can go in the 2+ millions
}


DED_catacomb_gain_undead = {
	set_variable = { DED_undead_gain = DED_undead_monthly_prod }

	set_variable = { DED_effective_change = DED_undead_gain }
	subtract_from_variable = { DED_effective_change = DED_undead_total_losses }

	if = {
		limit = { check_variable = { DED_undead_total_losses > DED_undead_gain }}

		#Oh god oh fuck we are losing undeads from attritionhye's
	}
	else = {
		subtract_from_variable = { DED_undead_gain = DED_undead_total_losses }

		round_temp_variable = DED_undead_gain

		add_to_variable = { DED_undead_inactive_stockpile = DED_undead_gain }

		#add_equipment_to_stockpile = {
		#	type = DED_undead_equipment
		#	amount = var:DED_undead_equipement_gain
		#}
	}
}


DED_catacomb_military_impact = {
	set_variable = { DED_army_size_undead = num_battalions_with_type@DED_unit_undead_horde }

	set_variable = { DED_army_size_total = num_battalions }

	set_variable = { DED_undead_army_ratio = DED_army_size_undead}
	divide_variable = { DED_undead_army_ratio = DED_army_size_total}

	#This might not actually be needed since I now have created fancy modifiers for undead hordes. Can be used for something else tho, like a little "info" bit or smth
}

DED_catacomb_undead_pools_changes = {
	
	if = {
		limit = {
			check_variable = { DED_cat_sys_priority_var = DED_cat_sys_priority_var_army }
		}
	}
	else_if = {
		limit = {
			check_variable = { DED_cat_sys_priority_var = DED_cat_sys_priority_var_army }
		}

	}
	else_if = {
		limit = {
			check_variable = { DED_cat_sys_priority_var = DED_cat_sys_priority_var_army }
		}

	}
	else_if = {
		limit = {
			check_variable = { DED_cat_sys_priority_var = DED_cat_sys_priority_var_army }
		}

	}
	else_if = {
		limit = {
			check_variable = { DED_cat_sys_priority_var = DED_cat_sys_priority_var_army }
		}

	}

	if = {
		limit = {
			OR = {
				AND = {
					check_variable = { DED_cat_sys_priority_var > 0 }
				}
				AND = {
					check_variable = { DED_cat_sys_priority_var < DED_cat_sys_active_systems }
				}
			}
		}
		subtract_from_variable = { DED_cat_sys_priority_var = 1 }
		DED_catacomb_undead_pools_changes = yes
	}
}



###############################
###   THAUMATURGIA SYSTEM   ###
###############################
#Brackets for ease of use{
	DED_the_thaumaturgia_init = {

		#Free Mages shall always be referenced unitarily. I doubt the player will be able to get over two million mages ... right?
		set_variable = { DED_free_mages = 23451 }
		set_variable = { DED_magic_school_current_staff = 2000 }
		set_variable = { DED_magic_school_max_staff = 2000 }
		DED_mage_calculations = yes
	}

	DED_the_thaumaturgia_update = {
		add_to_variable = { DED_free_mages = DED_thaum_mg }
		DED_mage_calculations = yes
	}

	DED_mage_calculations = {
		
		#Mage Effect calculation
			#Expected Max Ratio: 1 mage / 100 pop? 
				#Ex: For 1 910 000pop, we'd need 19 100 Mages in non military service to achieve peak performance.
				#With the extra pop from HLR, we'd have a around 5.5 million pop, meaning we'd need 55 000 mages to reach peak productivity.
				#Pop in k would be: 5500. So I'd need to ... divide mages by 10 and I'd have 5500 for 5500

		set_variable = { DED_mage_to_pop_ratio = DED_free_mages }
		divide_variable = { DED_mage_to_pop_ratio = 10 }
		divide_variable = { DED_mage_to_pop_ratio = max_manpower_k }
		clamp_variable = {
			var = DED_mage_to_pop_ratio
			min = 0
			max = 1
		}
		set_variable = { DED_mage_pop_perc = 1 }
		divide_variable = { DED_mage_pop_perc = DED_mage_to_pop_ratio }
		multiply_variable = { DED_mage_pop_perc = 100 }



		set_variable = { DED_free_mage_cg = -0.05 }		#Consumer Goods
		set_variable = { DED_free_mage_rs = 0.05 }		#Research Speed
		set_variable = { DED_free_mage_tr = -0.05 }		#Thaumaturgic Research

		set_variable = { DED_free_mage_mg = DED_free_mages }		#Mage Gain


		#Added bit of a randomness:
		set_temp_variable_to_random = {
			var = DED_random_mg
			max = 50
			integer = yes
		}
		add_to_variable = { DED_free_mage_mg = DED_random_mg }


		multiply_variable = { DED_free_mage_cg = DED_mage_to_pop_ratio }	#Consumer Goods
		multiply_variable = { DED_free_mage_rs = DED_mage_to_pop_ratio }	#Research Speed
		multiply_variable = { DED_free_mage_tr = DED_mage_to_pop_ratio }	#Thaumaturgic Research

		divide_variable = { DED_free_mage_mg = 100 }	#Mage Gain
		round_variable = DED_free_mage_mg


		###########################
		###   CATACOMB SYSTEM   ###
		###########################

		
		set_variable = { DED_catacomb_production = DED_catacomb_current_staff }	#Current Staff in Catacombs

		set_variable = { DED_catacomb_undead_production = 30 }	#Current Staff in Catacombs

		multiply_variable { DED_catacomb_undead_production = DED_catacomb_production } #Each worker produce 30 undeads a day. Might be a lot tho.



		##############################
		###   RESEARCH DIVISIONS   ###
		##############################


		#Reversed from Magic school to gain a percentile increase. For example, 20% fullfilment means 5 times slower research
		divide_variable = { DED_RD_staff_fullfilment = DED_RD_max_staff }	#Max Staff in RD
		set_variable = { DED_RD_staff_fullfilment = DED_RD_current_staff }	#Current Staff in RD

		set_variable = { DED_RD_mg = 1000 }	#Mage Gain


		multiply_variable = { DED_magic_school_mg = DED_magic_school_staff_fullfilment }	#Mage Gain
		round_variable = DED_magic_school_mg



		#########################
		###   SCHOOL SYSTEM   ###
		#########################

		if = {
			limit = {
				has_country_flag = DED_magic_schools
			}

			set_variable = { DED_magic_school_staff_fullfilment = DED_magic_school_current_staff }	#Current Staff in Schools
			divide_variable = { DED_magic_school_staff_fullfilment = DED_magic_school_max_staff }	#Max Staff in Schools

			set_variable = { DED_magic_school_mg = 1000 }	#Mage Gain


			multiply_variable = { DED_magic_school_mg = DED_magic_school_staff_fullfilment }	#Mage Gain
			round_variable = DED_magic_school_mg
		}


		#############################
		###   PRODUCTION SYSTEM   ###
		#############################


		if = {
			limit = {
				has_country_flag = DED_stitcher_production
			}

			set_variable = { DED_prod_staff_fullfilment = DED_prod_current_staff }	#Current Staff in Schools
			divide_variable = { DED_magic_school_staff_fullfilment = DED_magic_school_max_staff }	#Max Staff in Schools

			set_variable = { DED_magic_school_mg = 1000 }	#Mage Gain


			multiply_variable = { DED_magic_school_mg = DED_magic_school_staff_fullfilment }	#Mage Gain
			round_variable = DED_magic_school_mg
		}



		############################
		###   SUM OF MODIFIERS   ###
		############################


		#Consumer Goods
		set_variable = { DED_thaum_cg = DED_free_mage_cg }
		#add_to_variable = { DED_thaum_cg =  }

		#Research Speed
		set_variable = { DED_thaum_rs = DED_free_mage_rs }
		#add_to_variable = { DED_thaum_rs =  }

		#Thaumaturgic Research
		set_variable = { DED_thaum_tr = DED_free_mage_tr }
		#add_to_variable = { DED_thaum_tr =  }

		#Mage Gain
		set_variable = { DED_thaum_mg = DED_free_mage_mg }
		add_to_variable = { DED_thaum_mg = DED_magic_school_mg }
		
	}


	#Undefined Variables currently:
	#
	#



	#set_variable = { DED_thaumaturgia_project_price = 100 }
	#set_temp_variable = { temp_price_mult = 1 }
	#add_to_temp_variable = { temp_price_mult = modifier@DED_thaumaturgic_magic_research_speed }
	#multiply_temp_variable = { DED_thaumaturgia_project_price = temp_price_mult }
#}








#MAGE GAIN TOTAL FUNC

#This function should only be called when there's a change.
#It calculates the teached mage gain by adding the number of working teaching mages * their teaching capacity, all of it multiplied by a mage teaching efficiency rate.

# DED_mage_gain_teaching is total mage gain from teachers. NOT ENABLED AT START!

DED_teaching_mage_gain_calc = {
	set_temp_variable = { teaching_cap = 0 }
	for_loop_effect = {
		end = 5
		value = i
		set_temp_variable = { teaching_capacity^i = DED_teaching_mage^i }
		multiply_temp_variable = { teaching_capacity^i = DED_teaching_rate_teacher_mage^i }
		add_to_variable = { teaching_cap = teaching_capacity^i }
	}

	#Multiply the teaching capacity generated by the efficiency modifier.
	multiply_temp_variable = { teaching_cap = modifier@DED_mage_teaching_efficiency }

	#Round it up to get the integer value of it all and save it in a non temp variable.
	round_variable = teaching_cap
	set_variable = { DED_mage_gain_teaching = teaching_cap }
}

#

DED_civilian_mage_gain_calc = {
	set_temp_variable = { teaching_cap = 0 }


	set_temp_variable = { civ_mage^0 = num_equipment@DED_mage_equipment_0 }
	set_temp_variable = { civ_mage^1 = num_equipment@DED_mage_equipment_1 }
	set_temp_variable = { civ_mage^2 = num_equipment@DED_mage_equipment_2 }
	set_temp_variable = { civ_mage^3 = num_equipment@DED_mage_equipment_3 }
	set_temp_variable = { civ_mage^4 = num_equipment@DED_mage_equipment_4 }

	for_loop_effect = {
		end = 5
		value = i
		multiply_temp_variable = { civ_mage^i = DED_teaching_rate_civilian_mage^i }
		divide_temp_variable = { civ_mage^i = 5 } #Mages working as civies only give about a fifth of what dedicated teachers mages do.
		add_to_variable = { teaching_cap = civ_mage^i }
	}

	#Multiply the teaching capacity generated by the efficiency modifier. CURRENTLY DISABLED (may add a specific one for civilian teaching if I find the need for it)
	#multiply_temp_variable = { teaching_cap = modifier@DED_mage_teaching_efficiency }.


	#Round it up to get the integer value of it all and save it in a non temp variable.
	round_variable = teaching_cap
	set_variable = { DED_mage_gain_civilian = teaching_cap }
}







DED_change_teacher_training_rates = {
	set_temp_variable = { total_teachers = 0 }

	for_loop_effect = {
		end = 5
		value = i
		add_to_temp_variable = { total_teachers = DED_teaching_mage^i }
	}

	for_loop_effect = {
		end = 5
		value = i
		set_temp_variable = { teacher_per^i = DED_teaching_mage^i }
		multiply_temp_variable = { teacher_per^i = 100}
		divide_temp_variable = { teacher_per^i = total_teachers }
	}


	set_variable = { DED_odd_offset^0 = 0 }
	set_variable = { DED_odd_offset^1 = 0 }
	set_variable = { DED_odd_offset^2 = 0 }
	set_variable = { DED_odd_offset^3 = 0 }
	set_variable = { DED_odd_offset^4 = 0 }



	#AWFUL
	
	#DED_odd_offset[0] = teacher_per_diff;
	#DED_odd_offset[1] = teacher_per_diff/4;
	#DED_odd_offset[3] = -teacher_per_diff/4;
	#DED_odd_offset[4] = -teacher_per_diff;

	set_temp_variable = { teacher_per_diff = teacher_per^0 }
	divide_temp_variable = { teacher_per_diff = DED_teacher_effect_divider }

	add_to_variable = { DED_odd_offset^0 = teacher_per_diff }

	divide_temp_variable = { teacher_per_diff = 4 }
	add_to_variable = { DED_odd_offset^1 = teacher_per_diff }

	#add_to_variable = { DED_odd_offset^2 =  }

	set_temp_variable = { inv_teacher_per_diff = 0 }
	subtract_from_temp_variable = {inv_teacher_per_diff = teacher_per_diff }

	add_to_variable = { DED_odd_offset^3 = inv_teacher_per_diff }

	multiply_temp_variable = { inv_teacher_per_diff = 4 }
	add_to_variable = { DED_odd_offset^4 =  inv_teacher_per_diff }


	#POOR

	#DED_odd_offset[0] = teacher_per_diff/8;		>teacher_per_diff/8
	#DED_odd_offset[1] = teacher_per_diff;			>teacher_per_diff
	#DED_odd_offset[2] = teacher_per_diff/8;		>teacher_per_diff/8
	#DED_odd_offset[3] = -teacher_per_diff/4;		>teacher_per_diff/8 * 2
	#DED_odd_offset[4] = -teacher_per_diff;			>teacher_per_diff/8 * 2 * 4



	set_temp_variable = { teacher_per_diff = teacher_per^1 }
	divide_temp_variable = { teacher_per_diff = DED_teacher_effect_divider }


	add_to_variable = { DED_odd_offset^1 = teacher_per_diff }

	divide_temp_variable = { teacher_per_diff = 8 }
	add_to_variable = { DED_odd_offset^0 = teacher_per_diff }
	add_to_variable = { DED_odd_offset^2 = teacher_per_diff }

	set_temp_variable = { inv_teacher_per_diff = 0 }
	subtract_from_temp_variable = {inv_teacher_per_diff = teacher_per_diff }

	multiply_temp_variable = { inv_teacher_per_diff = 2 }
	add_to_variable = { DED_odd_offset^3 =  inv_teacher_per_diff }

	multiply_temp_variable = { inv_teacher_per_diff = 4 }
	add_to_variable = { DED_odd_offset^4 =  inv_teacher_per_diff }




	#AVERAGE

	#DED_odd_offset[0] = -teacher_per_diff/8 * 5;	>-teacher_per_diff/8 * 5
	#DED_odd_offset[1] = teacher_per_diff/8;		>teacher_per_diff/8
	#DED_odd_offset[2] = teacher_per_diff;			>teacher_per_diff
	#DED_odd_offset[3] = teacher_per_diff/8;		>teacher_per_diff/8
	#DED_odd_offset[3] = -teacher_per_diff/8 * 5;	>-teacher_per_diff/8 * 5



	set_temp_variable = { teacher_per_diff = teacher_per^2 }
	divide_temp_variable = { teacher_per_diff = DED_teacher_effect_divider }


	add_to_variable = { DED_odd_offset^2 = teacher_per_diff }

	divide_temp_variable = { teacher_per_diff = 8 }
	add_to_variable = { DED_odd_offset^1 = teacher_per_diff }
	add_to_variable = { DED_odd_offset^3 = teacher_per_diff }

	set_temp_variable = { inv_teacher_per_diff = 0 }
	subtract_from_temp_variable = {inv_teacher_per_diff = teacher_per_diff }

	multiply_temp_variable = { inv_teacher_per_diff = 5 }
	add_to_variable = { DED_odd_offset^0 =  inv_teacher_per_diff }
	add_to_variable = { DED_odd_offset^4 =  inv_teacher_per_diff }


	#GOOD

	#DED_odd_offset[0] = -teacher_per_diff;			>teacher_per_diff/8 * 2 * 4
	#DED_odd_offset[1] = -teacher_per_diff/4;		>teacher_per_diff/8 * 2
	#DED_odd_offset[2] = teacher_per_diff/8;		>teacher_per_diff/8
	#DED_odd_offset[3] = teacher_per_diff;			>teacher_per_diff
	#DED_odd_offset[4] = teacher_per_diff/8;		>teacher_per_diff/8



	set_temp_variable = { teacher_per_diff = teacher_per^3 }
	divide_temp_variable = { teacher_per_diff = DED_teacher_effect_divider }


	add_to_variable = { DED_odd_offset^3 = teacher_per_diff }

	divide_temp_variable = { teacher_per_diff = 8 }
	add_to_variable = { DED_odd_offset^2 = teacher_per_diff }
	add_to_variable = { DED_odd_offset^4 = teacher_per_diff }

	set_temp_variable = { inv_teacher_per_diff = 0 }
	subtract_from_temp_variable = {inv_teacher_per_diff = teacher_per_diff }

	multiply_temp_variable = { inv_teacher_per_diff = 2 }
	add_to_variable = { DED_odd_offset^1 =  inv_teacher_per_diff }

	multiply_temp_variable = { inv_teacher_per_diff = 4 }
	add_to_variable = { DED_odd_offset^0 =  inv_teacher_per_diff }


	#MASTERS

	#DED_odd_offset[0] = -teacher_per_diff;
	#DED_odd_offset[1] = -teacher_per_diff/4;
	#DED_odd_offset[3] = teacher_per_diff/4;
	#DED_odd_offset[4] = teacher_per_diff;


	#DED_odd_offset[0] = -teacher_per_diff;
	#DED_odd_offset[1] = -teacher_per_diff/4;
	#DED_odd_offset[2] = teacher_per_diff/2;
	#DED_odd_offset[3] = teacher_per_diff/2;
	#DED_odd_offset[4] = teacher_per_diff/4;

	set_temp_variable = { teacher_per_diff = teacher_per^4 }
	divide_temp_variable = { teacher_per_diff = DED_teacher_effect_divider }

	add_to_variable = { DED_odd_offset^4 = teacher_per_diff }

	divide_temp_variable = { teacher_per_diff = 4 }
	add_to_variable = { DED_odd_offset^3 = teacher_per_diff }

	set_temp_variable = { inv_teacher_per_diff = 0 }
	subtract_from_temp_variable = {inv_teacher_per_diff = teacher_per_diff }

	add_to_variable = { DED_odd_offset^1 = inv_teacher_per_diff }

	multiply_temp_variable = { inv_teacher_per_diff = 4 }
	add_to_variable = { DED_odd_offset^0 =  inv_teacher_per_diff }



	for_loop_effect = {
		end = 5
		value = i
		divide_variable = { DED_odd_offset^i = 100 }
	}
}

DED_init_temp = {
	#Sets the base value for these variables... I could make it a hidden Dyn and use unique modifiers.

	# Mage quality from worst(0) to best(4)

	#Amount of mages teaching by mage level at game start. (Mage per Level)
	set_variable = { DED_teaching_mage^0 = 0 }
	set_variable = { DED_teaching_mage^1 = 0 }
	set_variable = { DED_teaching_mage^2 = 0 }
	set_variable = { DED_teaching_mage^3 = 0 }
	set_variable = { DED_teaching_mage^4 = 0 }


	#Teaching capacity generated by teacher mage level at game start (TC per mage)
	set_variable = { DED_teaching_rate_teacher_mage^0 = 1 }
	set_variable = { DED_teaching_rate_teacher_mage^1 = 3 }
	set_variable = { DED_teaching_rate_teacher_mage^2 = 5 }
	set_variable = { DED_teaching_rate_teacher_mage^3 = 10 }
	set_variable = { DED_teaching_rate_teacher_mage^4 = 20 }

	#Split of overall Mage Gain into each mage level (% of mage gain)
	set_variable = { DED_mage_rate^0 = 10 }
	set_variable = { DED_mage_rate^1 = 25 }
	set_variable = { DED_mage_rate^2 = 50 }
	set_variable = { DED_mage_rate^3 = 12 }
	set_variable = { DED_mage_rate^4 = 3 }


	#This will need some extra function to calculate I'm afraid.
	set_variable = { DED_mage_gain_total = ?}
}