DED_startup = {

	set_technology = {
		DED_starting_tech = 1
		DED_tech_mage_kit = 1
		DED_tech_first_seal = 1
		DED_tech_necromancy = 1
		DED_tech_soul_cleansing = 1
		popup = no
	}
	load_oob = "DED_1007"
	add_equipment_to_stockpile = {
		type = DED_undead_equipment_0
    	amount = 900
	}
	add_equipment_to_stockpile = {
		type = DED_mage_equipment_0
    	amount = 900
	}



	create_equipment_variant = {
		name = "Abomination"
		type = DED_abomination_equipment_1
		parent_version = 0
		is_buildable = no
		modules = {
			main_armament_slot = DED_tank_heavy_machine_gun
		}
		icon = "gfx/interface/technologies/gwtank.dds"
	}
	create_equipment_variant = {
		name = "Abomination 2.0"
		type = DED_abomination_equipment_1
		parent_version = 0
		is_buildable = no
		modules = {
			main_armament_slot = DED_tank_heavy_machine_gun
		}
		upgrades = {
			DED_abomination_upgrade = 1
			DED_abomination_eng_upgrade = 15
		}
		icon = "gfx/interface/technologies/gwtank.dds"
	}		
	add_equipment_to_stockpile = {
		type = DED_abomination_equipment_1
    	amount = 900
    	producer = DED
    	variant_name = "Abomination"
	}
	add_equipment_to_stockpile = {
		type = DED_abomination_equipment_1
    	amount = 900
    	producer = DED
    	variant_name = "Abomination 2.0"
	}
	
	load_focus_tree = DED_START
	#army_experience = 100
	#set_variable = { DED_undead_production = 735 }
	#country_event = { id = dread.1 days = 3 }

	
	add_dynamic_modifier = {	
		modifier = DED_expanded_farmlands
		scope = DED
	}
	set_variable = { DED_test_var = 1}

	DED_catacomb_startup = yes


	DED_setup_gui = yes
}


#DED GUI stuff

DED_setup_gui = {
	add_to_array = { DED_gui_pos = 0}
	add_to_array = { DED_gui_pos = 1}
	add_to_array = { DED_gui_pos = 2}
	add_to_array = { DED_gui_pos = 3}

	add_to_array = { DED_gui_pos_y = 7}
	add_to_array = { DED_gui_pos_y = 41}
	add_to_array = { DED_gui_pos_y = 75}
	add_to_array = { DED_gui_pos_y = 109}

	add_to_array = { DED_gui_pos_y_bg = 0}
	add_to_array = { DED_gui_pos_y_bg = 34}
	add_to_array = { DED_gui_pos_y_bg = 68}
	add_to_array = { DED_gui_pos_y_bg = 102}
}

DED_gui_increase_priority = {
	# DED_gui_ID is the ID of the "part" moved


	if = {
		limit = {
			check_variable = { DED_gui_pos^DED_gui_ID > 0}
		}
		set_temp_variable = { x = DED_gui_pos^DED_gui_ID }
		subtract_from_temp_variable = { x = 1}


		for_each_loop = {
			array = DED_gui_pos
			if = {
				limit = {
					check_variable = { DED_gui_pos^i = x }
				}
				set_temp_variable = { break = 1 }
			}
		}
		set_variable = { DED_gui_found_i = i }

		set_temp_variable = { tempinc_y = DED_gui_pos_y^DED_gui_ID }
		set_temp_variable = { tempinc_y_bg = DED_gui_pos_y_bg^DED_gui_ID }

		set_temp_variable = { newtempinc_y = DED_gui_pos_y^DED_gui_found_i }
		set_temp_variable = { newtempinc_y_bg = DED_gui_pos_y_bg^DED_gui_found_i }


		set_variable = { DED_gui_pos_y^DED_gui_ID = newtempinc_y }
		set_variable = { DED_gui_pos_y_bg^DED_gui_ID = newtempinc_y_bg }

		set_variable = { DED_gui_pos_y^DED_gui_found_i = tempinc_y }
		set_variable = { DED_gui_pos_y_bg^DED_gui_found_i = tempinc_y_bg }

		set_variable = { DED_gui_pos^i = DED_gui_pos^DED_gui_ID }
		set_variable = { DED_gui_pos^DED_gui_ID = x }

	}
}

DED_gui_decrease_priority = {
	# DED_gui_ID is the ID of the "part" moved


	if = {
		limit = {
			check_variable = { DED_gui_pos^DED_gui_ID < 3}
		}
		set_temp_variable = { x = DED_gui_pos^DED_gui_ID }
		add_to_temp_variable = { x = 1}


		for_each_loop = {
			array = DED_gui_pos
			if = {
				limit = {
					check_variable = { DED_gui_pos^i = x }
				}
				set_temp_variable = { break = 1 }
			}
		}
		set_variable = { DED_gui_found_i = i }

		set_temp_variable = { tempinc_y = DED_gui_pos_y^DED_gui_ID }
		set_temp_variable = { tempinc_y_bg = DED_gui_pos_y_bg^DED_gui_ID }

		set_temp_variable = { newtempinc_y = DED_gui_pos_y^DED_gui_found_i }
		set_temp_variable = { newtempinc_y_bg = DED_gui_pos_y_bg^DED_gui_found_i }


		set_variable = { DED_gui_pos_y^DED_gui_ID = newtempinc_y }
		set_variable = { DED_gui_pos_y_bg^DED_gui_ID = newtempinc_y_bg }

		set_variable = { DED_gui_pos_y^DED_gui_found_i = tempinc_y }
		set_variable = { DED_gui_pos_y_bg^DED_gui_found_i = tempinc_y_bg }

		set_variable = { DED_gui_pos^i = DED_gui_pos^DED_gui_ID }
		set_variable = { DED_gui_pos^DED_gui_ID = x }

	}
}

#Welcome to my personal purgatory
#Integer limits are in the air
#Gaze upon my work ye mighty
#And despair.

DED_monthly = {
	if = {
		limit = {
			has_country_flag = DED_catacomb_system_active
		}
		DED_catacomb_system_loop = yes
	}
}

DED_catacomb_system_loop = {
	DED_catacomb_corpse_gain = yes
	DED_mage_gain = yes
	DED_catacomb_gain_undead_base = yes
	DED_undead_attrition = yes
	DED_catacomb_gain_undead = yes
}

DED_catacomb_startup = {
	set_variable = { DED_corpse_stockpile = 100 }	#This variable stores the amount of corpses in store. It's in hundreds for the sake of not going over the bloody integer limit.
	set_variable = { DED_death_rate = 20 }			#What a joyous variable, the death rate per 1000 people in the dread league's territory! (it's pretty high innit?)

	set_variable = { DED_mage_ressurectors = 200 }
	set_variable = { DED_mage_ressurection_rate = 10 }


	set_variable = { DED_mage_teachers = 50 }
	set_variable = { DED_mage_teaching_rate = 0.04 }
	set_variable = { DED_mage_prod = 0}

	set_variable = { DED_mage_unassigned = 50 }

	set_variable = { DED_mage_auto_assignment = 0 }

	set_country_flag = DED_catacomb_system_active
	DED_catacomb_system_loop = yes
}



#Calculates the Number of corpses gained each months. Adds them to ze corpse stockpile Simple as
DED_catacomb_corpse_gain = {
	set_temp_variable = { DED_temp_death_rate = DED_death_rate }
	divide_temp_variable = { DED_temp_death_rate = 12 }
	set_temp_variable = { DED_total = max_manpower_k }
	divide_temp_variable = { DED_total = 100 }
	multiply_temp_variable = { DED_total = DED_temp_death_rate }
	round_temp_variable = DED_total

	set_variable = { DED_corpse_production = DED_total }
	add_to_variable = { DED_corpse_stockpile = DED_corpse_production }
}



#Calculate the bree- uh ... schooling rate of mages? yes. Schooling Rate.
DED_mage_gain = {

	#First, we calculate the new state of production. Kinda the same system as IC in game. Except here it's be ... Schooling Capacity?	
	#Essentially, Teachers teach less than one student per month (in the sense, that a teacher will have to take some 30 months of personal time to teach to one student.)

	set_variable = { DED_mage_monthly_prod = DED_mage_teachers }
	multiply_variable = { DED_mage_monthly_prod = DED_mage_teaching_rate }

	add_to_variable = { DED_mage_prod = DED_mage_monthly_prod }

	set_variable = { DED_effective_mage_prod = DED_mage_prod }
	round_variable = DED_effective_mage_prod
	if = { #If DED_mage_prod's decimal is >0.5, it'll round up instead of down. We always want it to round down, so:
		limit = { check_variable = { DED_effective_mage_prod > DED_mage_prod }}
		subtract_from_temp_variable = { DED_effective_mage_prod = 1}
	}

	#From that, we now remove the 'produced' mages, and send them to wherever they work.

	subtract_from_variable = { DED_mage_prod = DED_effective_mage_prod}

	if = {	
		limit = { check_variable = { DED_mage_auto_assignment = 0 }	}	

		add_to_variable = { DED_necromancer_teachers = DED_effective_mage_prod }
	}
	else_if = {			#Military Auto Assignment
		limit = { check_variable = { DED_mage_auto_assignment = 1 }	}	

		add_equipment_to_stockpile = {
			type = DED_mage_equipment
	    	amount = var:DED_effective_mage_prod
	    	producer = DED
		}
	}
	else_if = {		#Schooling Auto Assignment
		limit = { check_variable = { DED_mage_auto_assignment = 2 }	}	

		add_to_variable = { DED_mage_teachers = DED_effective_mage_prod }
	}
	else_if = {		#Ressurection Auto Assignment
		limit = { check_variable = { DED_mage_auto_assignment = 3 }	}

		add_to_variable = { DED_mage_ressurectors = DED_effective_mage_prod }
	}
}

DED_undead_attrition = {

	#LOSSES IN ARMY

	set_variable = { DED_undead_in_army_reliability = 0.99 }

	set_variable = { DED_undead_in_army_reliability_final = 1 }
	subtract_from_variable = { DED_undead_in_army_reliability_final = DED_undead_in_army_reliability }
	multiply_variable = { DED_undead_in_army_reliability_final = 100 }

	set_variable = { DED_undead_in_army = num_equipment_in_armies@DED_undead_equipment }
	set_variable = { DED_undead_in_reserve = num_equipment@DED_undead_equipment }
	set_variable = { DED_undead_in_army_lost = DED_undead_in_army }
	multiply_variable = { DED_undead_in_army_lost = DED_undead_in_army_reliability_final }



	#LOSSES IN INDUSTRY


	set_variable = { DED_undead_in_industry_lost = 0 }

	#LOSSES IN SUPPLY



	set_variable = { DED_undead_in_supply_lost = 0 }


	#Total losses

	set_variable = { DED_undead_total_losses = DED_undead_in_army_lost }
	add_to_variable = { DED_undead_total_losses = DED_undead_in_industry_lost }
	add_to_variable = { DED_undead_total_losses = DED_undead_in_supply_lost }

}

DED_catacomb_gain_undead_base = {
	set_variable = { DED_undead_monthly_prod = DED_necromancer_ressurectors }
	multiply_variable = { DED_undead_monthly_prod = DED_necromancer_ressurection_rate }

	#We need a stockpile of undeads on the per unit level .... I need to setup some arrays to keep numbers that can go in the 2+ millions
}


DED_catacomb_gain_undead = {
	set_variable = { DED_undead_gain = DED_undead_monthly_prod }

	set_variable = { DED_effective_change = DED_undead_gain }
	subtract_from_variable = { DED_effective_change = DED_undead_total_losses }

	if = {
		limit = { check_variable = { DED_undead_total_losses > DED_undead_gain }}

		#Oh god oh fuck we are losing undeads from attritionhye's
	}
	else = {
		subtract_from_variable = { DED_undead_gain = DED_undead_total_losses }

		round_temp_variable = DED_undead_gain

		add_to_variable = { DED_undead_inactive_stockpile = DED_undead_gain }

		#add_equipment_to_stockpile = {
		#	type = DED_undead_equipment
		#	amount = var:DED_undead_equipement_gain
		#}
	}
}


DED_catacomb_military_impact = {
	set_variable = { DED_army_size_undead = num_battalions_with_type@DED_unit_undead_horde }

	set_variable = { DED_army_size_total = num_battalions }

	set_variable = { DED_undead_army_ratio = DED_army_size_undead}
	divide_variable = { DED_undead_army_ratio = DED_army_size_total}

	#This might not actually be needed since I now have created fancy modifiers for undead hordes. Can be used for something else tho, like a little "info" bit or smth
}

DED_catacomb_undead_pools_changes = {
	
	if = {
		limit = {
			check_variable = { DED_cat_sys_priority_var = DED_cat_sys_priority_var_army }
		}
	}
	else_if = {
		limit = {
			check_variable = { DED_cat_sys_priority_var = DED_cat_sys_priority_var_army }
		}

	}
	else_if = {
		limit = {
			check_variable = { DED_cat_sys_priority_var = DED_cat_sys_priority_var_army }
		}

	}
	else_if = {
		limit = {
			check_variable = { DED_cat_sys_priority_var = DED_cat_sys_priority_var_army }
		}

	}
	else_if = {
		limit = {
			check_variable = { DED_cat_sys_priority_var = DED_cat_sys_priority_var_army }
		}

	}

	if = {
		limit = {
			OR = {
				AND = {
					check_variable = { DED_cat_sys_priority_var > 0 }
				}
				AND = {
					check_variable = { DED_cat_sys_priority_var < DED_cat_sys_active_systems }
				}
			}
		}
		subtract_from_variable = { DED_cat_sys_priority_var = 1 }
		DED_catacomb_undead_pools_changes = yes
	}
}