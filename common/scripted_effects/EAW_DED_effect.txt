DED_startup = {
	set_variable = { DED_delayed_events = 0 }

	set_technology = {
		DED_starting_tech = 1
		DED_tech_mage_kit = 1
		DED_tech_first_seal = 1
		DED_tech_necromancy = 1
		DED_tech_soul_cleansing = 1
		DED_ancient_warfare = 1
		popup = no
	}
	load_oob = "DED_1007"
	add_equipment_to_stockpile = {
		type = DED_undead_equipment_0
    	amount = 900
	}
	add_equipment_to_stockpile = {
		type = DED_mage_equipment_0
    	amount = 900
	}
	add_equipment_to_stockpile = {
		type = DED_mage_equipment_1
    	amount = 900
	}

	load_focus_tree = DED_START
	#load_focus_tree = DED_Rosa_one
	#army_experience = 100
	#set_variable = { DED_undead_production = 735 }
	#country_event = { id = dread.1 days = 3 }


	add_dynamic_modifier = {
	    modifier = DED_thaumaturgia
	}

	set_variable = { DED_test_var = 1}

	#DED_catacomb_startup = yes


	#DED_setup_gui = yes

	set_country_flag = DED_magic_schools

	#DED_the_thaumaturgia_init = yes

	DED_init_temp = yes
}

DED_monthly = {
	DED_mage_gain = yes
}

DED_delayed_events_script = {
	custom_effect_tooltip = "[DED_delaying_events]"
	add_to_variable = { DED_delayed_events = 1 }
	if = {
		limit = {
			check_variable = { DED_delayed_events = 2}
		}
		add_political_power = -1
	}
}





#MAGE GAIN TOTAL FUNC

#This function should only be called when there's a change.
#It calculates the teached mage gain by adding the number of working teaching mages * their teaching capacity, all of it multiplied by a mage teaching efficiency rate.


DED_init_temp = {
	#Sets the base value for these variables... I could make it a hidden Dyn and use unique modifiers.

	# Mage quality from worst(0) to best(4)

	#Amount of mages teaching by mage level at game start. (Mage per Level)
	set_variable = { DED_teaching_mage^0 = 100 }
	set_variable = { DED_teaching_mage^1 = 250 }
	set_variable = { DED_teaching_mage^2 = 500 }
	set_variable = { DED_teaching_mage^3 = 100 }
	set_variable = { DED_teaching_mage^4 = 50 }


	#Teaching capacity generated by teacher mage level at game start (TC per mage)
	set_variable = { DED_teaching_rate_teacher_mage^0 = 0.8 }
	set_variable = { DED_teaching_rate_teacher_mage^1 = 0.9 }
	set_variable = { DED_teaching_rate_teacher_mage^2 = 1 }
	set_variable = { DED_teaching_rate_teacher_mage^3 = 1.1 }
	set_variable = { DED_teaching_rate_teacher_mage^4 = 1.25 }

	#Split of overall Mage Gain into each mage level (% of mage gain)
	set_variable = { DED_mage_rate^0 = 0.1 }
	set_variable = { DED_mage_rate^1 = 0.25 }
	set_variable = { DED_mage_rate^2 = 0.5 }
	set_variable = { DED_mage_rate^3 = 0.10 }
	set_variable = { DED_mage_rate^4 = 0.05 }


	#This will need some extra function to calculate I'm afraid.
	#set_variable = { DED_mage_gain_total = ?}
}

DED_mage_gain = {

	DED_change_teacher_training_rates = yes
	DED_civilian_mage_gain_calc = yes

	if = {
		limit = {
			has_country_flag = DED_academy_formed
		}
		DED_teaching_mage_gain_calc = yes
	}

	set_variable = { DED_mage_gain_total = 10 } #Set a value here to determine the number of self taught mages.
	add_to_variable = { DED_mage_gain_total = DED_mage_gain_civilian }
	add_to_variable = { DED_mage_gain_total = DED_mage_gain_teaching }
	

	for_loop_effect = {
		end = 5
		value = i

		set_variable = { final_mage_gain_rate^i = DED_mage_rate^i }
		add_to_variable = { final_mage_gain_rate^i = DED_odd_offset^i }
		set_variable = { final_mage_gain^i = final_mage_gain_rate^i }
		multiply_variable = { final_mage_gain^i = DED_mage_gain_total }
	}

	add_equipment_to_stockpile = { type = DED_mage_equipment_0 amount = final_mage_gain^0 }
	add_equipment_to_stockpile = { type = DED_mage_equipment_1 amount = final_mage_gain^1 }
	add_equipment_to_stockpile = { type = DED_mage_equipment_2 amount = final_mage_gain^2 }
	add_equipment_to_stockpile = { type = DED_mage_equipment_3 amount = final_mage_gain^3 }
	add_equipment_to_stockpile = { type = DED_mage_equipment_4 amount = final_mage_gain^4 }
}


#Civilian Mages grant a minimal amount of teaching capacity. So they act as a straight up addition to total teaching capacity without affecting the values.

DED_civilian_mage_gain_calc = {
	set_temp_variable = { teaching_cap = 0 }
	add_to_temp_variable = { teaching_cap = num_equipment@DED_mage_equipment_0 }
	add_to_temp_variable = { teaching_cap = num_equipment@DED_mage_equipment_1 }
	add_to_temp_variable = { teaching_cap = num_equipment@DED_mage_equipment_2 }
	add_to_temp_variable = { teaching_cap = num_equipment@DED_mage_equipment_3 }
	add_to_temp_variable = { teaching_cap = num_equipment@DED_mage_equipment_4 }

	#Multiply the teaching capacity generated by the efficiency modifier. CURRENTLY DISABLED (may add a specific one for civilian teaching if I find the need for it)
	#multiply_temp_variable = { teaching_cap = modifier@DED_mage_teaching_efficiency }.


	#Round it up to get the integer value of it all and save it in a non temp variable.
	round_variable = teaching_cap
	set_variable = { DED_mage_gain_civilian = teaching_cap }
}

# DED_mage_gain_teaching is total mage gain from teachers. NOT ENABLED AT START!

	#Note: Teaching rate between all types of mages is not massively different (less than 50% efficiency difference between awful and master)

DED_teaching_mage_gain_calc = {
	set_temp_variable = { teaching_cap = 0 }

	for_loop_effect = {
		end = 5
		value = i
		set_temp_variable = { teaching_capacity^i = DED_teaching_mage^i }
		multiply_temp_variable = { teaching_capacity^i = DED_teaching_rate_teacher_mage^i }
		add_to_variable = { teaching_cap = teaching_capacity^i }
	}

	#Multiply the teaching capacity generated by the efficiency modifier.
	multiply_temp_variable = { teaching_cap = modifier@DED_mage_teaching_efficiency }

	#Round it up to get the integer value of it all and save it in a non temp variable.
	round_variable = teaching_cap
	set_variable = { DED_mage_gain_teaching = teaching_cap }
}

# This Function calculates the percentage of each type of mage produced by the total teaching capacity each months.
#
#	IMPACT OF PERCENTAGE
#
#	1 		+ 0.5 	+ 0.25 	+ 0 	+ 0 	= 1.75
#	0.5 	+ 1 	+ 0.5 	+ 0.25 	+ 0 	= 2.25
#	0.25 	+ 0.5 	+ 1 	+ 0.5 	+ 0.25 	= 2.5
#	0 		+ 0.25 	+ 0.5 	+ 1 	+ 0.5 	= 2.25
#	0 		+ 0 	+ 0.25 	+ 0.5 	+ 1 	= 1.75
#

DED_change_teacher_training_rates = {
	set_temp_variable = { total_teachers = 0 }

	for_loop_effect = {
		end = 5
		value = i
		add_to_temp_variable = { total_teachers = DED_teaching_mage^i }
	}

	for_loop_effect = {
		end = 5
		value = i
		set_temp_variable = { teacher_per^i = DED_teaching_mage^i }
		multiply_temp_variable = { teacher_per^i = 100}
		divide_temp_variable = { teacher_per^i = total_teachers }
	}


	set_variable = { DED_odd_offset^0 = 0 }
	set_variable = { DED_odd_offset^1 = 0 }
	set_variable = { DED_odd_offset^2 = 0 }
	set_variable = { DED_odd_offset^3 = 0 }
	set_variable = { DED_odd_offset^4 = 0 }



	#AWFUL

		set_temp_variable = { teacher_per_diff = teacher_per^0 }
		divide_temp_variable = { teacher_per_diff = DED_teacher_effect_divider }

		add_to_variable = { DED_odd_offset^0 = teacher_per_diff }
	
		divide_temp_variable = { teacher_per_diff = 2 }
		add_to_variable = { DED_odd_offset^1 = teacher_per_diff }

		divide_temp_variable = { teacher_per_diff = 2 }
		add_to_variable = { DED_odd_offset^2 = teacher_per_diff }


	#POOR

		set_temp_variable = { teacher_per_diff = teacher_per^1 }
		divide_temp_variable = { teacher_per_diff = DED_teacher_effect_divider }

		add_to_variable = { DED_odd_offset^1 = teacher_per_diff }
	
		divide_temp_variable = { teacher_per_diff = 2 }
		add_to_variable = { DED_odd_offset^0 = teacher_per_diff }
		add_to_variable = { DED_odd_offset^2 = teacher_per_diff }

		divide_temp_variable = { teacher_per_diff = 2 }
		add_to_variable = { DED_odd_offset^3 = teacher_per_diff }


	#AVERAGE

		set_temp_variable = { teacher_per_diff = teacher_per^2 }
		divide_temp_variable = { teacher_per_diff = DED_teacher_effect_divider }

		add_to_variable = { DED_odd_offset^2 = teacher_per_diff }
	
		divide_temp_variable = { teacher_per_diff = 2 }
		add_to_variable = { DED_odd_offset^1 = teacher_per_diff }
		add_to_variable = { DED_odd_offset^3 = teacher_per_diff }

		divide_temp_variable = { teacher_per_diff = 2 }
		add_to_variable = { DED_odd_offset^0 = teacher_per_diff }
		add_to_variable = { DED_odd_offset^4 = teacher_per_diff }


	#GOOD

		set_temp_variable = { teacher_per_diff = teacher_per^3 }
		divide_temp_variable = { teacher_per_diff = DED_teacher_effect_divider }

		add_to_variable = { DED_odd_offset^3 = teacher_per_diff }
	
		divide_temp_variable = { teacher_per_diff = 2 }
		add_to_variable = { DED_odd_offset^2 = teacher_per_diff }
		add_to_variable = { DED_odd_offset^4 = teacher_per_diff }

		divide_temp_variable = { teacher_per_diff = 2 }
		add_to_variable = { DED_odd_offset^1 = teacher_per_diff }


	#AWFUL

		set_temp_variable = { teacher_per_diff = teacher_per^4 }
		divide_temp_variable = { teacher_per_diff = DED_teacher_effect_divider }

		add_to_variable = { DED_odd_offset^4 = teacher_per_diff }
	
		divide_temp_variable = { teacher_per_diff = 2 }
		add_to_variable = { DED_odd_offset^3 = teacher_per_diff }

		divide_temp_variable = { teacher_per_diff = 2 }
		add_to_variable = { DED_odd_offset^2 = teacher_per_diff }

	set_temp_variable = { DED_odd_offset_total = 0 }


	for_loop_effect = {
		end = 5
		value = i
		add_to_temp_variable = { DED_odd_offset_total = DED_odd_offset^i }
	}

	divide_temp_variable = { DED_odd_offset_total = 5 }



	for_loop_effect = {
		end = 5
		value = i
		subtract_from_variable = { DED_odd_offset^i = DED_odd_offset_total }
		divide_variable = { DED_odd_offset^i = 100 }
	}
}

